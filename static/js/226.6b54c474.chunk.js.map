{"version":3,"file":"static/js/226.6b54c474.chunk.js","mappings":"8RAoDA,EAhDqBA,IAWd,IAXe,QACpBC,EAAU,UAAS,KACnBC,EAAO,KAAI,KACXC,EAAO,SAAQ,SACfC,GAAW,EAAK,QAChBC,EAAO,UACPC,EAAY,GAAE,MACdC,EAAK,KACLC,EAAI,SACJC,GAEDT,EADIU,GAAKC,EAAAA,EAAAA,GAAAX,EAAAY,GAER,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACLd,QAASA,EACTC,KAAMA,EACNC,KAAMA,EACNC,SAAUA,EACVC,QAASA,EACTC,UAAWA,EACXC,MAAOA,GACHG,GAAK,IAAAM,SAAA,CAERP,IACCQ,EAAAA,EAAAA,KAAA,OACEC,IAAKT,EACLU,IAAKX,EACLY,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,YAAa,SAEtD,IAEFf,KACM,C,qHC/Bb,MAyIA,EAzIaR,IAAiD,IAAhD,KAAEwB,EAAI,SAAEC,EAAQ,YAAEC,EAAW,UAAEC,GAAW3B,EACtD,MAAM4B,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAqBC,EAAAA,EAAAA,KACxBC,GAAUA,EAAMC,cAAcC,kBAAkBJ,qBAcnD,OAXAK,EAAAA,EAAAA,YAAU,KACJP,EAASQ,SAAWN,IACtBO,EAAAA,EAAAA,IACET,EAASQ,QACTN,EACAJ,EACAC,EAEJ,GACC,CAACH,EAAMM,EAAoBJ,EAAaC,IAEtCH,GAGHX,EAAAA,EAAAA,MAAA,OAAKP,UAAS,UAAAgC,OAAYb,EAAW,cAAgB,YAAaT,SAAA,EAChEC,EAAAA,EAAAA,KAAA,MACEsB,IAAKX,EACLtB,UAAS,yBAAAgC,OAA4Bb,EAAoB,GAAT,QAAcT,SAE7DQ,EAAKjB,SAERM,EAAAA,EAAAA,MAAA,MACEP,UAAS,yFAAAgC,OACNb,EAAoB,GAAT,QACXT,SAAA,EAEHH,EAAAA,EAAAA,MAAA,MACEP,UAAS,yDAAAgC,OACNb,EAAsD,GAA3C,0CAEdL,MAAO,CAAEoB,OAAQ,KAAMxB,SAAA,EAEvBH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,UAAU,KACbC,EAAAA,EAAAA,KAAA,QAAMX,UAAU,YAAYC,MAAOiB,EAAKrB,KAAKa,SAC1CQ,EAAKrB,WAGVU,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,WAAW,KACdC,EAAAA,EAAAA,KAAA,QAAMX,UAAU,YAAYC,MAAOiB,EAAKiB,MAAMzB,SAC3CQ,EAAKiB,WAGThB,IACCZ,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBAAoB,KACvBC,EAAAA,EAAAA,KAAA,QAAMX,UAAU,YAAYC,MAAOiB,EAAK,kBAAkBR,SACvDQ,EAAK,0BAKbC,IACCZ,EAAAA,EAAAA,MAAA,MACEP,UAAU,mDACVc,MAAO,CAAEoB,OAAQ,IAAKE,YAAa,KAAM1B,SAAA,EAEzCH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBAAuB,KAC1BC,EAAAA,EAAAA,KAAA,QAAMX,UAAU,YAAYC,MAAOiB,EAAK,oBAAoBR,SACzDQ,EAAK,0BAGVX,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8BAA8B,KACjCC,EAAAA,EAAAA,KAAA,QACEX,UAAU,YACVC,MAAOiB,EAAK,4BAA4BR,SAEvCQ,EAAK,kCAGVX,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAAiB,KACpBC,EAAAA,EAAAA,KAAA,QACEX,UAAU,YACVC,MAAOiB,EAAK,6BAA6BR,SAExCQ,EAAK,sCAMdP,EAAAA,EAAAA,KAAA,MACEX,UAAS,+CAAAgC,OACNb,EAA+B,GAApB,mBAEdL,MAAO,CAAEoB,OAAQ,IAAKE,YAAa,KAAM1B,SAE1B,aAAdQ,EAAKrB,OACJU,EAAAA,EAAAA,MAAA8B,EAAAA,SAAA,CAAA3B,SAAA,EACEH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAAgB,KACnBC,EAAAA,EAAAA,KAAA,QAAMX,UAAU,YAAYC,MAAOiB,EAAK,cAAcR,SACnDQ,EAAK,oBAGVX,EAAAA,EAAAA,MAAA,KAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,SAAS,KACZC,EAAAA,EAAAA,KAAA,QAAMX,UAAU,YAAYC,MAAOiB,EAAKoB,IAAI5B,SACzCQ,EAAKoB,eAOhB3B,EAAAA,EAAAA,KAAA,OAAKX,UAAU,uCAAsCU,UACnDC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,UAIjBW,EAAAA,EAAAA,KAAA,OAAKX,UAAU,yBAAwBU,UACrCC,EAAAA,EAAAA,KAAA,MAAIX,UAAU,aAGhBW,EAAAA,EAAAA,KAAA,MACEX,UAAU,8CACVc,MAAO,CAAEoB,OAAQ,KAAMxB,UAEvBC,EAAAA,EAAAA,KAAA,KAAGX,UAAU,wBAAwBC,MAAOiB,EAAKqB,YAAY7B,SAC1DQ,EAAKqB,sBAhHE,IAoHV,EClFV,EA/CsB7C,IAAuC,IAAtC,KAAEwB,EAAI,YAAEE,EAAW,UAAEC,GAAW3B,EACrD,MAAOyB,EAAUqB,IAAeC,EAAAA,EAAAA,WAAS,GAMzC,OACElC,EAAAA,EAAAA,MAACmC,EAAAA,EAAI,CAAC1C,UAAU,iCAAiCc,MAAO,CAAEC,MAAO,QAASL,SAAA,EACxEC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,mCAAkCU,UAC/CC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAKC,IAAG,CACP3C,UAAS,GAAAgC,OACNb,EAA0C,gBAA/B,6BAA8C,KAE5DP,IAAKM,EAAK0B,SACV/B,IAAI,kBAGRF,EAAAA,EAAAA,KAACkC,EAAAA,EAAQ,CAAC7C,UAAS,GAAAgC,OAAMb,EAAiC,MAAtB,oBAA2B,KAAIT,UACjEC,EAAAA,EAAAA,KAACmC,EAAI,CACH5B,KAAMA,EACNC,SAAUA,EACVC,YAAaA,EACbC,UAAWA,OAGfV,EAAAA,EAAAA,KAAA,UACEX,UAAU,yCACVD,QAzBsBgD,KAC1BP,GAAarB,EAAS,EAwBWT,UAS7BC,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CACJpC,IAAI,yEACJC,IAAI,YACJb,UAAS,aAAAgC,OAAeb,EAAW,UAAY,UAG9C,C,0GC5CX,MAyCA,EAzC8BzB,IAAqB,IAApB,WAAEuD,GAAYvD,EAC3C,MAAMwD,GAAiBC,EAAAA,EAAAA,KACjBC,GAAcC,EAAAA,EAAAA,KACdC,GAAmBC,EAAAA,EAAAA,MAEnB,wBAAEC,GACS,oBAAfP,EACIC,EACe,cAAfD,EACAG,EACAE,EACAG,GAA0BlC,EAAAA,EAAAA,SAAO,GAUvC,OARAM,EAAAA,EAAAA,YAAU,KACH4B,EAAwB3B,UAE3B0B,IACAC,EAAwB3B,SAAU,EACpC,GACC,KAGDnB,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAA3B,UACEH,EAAAA,EAAAA,MAAA,OAAKP,UAAU,2BAA0BU,SAAA,EACvCC,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CACJlC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCJ,IAAI,+DACJC,IAAI,eACJb,UAAU,iBAEZW,EAAAA,EAAAA,KAAA,QAAMX,UAAU,qBAAoBU,SAAC,mBACrCH,EAAAA,EAAAA,MAAA,OAAKP,UAAU,oBAAmBU,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAIX,UAAU,aACdW,EAAAA,EAAAA,KAAA,QAAMX,UAAU,eAAcU,SAAC,QAC/BC,EAAAA,EAAAA,KAAA,MAAIX,UAAU,mBAGjB,E,cCzCP,MAyBA,EAzB4BN,IAA2B,IAA1B,KAAEwB,EAAI,WAAE+B,GAAYvD,EAC/C,MAAOgE,EAAYC,IAAiBlB,EAAAA,EAAAA,WAAS,GAY7C,OACElC,EAAAA,EAAAA,MAAA,OAAKP,UAAS,2BAAAgC,OAA6B0B,EAAa,WAAa,IAAKhD,SAAA,EACxEC,EAAAA,EAAAA,KAACiD,EAAqB,CAACX,WAAYA,KACnCtC,EAAAA,EAAAA,KAACkD,EAAAA,EAAa,CACZ3C,KAAMA,EACNE,YAhBkB0C,KAEtBH,GAAc,EAAK,EAeftC,UAZgB0C,KAGpBJ,GAAc,EAAM,MAWd,C,uDCtBV,MAQA,EAReK,KAEXrD,EAAAA,EAAAA,KAAA,OAAKX,UAAU,mBAAkBU,UAC/BC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,Y,sKCDrB,MA0EA,EA1E8BN,IAAiC,IAAhC,OAAEuE,EAAM,QAAEC,EAAO,MAAEC,GAAOzE,EACvD,MAAM0E,EAA+B,cAArBH,EAAOI,OAAOC,GACxBC,EAAWJ,EACdK,WACAC,cAAcC,KAAKC,SAASV,EAAOI,OAAOC,IACvCtE,EAAYoE,EAAU,WAAaG,EAAW,YAAc,GAC5DK,GAAWC,EAAAA,EAAAA,IAAY,CAC3BP,GAAIL,EAAOI,OAAOC,GAClBxE,SAA+B,cAArBmE,EAAOI,OAAOC,IAA2C,QAArBL,EAAOI,OAAOC,MAGxD,WAAEQ,EAAU,UAAEC,EAAS,WAAEC,EAAU,UAAEC,EAAS,WAAEvB,GAAeU,EACjE,CACEU,WAAY,CAAC,EACbC,UAAW,CAAC,EACZC,WAAY,KACZC,UAAW,KACXvB,YAAY,GAEdkB,EAEE9D,EAAQ,CACZoE,QAASxB,EAAa,GAAM,EAC5ByB,SAAU,SACVC,IAAK,EACLV,KAAMN,EAAU,EAAIG,EAAW,qBAAuB,OACtDU,UAAWI,EAAAA,GAAIC,UAAUC,SAASN,GAClCO,WAAY,mCACZzE,MAAOkD,EAAOwB,UACdC,OAAQtB,EAAU,EAAIG,EAAW,EAAI,EACrCoB,OAAQvB,EAAU,UAAY,OAC9BwB,gBAAiB,WAGnB,OACErF,EAAAA,EAAAA,MAAA,MACE0B,IAAK+C,EACLlE,MAAOA,EACP,aAAYsD,EACZ,cAAaG,EACbvE,UAAWA,EAAUU,SAAA,EAErBC,EAAAA,EAAAA,KAAA,OAAAF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACET,UAAU,4CACJoE,EAA4C,CAAC,GAAtC3D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQqE,GAAeC,IAAgB,IAAArE,UAEpDH,EAAAA,EAAAA,MAAA,OACEP,UAAU,cACVD,QAASkE,EAAOI,OAAOwB,0BAA0BnF,SAAA,CAEhDuD,EAAO6B,cACJ,MACAC,EAAAA,EAAAA,IAAW9B,EAAOI,OAAO2B,UAAU/B,OAAQA,EAAOgC,cACrB,QAAhChC,EAAOI,OAAO6B,eACbvF,EAAAA,EAAAA,KAAA,QAAMX,UAAU,OAAMU,SAAC,WACW,SAAhCuD,EAAOI,OAAO6B,eAChBvF,EAAAA,EAAAA,KAAA,QAAMX,UAAU,OAAMU,SAAC,WACrB,YAGRC,EAAAA,EAAAA,KAAA,OAEIwF,cAAeA,IAAMlC,EAAOI,OAAO+B,YACnCC,YAAapC,EAAOqC,mBACpBC,aAActC,EAAOqC,mBACrBtG,UAAU,WAADgC,OACPiC,EAAOI,OAAOmC,gBAAkB,aAAe,QAIlD,ECVT,EA5DsB9G,IAAsC,IAArC,KAAE+G,EAAI,QAAEvC,EAAO,aAAEwC,GAAchH,EACpD,MAAM0E,EAA6B,cAAnBqC,EAAKpC,OAAOC,GACtBC,EAAWkC,EAAKpC,OAAOsC,cACvB3G,EAAYoE,EAAU,WAAaG,EAAW,YAAc,GAC5DqC,GAAcb,EAAAA,EAAAA,IAAWU,EAAKpC,OAAO2B,UAAUS,KAAMA,EAAKR,cAE1DY,EACJJ,EAAKpC,OAAOC,GAAGwC,MAAM,KAAKC,MAAM,GAAGC,KAAK,MAAQP,EAAKpC,OAAOC,GACxD2C,EAAwB,OAAZP,QAAY,IAAZA,OAAY,EAAZA,EAAeG,GAC3BjC,GAAWC,EAAAA,EAAAA,IAAY,CAC3BP,GAAImC,EAAKpC,OAAOC,GAChBxE,SAAUsE,KAGN,WAAEY,EAAU,UAAEC,EAAS,WAAEvB,GAAeU,EAC1C,CAAEY,WAAY,KAAMC,UAAW,KAAMvB,YAAY,GACjDkB,EAEE9D,EAAQ,CACZoE,QAASxB,EAAa,GAAM,EAC5ByB,SAAUf,GAAWG,EAAW,SAAW,WAC3CG,KAAMN,EAAU,EAAI,OACpBa,UAAWI,EAAAA,GAAIC,UAAUC,SAASN,GAClCO,WAAY,mCACZzE,MAAO0F,EAAKpC,OAAOoB,UACnBC,OAAQtB,EAAU,EAAIV,EAAa,EAAIa,EAAW,EAAI,GAGxD,OACE5D,EAAAA,EAAAA,KAAA,MACEsB,IAAK+C,EACLlE,MAAOA,EACPd,UAAWA,EACXC,MAAOmE,EAAU,GAAE,GAAApC,OAAMyE,EAAKS,YAAaxG,SAE1C0D,EACCwC,GAEArG,EAAAA,EAAAA,MAAA,OACEP,UAAU,eACVc,MAAO,CACLqG,MAAOF,EAAY,MAAQ,UAC3BG,WAAYH,EAAY,OAAS,UACjCvG,SAAA,CAEDkG,GACDjG,EAAAA,EAAAA,KAAA,SAAAD,SAAA,sDAAAsB,OAGSiF,EAAY,MAAQ,UAAS,yCAAAjF,OACvBiF,EAAY,OAAS,SAAQ,yCAM7C,EC7BHI,EAAuBpE,IAC3BqE,QAAQC,IAAI,eAAgBtE,GACvBA,EAIC,oBAANjB,OAA2BiB,IAHzBqE,QAAQE,KAAK,6CACN,6BA8bX,EAzbsB9H,IAUf,IAVgB,QACrBwE,EAAO,KACPhD,EAAI,SACJuG,GAAW,EAAK,KAChBC,EAAI,KACJ7H,EAAI,WACJoD,EAAU,eACV0E,EAAc,gBACdC,EAAe,uBACfC,GACDnI,EACC,MAAMoI,GAAWC,EAAAA,EAAAA,OACVC,EAAWC,IAAgBxF,EAAAA,EAAAA,UAASvB,IACpCgH,EAAcC,IAAmB1F,EAAAA,EAAAA,UAAS,CAAC,IAC3C2F,EAAgBC,IAAqB5F,EAAAA,EAAAA,UAAS,MAC/C6F,GAAW/G,EAAAA,EAAAA,QAAO,OACjBgH,EAAYC,IAAiB/F,EAAAA,EAAAA,WAAS,GAmB7C,IAjBAZ,EAAAA,EAAAA,YAAU,KACR,MAAM4G,EAAgBC,IACpBF,EAAcE,EAAEC,OAAOC,UAAY,EAAE,EAGjCC,EAAiBP,EAASxG,QAKhC,OAJI+G,GACFA,EAAeC,iBAAiB,SAAUL,GAGrC,KACDI,GACFA,EAAeE,oBAAoB,SAAUN,EAC/C,CACD,GACA,IAEgB,0BAAfxF,GAAyD,4BAAfA,GAA2D,oBAAfA,EACxF,IAAI,gBAAE+F,GAAoBtB,EAI5B,MAAOuB,EAAaC,IAAkBzG,EAAAA,EAAAA,WAAS,KAC7C,MAAM0G,EAAa9B,EAAoBpE,GACjCmG,EAAcC,aAAaC,QAAQH,GAEzC,GAAIC,EACF,IACE,MAAMG,EAASC,KAAKC,MAAML,GAO1B,GALgBG,EAAOG,OACpBC,GACW,cAAVA,GACAzF,EAAQ0F,MAAMC,IAASA,EAAIvF,IAAMuF,EAAIC,eAAiBH,MAE7C,OAAOJ,CACtB,CAAE,MAAOQ,GACPzC,QAAQyC,MAAM,oCAAD/H,OAAqCiB,EAAU,KAAK8G,EACnE,CAIF,MAAMC,EAAe,CAAC,aAChBC,EAAe/F,EAAQgG,KAAKL,GAAQA,EAAIvF,IAAMuF,EAAIC,cAExD,OADAE,EAAaG,QAAQF,GACdD,CAAY,KAIrBnI,EAAAA,EAAAA,YAAU,KACR,MAAMsH,EAAa9B,EAAoBpE,GACvCoG,aAAae,QAAQjB,EAAYK,KAAKa,UAAUpB,GAAa,GAC5D,CAACA,EAAahG,IAEjBqE,QAAQC,IAAI,gBAAiB0B,GAG7B,MAAMqB,GAAqBC,EAAAA,EAAAA,UAAQ,KACjC,MAAMP,EAAe,CAAC,aAChBC,EAAe/F,EAAQgG,KAAKL,GAAQA,EAAIvF,IAAMuF,EAAIC,cAExD,OADAE,EAAaG,QAAQF,GACdD,CAAY,GAClB,CAAC9F,IAwBEsG,GAAuBD,EAAAA,EAAAA,UAAQ,KACnC,MAAME,EAAgB,CAAE/F,KAAM,CAAC,YAAa,SAM5C,OALAR,EAAQwG,SAASrG,IACXA,EAAOI,eACTgG,EAAc/F,KAAKyF,KAAK9F,EAAOC,IAAMD,EAAOyF,YAC9C,IAEKW,CAAa,GACnB,CAACvG,IAGEyG,GAAkBJ,EAAAA,EAAAA,UAAQ,KAC9B,MAAMK,EAAkB,CACtBtG,GAAI,YACJL,OAAQ4G,IAAA,IAAC,MAAE1G,GAAO0G,EAAA,OAChBlK,EAAAA,EAAAA,KAAA,SACEd,KAAK,WACLoC,IAAM6I,IACAA,IACFA,EAAGC,cAAgB5G,EAAM6G,wBAC3B,EAEFC,QAAS9G,EAAM+G,uBACfC,SAAUhH,EAAMiH,mCAChB,EAEJ3E,KAAM4E,IAAc,IAAb,IAAEC,GAAKD,EACZ,MAAME,EAAeC,EAAmBF,EAAIG,UAE5C,OACE9K,EAAAA,EAAAA,KAAA,SACEd,KAAK,WACLC,UAAWyL,EACXzK,MAAO,CACL6E,OAAQ4F,EAAe,UAAY,cACnCrG,QAASqG,EAAe,EAAI,IAG5BN,QAASK,EAAII,gBACbP,SAAUG,EAAIK,4BAEhB,GA0BR,MAAO,CAACf,KArBYnD,EAChBvD,EAAQgG,KAAK7F,IAAM5D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACd4D,GAAM,IACToC,KAAMpC,EAAOoD,SACTmE,IAAA,IAAC,IAAEN,EAAG,SAAEpE,GAAU0E,EAAA,OAChBjL,EAAAA,EAAAA,KAAA,SACEX,UAAU,aACV6L,MAAO3E,IACPiE,SAAWzC,GApEJoD,EAACC,EAAUC,EAAUH,KAC1C,MAAMI,EAAcjE,EAAUkC,KAAI,CAACoB,EAAKY,IACtCA,IAAUH,GAAQtL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ6K,GAAG,IAAE,CAACU,GAAWH,IAAUP,IAEvDhE,QAAQC,IAAI,8BAA+B0E,GAGnC,OAAJvE,QAAI,IAAJA,GAAAA,EAAMsB,iBACRtB,EAAKsB,gBAAgBiD,GAEvBhE,EAAagE,EAAY,EA2DTH,CACER,EAAIY,MACJ7H,EAAOyF,YACPpB,EAAEC,OAAOkD,QAGb,EAEJxH,EAAOoC,SAEbvC,EAEoC,GACvC,CAACA,EAASuD,IAEP0E,GAAUC,EAAAA,EAAAA,KACdC,EAAAA,EAAAA,IAAUC,EAAAA,GAAa,CACrBC,qBAAsB,CACpBC,SAAU,MAGdH,EAAAA,EAAAA,IAAUI,EAAAA,GAAa,CACrBF,qBAAsB,CACpBG,MAAO,IACPC,UAAW,MAGfN,EAAAA,EAAAA,IAAUO,EAAAA,GAAgB,CAAC,KAI7B/K,EAAAA,EAAAA,YAAU,KACR,GAAmB,yBAAfoB,EAAuC,CACzC,MAAM4J,EAAiB7E,EAAU8E,OAAOtB,GACxC3D,EAAuBgF,EACzB,IACC,CAAC5J,EAAY+E,EAAWH,IAG3B,MAcM2D,EAAsBF,GACP,yBAAfrI,GAAkD,aAATpD,EACnB,SAAjByL,EAAIyB,SAEM,yBAAf9J,KACM0E,GAAkBA,IAAmBC,GAK3CzD,GAAQ6I,EAAAA,EAAAA,IAAc,CAC1B9L,KAAM8G,EACN9D,QAASyG,EACTjJ,MAAO,CACLwG,eACAe,cACAxE,cAAe+F,GAEjByC,qBAAsB9E,EACtB+E,oBAAqBhE,EACrBiE,iBAAiBA,EAAAA,EAAAA,MACjBC,mBAAmBA,EAAAA,EAAAA,MAKnB5B,mBAAqBF,GAAQE,EAAmBF,EAAIG,UAEpD4B,cAAe,CACbzN,KAAM,IACN0N,QAAS,GACTC,QAAS,KAEXC,iBAAkB,WAClB9F,KAAM,CACJsB,sBAIJnH,EAAAA,EAAAA,YAAU,KAER,MAAM4L,EAAetJ,EAClBuJ,sBACAC,SAASzD,KAAKoB,GAAQA,EAAIG,WAE7B3D,GAAS8F,EAAAA,EAAAA,IAAqBH,GAAc,GAC3C,CAACvF,EAAcJ,IAElB,MAAM+F,GAAiBtD,EAAAA,EAAAA,UAAQ,KAC7B,MAAMuD,EAAU3J,EAAM4J,iBAChBC,EAAW,CAAC,EAClB1G,QAAQC,IAAI,uBAAwBpD,EAAM8J,gBAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAAK,CACvC,MAAMjK,EAAS6J,EAAQI,GACvBF,EAAS,YAADhM,OAAaiC,EAAOK,GAAE,UAAWL,EAAOwB,UAChDuI,EAAS,SAADhM,OAAUiC,EAAOI,OAAOC,GAAE,UAAWL,EAAOI,OAAOoB,SAC7D,CACA,OAAOuI,CAAQ,GACd,CAAC7J,EAAMK,WAAW4J,iBAAkBjK,EAAMK,WAAW6J,eAmDxD,OACE9N,EAAAA,EAAAA,MAAA8B,EAAAA,SAAA,CAAA3B,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,eAAcU,UAC3BC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,8CAA6CU,UAC1DH,EAAAA,EAAAA,MAAA,OAAKP,UAAU,SAAQU,SAAA,EACrBC,EAAAA,EAAAA,KAAC2N,EAAAA,EAAY,CACX3O,QAAQ,kBACRC,KAAK,KACLG,QAzDYwO,KACtBpK,EAAMiH,iCAANjH,CAAwC,CACtCwE,OAAQ,CAAEsC,SAAS,IACnB,EAuDQjL,UAAU,MACVE,KAAK,gBAGPS,EAAAA,EAAAA,KAAC2N,EAAAA,EAAY,CACX3O,QAAQ,oBACRC,KAAK,KACLG,QA3DcyO,KACxBrK,EAAMiH,iCAANjH,CAAwC,CACtCwE,OAAQ,CAAEsC,SAAS,IACnB,EAyDQjL,UAAU,MACVE,KAAK,mBAGPS,EAAAA,EAAAA,KAAC2N,EAAAA,EAAY,CACX3O,QAAQ,kBACRC,KAAK,KACLG,QA7DS0O,KACnBnH,QAAQC,IAAI,yBACZD,QAAQC,IAAI,+BAAgCtE,GACzB,0BAAfA,GACFqE,QAAQC,IAAI,wCACZmH,EAAAA,EAAAA,IAAkBxN,EAAM,4BACA,4BAAf+B,GACTqE,QAAQC,IAAI,0CACZmH,EAAAA,EAAAA,IAAkBxN,EAAM,2BACA,yBAAf+B,GACTqE,QAAQC,IAAI,uCACZmH,EAAAA,EAAAA,IAAkBxN,EAAM,+BAExBoG,QAAQC,IACN,kDACAtE,IAEFyL,EAAAA,EAAAA,IAAkBxN,EAAM,mBAC1B,EA4CUlB,UAAU,yBACVE,KAAK,oBAGPS,EAAAA,EAAAA,KAAC2N,EAAAA,EAAY,CACX3O,QAAQ,kBACRC,KAAK,KACLG,QA9Qe4O,KACzB,MAAMxF,EAAa9B,EAAoBpE,GACvCoG,aAAauF,WAAWzF,GACxBD,EAAeoB,EAAmB,EA4QxBtK,UAAU,MACVE,KAAK,0BAKbS,EAAAA,EAAAA,KAAA,OAAKX,UAAU,aAAYU,UACzBH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,CAAIsH,EAAUmG,OAAO,eAEvBxN,EAAAA,EAAAA,KAACkO,EAAAA,GAAU,CACT1C,QAASA,EACT2C,mBAAoBC,EAAAA,GACpBC,UAAW,CAACC,EAAAA,IACZ5N,UAzKiB6N,IACrB,MAAM,OAAEC,EAAM,KAAEC,GAASF,EAErBC,GAAUC,GAAQD,EAAO7K,KAAO8K,EAAK9K,IACrB,cAAd6K,EAAO7K,IAAoC,QAAd6K,EAAO7K,IACtC4E,GAAgBmG,IACd,MAAMC,EAAWD,EAAUE,QAAQJ,EAAO7K,IACpCkL,EAAWH,EAAUE,QAAQH,EAAK9K,IAExC,OADiBmL,EAAAA,EAAAA,IAAUJ,EAAWC,EAAUE,EACjC,GAGrB,EA6J6B9O,UAEzBC,EAAAA,EAAAA,KAAA,OACEsB,IAAKqG,EACLtI,UAAS,oBAAAgC,OAAsBuG,EAAa,cAAgB,IAAK7H,UAEjEH,EAAAA,EAAAA,MAAA,SACEP,UAAU,iCACVc,OAAKL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACAoN,GAAc,IACjB9M,MAAOoD,EAAM8J,iBACbvN,SAAA,EAEFC,EAAAA,EAAAA,KAAA,SAAAD,SACGyD,EAAMuL,kBAAkBxF,KAAKyF,IAC5BhP,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACiP,EAAAA,GAAe,CACdC,MAAO1L,EAAM2L,wBAAwB5F,KAAKL,GAAQA,EAAIvF,KACtDyL,SAAUC,EAAAA,GAA8BtP,SAEvCiP,EAAY7B,QAAQ5D,KAAKjG,IACxBtD,EAAAA,EAAAA,KAACsP,EAAqB,CAEpBhM,OAAQA,EACRC,QAASA,EACTC,MAAOA,GAHFF,EAAOK,SAPXqL,EAAYrL,SAkBzB3D,EAAAA,EAAAA,KAAA,SAAAD,SACGyD,EAAM+L,cAAcC,KAAKhC,OAAS,EACjChK,EAAM+L,cAAcC,KAAKjG,KAAKoB,IAC5B3K,EAAAA,EAAAA,KAAA,MAEEZ,QAAUmP,GApGLkB,EAAC9E,EAAK4D,KAC3B,MAAM,KAAEiB,EAAI,SAAEE,GAAalM,EAAM+L,cACjC,GAAIhB,EAAMoB,UAAYlI,EACpB,IACE,MAAMmI,GAAeC,EAAAA,EAAAA,IAAYL,EAAM7E,EAAIhH,GAAI8D,GACzCqI,EAAiBJ,EAASjI,GAAgBsD,gBAChD6E,EAAa7F,SAASgG,GAAMA,EAAEC,eAAeF,IAC/C,CAAE,MAAO/H,GACPpB,QAAQyC,MAAM,wCAAyCrB,EACzD,MAEA4C,EAAIqF,gBAAgBrF,EAAII,iBAE1BrD,EAAkBiD,EAAIhH,GAAG,EAuFW8L,CAAe9E,EAAK4D,GACxClP,UAAWkI,EAAaoD,EAAIhH,IAAM,eAAiB,GAAG5D,UAEtDC,EAAAA,EAAAA,KAACiP,EAAAA,GAAe,CACdC,MAAO1L,EAAM2L,wBAAwB5F,KAAKL,GAAQA,EAAIvF,KACtDyL,SAAUC,EAAAA,GAA8BtP,SAEvC4K,EAAIsF,kBAAkB1G,KAAKzD,IAC1B9F,EAAAA,EAAAA,KAACkQ,EAAa,CAEZpK,KAAMA,EACNvC,QAASA,EACTwC,aAAc4E,EAAIG,SAAS/E,cAHtBD,EAAKnC,SAVXgH,EAAIhH,OAoBb3D,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MACEmQ,QAAS3M,EAAMuL,kBAAkB,GAAG5B,QAAQK,OAC5CnO,UAAU,cAAaU,SACxB,+BASZ,C,yICldP,MAiOA,EAjOqBqQ,KACnB,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,KACrBnJ,GAAWC,EAAAA,EAAAA,MACXmJ,EAAkBC,4DACxB,IAAIC,EAAQC,OAAOC,OAAOpK,SAAS,SAEnCI,QAAQC,IAAI,yBAA0B6J,GAwNtC,MAAO,CAAEG,gBArNeC,MACtBC,EACA/P,EACAgQ,EACA7R,EACA8R,EACAC,KAEA,IACEtK,QAAQC,IAAI,gBAAiBmK,GAC7BpK,QAAQC,IAAI,kBAAmB1H,GAC/BiI,GAAS+J,EAAAA,EAAAA,KAAwB,IAEjC,MAAM/D,QAAgBgE,EAAAA,EAAAA,KACtB,IAAKhE,EAEH,YADAkD,EAAee,EAAAA,IAIjBzK,QAAQC,IAAI,+BAAgCuG,GAG5C,IAAIkE,EAAO,GAAAhQ,OAAMkP,EAAe,6CAAAlP,OAA4C0P,EAAQ,wCAEhFO,EAA2B,aAATpS,EAAsB,KAAO,OAE/CqS,EAAS,GAAAlQ,OAAMgQ,EAAO,qBAAAhQ,OAAoBiQ,GAC1CE,QAAoBC,EAAAA,EAAAA,IACtB,MACAF,EACA,GACApE,GAIF,GAFAxG,QAAQC,IAAI,wBAAyB4K,GAGnCA,GACAA,EAAYE,QACZF,EAAYG,OAAOpR,KAAKiN,OAAS,EACjC,CAAC,IAADoE,EAAAC,EAAAC,EAAAC,EACA,IA0EIC,EACAC,EA3EAC,EAAsBV,EAAYG,OAAOpR,KAAKgJ,KAAK4I,IAAK,CAC1DxO,GAAIwO,EAAMxO,GACVrE,MACE6S,EAAMC,aAAa9S,OAA6C,KAApC6S,EAAMC,aAAa9S,MAAM+S,OACjDF,EAAMC,aAAa9S,MACnB6S,EAAMC,aAAaE,eACzBC,SAAUJ,EAAMC,aAAaG,SAC7BxR,MAAOoR,EAAMC,aAAaI,SAC1BC,KAAMN,EAAMC,aAAaK,SAQ3B,GALA9L,QAAQC,IACN,2CACAsL,GAGW,aAAThT,EAAqB,CACvB,MAAMwT,EAAe,CACnBnS,KAAM,IAER2R,EAAoBnI,SAAS4I,IAC3B,MAAMC,EAAO,CACXjP,GAAIgP,EAAMhP,GACVkP,WAAYF,EAAMhP,GAClBzE,KAAM,eACN4T,OAAO,GAADzR,OAAKkP,GACXwC,aAAa,6CAAD1R,OAA+CsR,EAAMhP,KAEnE+O,EAAanS,KAAKiJ,KAAKoJ,EAAK,IAE9B,MAAMI,EAAW,GAAA3R,OAAMkP,EAAe,+CAChC0C,QAAiBxB,EAAAA,EAAAA,IACrB,OACAuB,EACAN,EACAvF,GA0BF,SAAS+F,EAAwBC,GAC/B,GAAI,QAAQC,KAAKD,GAAM,OAAOE,SAASF,EAAK,IAE5C,IAAIG,EAAS,EACb,IAAK,IAAI/F,EAAI,EAAGA,EAAI4F,EAAI3F,OAAQD,IAC9B+F,EACW,GAATA,GAAeH,EAAII,WAAWhG,GAAK,IAAIgG,WAAW,GAAK,GAE3D,OAAOD,CACT,CAjCA3M,QAAQC,IAAI,eAAgBqM,GAC5BA,EAAStB,OAAO6B,QAAQzJ,SAAS0J,IAE/B,MAAMC,EAAgBD,EAAKE,SAASC,QAAO,CAACC,EAAQ1S,IAC3C+R,EAAwB/R,EAAQoR,UACrCW,EAAwBW,EAAOtB,UAC7BpR,EACA0S,IAIN3B,EAAsBA,EAAoB3I,KAAKuK,GACzCL,EAAKE,SAAS1K,MAAM8K,GAAYA,EAAQpQ,KAAOmQ,EAAInQ,MACrD7D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKgU,GAAG,IACNE,iBACEF,EAAInQ,KAAO+P,EAAc/P,GAAK,OAAS,UAGtCmQ,GACP,IAeJnN,QAAQC,IAAI,0BAA2BsL,EACzC,CAGa,aAAThT,GACF+S,EACE,8FACFD,EAAc,CACZiC,SAAUjD,EACVkD,aAAcjD,EACdkD,MAAOjC,EAAoB3I,KAAK6K,IAAG,CACjCC,SAAUD,EAAI3B,KACd6B,aAAcF,EAAI7B,gBAItBN,EACE,8FACFD,EAAc,CACZqC,SAAUrD,EACVsD,aAAcrD,EACdsD,eAAgBrC,EAAoB3I,KAAK6K,IAAG,CAC1CH,SAAUG,EAAI3B,KACdyB,aAAcE,EAAI7B,eAKxB5L,QAAQC,IAAI,qBAAsBoL,GAElC,MAAMiB,QAAiBuB,EAAAA,EAAAA,IAAU,OAAQvC,EAAQD,GAEjDrL,QAAQC,IAAI,iCAAkCqM,GAE9C,IAAIwB,EAAa,GACL,OAARxB,QAAQ,IAARA,GAAc,QAANrB,EAARqB,EAAU1S,YAAI,IAAAqR,GAAM,QAANC,EAAdD,EAAgBrR,YAAI,IAAAsR,GAApBA,EAAsB0C,eAExBtB,EAAS1S,KAAKA,KAAKgU,eAAexK,SAAS2K,IACzC,IAAIC,EAAczC,EAAoB0C,MACnCR,GACCA,EAAI3B,OAASiC,EAAKT,UAAYG,EAAI7B,WAAamC,EAAKR,eAGxDO,EAAWjL,KAAK,CACdqL,YAAuB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAa5T,QAAS,GAClC+T,YAAuB,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAarV,QAAS,GAClCyV,aAAwB,OAAXJ,QAAW,IAAXA,OAAW,EAAXA,EAAaX,mBAAoB,QAC9CgB,UAAWN,EAAKT,SAChBgB,cAAeP,EAAKR,aACpBgB,6BAA8BR,EAAKQ,6BACnCC,yBAA0BT,EAAKS,yBAC/BC,0BAA2BV,EAAKU,0BAChCC,2BAA4BX,EAAKW,2BACjC,UAAWX,EAAK,YAChB,IAEa,OAARzB,QAAQ,IAARA,GAAc,QAANnB,EAARmB,EAAU1S,YAAI,IAAAuR,GAAM,QAANC,EAAdD,EAAgBvR,YAAI,IAAAwR,GAApBA,EAAsBoC,MAI/BlB,EAAS1S,KAAKA,KAAK4T,MAAMpK,SAAS0J,IAChC,IAAIkB,EAAczC,EAAoB0C,MACnCd,GACCA,EAAIrB,OAASgB,EAAKY,UAAYP,EAAIvB,WAAakB,EAAKa,eAGxDG,EAAWjL,KAAK,CACdqL,YAAuB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAa5T,QAAS,GAClC+T,YAAuB,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAarV,QAAS,GAClC0V,UAAWvB,EAAKY,SAChBY,cAAexB,EAAKa,aACpBS,aAAwB,OAAXJ,QAAW,IAAXA,OAAW,EAAXA,EAAaX,mBAAoB,QAC9CkB,6BAA8BzB,EAAKyB,6BACnCC,yBAA0B1B,EAAK0B,yBAC/BC,0BAA2B3B,EAAK2B,0BAChCC,2BAA4B5B,EAAK4B,2BACjC,UAAW5B,EAAK,YAChB,IAGJ9M,QAAQE,KAAK,kDAEfF,QAAQC,IACN,iDACA6N,GAGFtN,GAASmO,EAAAA,EAAAA,IAAgBb,GAE3B,MACE9N,QAAQE,KAAK,uCACbM,GAASmO,EAAAA,EAAAA,IAAgB,IAE7B,CAAE,MAAOlM,GAEP,MADAzC,QAAQyC,MAAM,wBAAyBA,GACjCA,CACR,CAAC,QACCjC,GAAS+J,EAAAA,EAAAA,KAAwB,GACnC,GAGwB,ECvG5B,EAjH2BxO,KACzB,MAAM,eAAE2N,IAAmBC,EAAAA,EAAAA,MACrB,gBAAEM,GAAoBR,IACtBmF,GAAYzU,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAcuU,YAEvDC,GAAU1U,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAcwU,UACrDrO,GAAWC,EAAAA,EAAAA,MAEXqO,GAAqBC,EAAAA,EAAAA,cACzB7E,UACE,IACE,MAAM8E,QAA4BC,EAAAA,EAAAA,IAAwB,CACxDC,cAQF,GAAIF,EAAoBG,QAAS,CAO/B3O,GACE4O,EAAAA,EAAAA,IAAqB,CACnBC,SAAUL,EAAoBpV,KAAKyV,YAIvC,MAAMC,EAAoBN,EAAoBpV,KAAKyV,SAMzB,IAADE,EAAAC,EAAzB,GALAxP,QAAQC,IAAI,sBAAuBqP,GAEnC9O,GAASiP,EAAAA,EAAAA,KAAmB,IAGxBT,QACI/E,EACJqF,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnCL,EAAU,UAAE,IAAAK,OAAA,EAAZA,EAAcnF,SACF,QADUoF,EACtBN,EAAU,UAAE,IAAAM,OAAA,EAAZA,EAAcE,WACdJ,EAAkBK,KAClBL,EAAkB,oBAGxB,MACE5F,EAAekG,EAAAA,GAEnB,CAAE,MAAOnN,GACPzC,QAAQyC,MAAM,+CAAgDA,GAC9DiH,EAAekG,EAAAA,GACjB,CAAC,QACCpP,GAASqP,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAACrP,EAAUyJ,IAGP6F,GAAaf,EAAAA,EAAAA,cACjB7E,WACE2F,EAAAA,EAAAA,KAAW,GACX7P,QAAQC,IAAI,iDAAkDiP,GAC9D,IACMA,GAAaA,EAAUrI,OAAS,QAC5BiI,EAAmBI,GAEzBlP,QAAQE,KAAK,yCAEjB,CAAE,MAAOuC,IACPoN,EAAAA,EAAAA,KAAW,GACX7P,QAAQyC,MAAM,8BAA+BA,GAC7CzC,QAAQC,IACN,8DAEFyJ,EAAeqG,EAAAA,GACjB,IAEF,CAACjB,EAAoBpF,IAyBvB,MAAO,CACLxN,yBAvB8B6S,EAAAA,EAAAA,cAAY,KACrCH,EAMH5O,QAAQC,IACN,gFANFD,QAAQC,IACN,0EAEFO,GAASiP,EAAAA,EAAAA,KAAmB,KAM9B,MAAMO,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoBJ,EAAYtP,EAAUkJ,GAC1D,GACC,KAEH,MAAO,IAAM2G,cAAcL,EAAS,GACnC,CAACF,EAAYtP,IAIdqO,UACAiB,aACD,C,0GC5GH,MAwHA,EAxHyB7T,KACvB,MAAM,eAAEyN,IAAmBC,EAAAA,EAAAA,MACrB,yBAAE4G,IAA6BC,EAAAA,EAAAA,KAC/BhQ,GAAWC,EAAAA,EAAAA,MAEXmO,GAAYzU,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAcuU,YACvDC,GAAU1U,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAcwU,UAErDC,GAAqBC,EAAAA,EAAAA,cACzB7E,UACE,IACE,MAAM8E,QAA4BC,EAAAA,EAAAA,IAAwB,CACxDC,cAGF,GAAIF,EAAoBG,QAAS,CAAC,IAADI,EAAAC,EAE/B,MAAMpD,EAAe4C,EAAoBpV,KAAKyV,SAASjD,cAChDqE,SAA4BC,QAAQC,IAAI,CAC7CJ,EACc,QADUhB,EACtBL,EAAU,UAAE,IAAAK,OAAA,EAAZA,EAAcnF,SACF,QADUoF,EACtBN,EAAU,UAAE,IAAAM,OAAA,EAAZA,EAAcE,WACdtD,KAIJ5L,GACE4O,EAAAA,EAAAA,IAAqB,CACnBC,SAAUL,EAAoBpV,KAAKyV,SACnCuB,cAAeH,GAAsB,MAGzCzQ,QAAQC,IAAI,mDACd,MACEyJ,EAAekG,EAAAA,GAEnB,CAAE,MAAOnN,GACPzC,QAAQyC,MAAM,+CAAgDA,GAC9DiH,EAAekG,EAAAA,GACjB,CAAC,QACC5P,QAAQC,IAAI,gEACZO,GAASqP,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAACrP,EAAU+P,EAA0B7G,IAGjCoG,GAAaf,EAAAA,EAAAA,cACjB7E,UACElK,QAAQC,IAAI,iDAAkDiP,GAE9D,IACE,GAAIA,GAAaA,EAAUrI,OAAS,EAAG,CAAC,IAADgK,EAErC,MAAMnB,EAAyB,QAAfmB,EAAG3B,EAAU,UAAE,IAAA2B,OAAA,EAAZA,EAAcnB,WAEjC,IADmB,CAAC,eAAgB,WAAY,gBAChCrS,SAASqS,GAEvB,YADAhG,EAAeoH,EAAAA,IAGjBtQ,GAASiP,EAAAA,EAAAA,KAAmB,IAE5BzP,QAAQC,IAAI,+DACZO,GAASqP,EAAAA,EAAAA,KAAW,IACpBkB,YAAW,IAAMvQ,GAASqP,EAAAA,EAAAA,KAAW,KAAQ,SACvCf,EAAmBI,EAC3B,MACElP,QAAQE,KAAK,yCAEjB,CAAE,MAAOuC,GACPzC,QAAQyC,MAAM,8BAA+BA,GAC7CjC,GAASqP,EAAAA,EAAAA,KAAW,IACpB7P,QAAQC,IACN,8DAEFyJ,EAAeqG,EAAAA,GACjB,IAWF,CAACjB,EAAoBpF,IA0BvB,MAAO,CACLxN,yBAxB8B6S,EAAAA,EAAAA,cAAY,KAErCH,EAMH5O,QAAQC,IACN,gFANFD,QAAQC,IACN,0EAEFO,GAASiP,EAAAA,EAAAA,KAAmB,KAM9B,MAAMO,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoBJ,EAAYtP,EAAUkJ,GAC1D,GACC,KAEH,MAAO,IAAM2G,cAAcL,EAAS,GACnC,CAACF,EAAYtP,IAIdqO,UACAiB,aACD,C,kFCxII,MCCMkB,EAAuB9G,MAAO+G,EAAYzK,KACrD,IAAI0K,EAAY,CAAEC,MAAO,IACzBnR,QAAQC,IAAI,iCACZ,MAAM2J,EAAkBC,4DAExB,IACE,MAAMuH,QAAgBC,EAAAA,EAAAA,MAEhBxD,EAAY3D,SACT,IAAIwG,SAAQ,CAACY,EAASC,KAC3BH,EAAQI,qBAAqBC,EAAK,CAChCC,OAAQ,MACRlL,UACAjO,KAAM,OACNoZ,WAAarF,IACXtM,QAAQC,IAAI,qBAAsBqM,GAElCgF,EAAQhF,EAAS,EAEnBsF,UAAYnP,IACVzC,QAAQyC,MAAM,kBAAmBA,GACjC8O,EAAO9O,EAAM,GAEf,IAKN,IAAImI,EAAS,GAAAlQ,OAAMkP,EAAe,uDAAAlP,OAAsDuW,GACxF,MAAMY,QAAuBhE,EAAUjD,GACjCkH,IAA2B,OAAdD,QAAc,IAAdA,OAAc,EAAdA,EAAgBjY,OAAQ,IAAIqU,MAAKnB,GAAsB,UAAdA,EAAKvU,OAEjE,GAAIuZ,EAAW,CACX,MAAMC,EAAUD,EAAU5F,WACpB8F,EAAcF,EAAU1X,MACxB6X,EAAQ,GAAAvX,OAAMkP,EAAe,sCAAAlP,OAAqCqX,GAClEG,QAAqBrE,EAAUoE,GAC/BE,IAA0B,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAActY,OAAQ,IAAIqU,MAAKnB,GAAsB,kBAAdA,EAAKvU,OAChE,GAAG4Z,EAAW,CACV,MAAMC,EAAUD,EAAWjG,WACrBmG,EAAK,GAAA3X,OAAMkP,EAAe,4CAAAlP,OAA2C0X,EAAO,qCAC5EE,QAAmBzE,EAAUwE,GACnC,GAAIC,EACA,IAAK,MAAMxF,KAAQwF,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdzF,EAAKvU,KAA0B,CACjC,MAAMia,EAAQ,GAAA9X,OAAMkP,EAAe,4CAAAlP,OAA2CoS,EAAKZ,YAC7EuG,QAAsB5E,EAAU2E,GAClCC,GACAvB,EAAUC,MAAMtO,KAAK,CACnB6P,QAASD,EAAc9Z,MACvBga,QAASF,EAAcrY,OAG/B,CAGV,CACA8W,EAAoB,SAAIc,EACxBd,EAAoB,SAAID,CAC5B,KAAQ,CAAC,IAAD2B,EACN,MAAMC,EAAS5B,EAAWzR,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,KAEvD,IAAIoT,EAAW,GAAApY,OAAMkP,EAAe,mEAAAlP,OAAkEmY,GACtG,MACMT,EAA0C,QAAnCQ,SADkB/E,EAAUiF,IACRC,aAAa,UAAE,IAAAH,OAAA,EAAhCA,EAAkC1G,WAC3CmG,EAAK,GAAA3X,OAAMkP,EAAe,4CAAAlP,OAA2C0X,EAAO,qCAC5EE,QAAmBzE,EAAUwE,GACjC,GAAIC,EACF,IAAK,MAAMxF,KAAQwF,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdzF,EAAKvU,KAA0B,CACjC,MAAMia,EAAQ,GAAA9X,OAAMkP,EAAe,4CAAAlP,OAA2CoS,EAAKZ,YAC7EuG,QAAsB5E,EAAU2E,GAClCC,GACAvB,EAAUC,MAAMtO,KAAK,CACnB6P,QAASD,EAAc9Z,MACvBga,QAASF,EAAcrY,OAG/B,CAGJ8W,EAAoB,SAAI,WACxBA,EAAoB,SAAID,CAC5B,CAEA,OADAjR,QAAQC,IAAI,mBAAoBiR,GACzBA,CACT,CAAE,MAAOzO,GAEP,MADAzC,QAAQyC,MAAM,qBAAsBA,GAC9BA,CACR,G,cCxFK,MAAMuQ,EAAgB9I,MACzB1D,EACAyM,EACA7I,EACAhQ,EACA7B,KAEA,IACE,MAAMqR,EAAkBC,4DAClBqJ,QAsIZhJ,eAAiCgC,EAAY3T,EAAMiO,GAC/C,MAAMoD,EAAkBC,4DAClBsJ,EAAM,GAAAzY,OAAMkP,EAAe,+CACjC,IAAIwJ,EAAM,GACV,IACE,MAKMC,EAAO,CACXzZ,KAAM,CACJ,CACEoD,GAAIkP,EACJA,WAAYA,EACZ3T,KAAMA,EACN4T,OAAQvC,EACRwC,aAXK,iBAAT7T,EAAuB,+CAAAmC,OAC4BwR,GAAU,6CAAAxR,OACZwR,MAe7CI,QAAiBxB,EAAAA,EAAAA,IACrB,OACAqI,EAEAE,EACA7M,GAIF,GAAI8F,EAASvB,QAAUuB,EAAStB,OAAQ,CAItC,MAAMgC,EAAWV,EAAStB,OAAO6B,QAAQ,GAAGG,SAE5C,IAAK,MAAMI,KAAWJ,EAClB,GAAII,EAAQlB,aAAeA,IACvBlM,QAAQC,IAAI,iCAAkCiM,GAC1CoH,MAAMC,QAAQnG,EAAQoG,YAAcpG,EAAQoG,UAAU3M,OAAS,GAAG,CAClEuM,EAAMhG,EAAQoG,UAAU,GAAGxW,GAC3BgD,QAAQC,IAAI,eAAgBmT,GAC5B,KACJ,CAGR,OAAOA,CACT,CAIE,OAHApT,QAAQyC,MACN,qEAEK2Q,CAEX,CAAE,MAAO3Q,GAEP,OADAzC,QAAQyC,MAAM,wCAAD/H,OAAyCwR,EAAU,KAAKzJ,GAC9D2Q,CACT,CACF,CAjM4BK,CAAkBrJ,EAAU7R,EAAMiO,GAG1D,GAFAxG,QAAQC,IAAI,oCAAqCiT,GAE/B,KAAdA,EAyHF,OAFAlT,QAAQE,KAAK,gCAEN,GAzHa,CACpB,MAAMwT,EAAiB,GAAAhZ,OAAMkP,EAAe,mEAAAlP,OAAkEwY,EAAS,6CAEjHS,QAAsB7I,EAAAA,EAAAA,IAAqB,MAAO4I,EAAmB,GAAIlN,GAE/E,IAAImN,EAAc5I,SAAU4I,EAAc3I,OA+GxC,OAFAhL,QAAQyC,MAAM,gDAEP,GA/GyC,CAAC,IAADmR,EAAAC,EAChD,MAIMhH,IAH0B,QAA9B+G,EAAAD,EAAc3I,OAAO8I,OAAO,UAAE,IAAAF,GAA0B,QAA1BC,EAA9BD,EAAgCG,gCAAwB,IAAAF,OAA1B,EAA9BA,EAA0DC,SAAU,IAI/DtO,QAAOwO,GACJA,EAAUC,WAAW3R,MACrB4R,GAAsB,yBAAdA,EAAKpI,OAAkD,IAAfoI,EAAK3P,UAGxD3B,KAAIoR,IAED,MAAMG,EAAoBH,EAAUC,WAAWrR,KAAIsR,GAC7B,QAAdA,EAAKpI,KACA,CACLA,KAAMoI,EAAKpI,KACXvH,MAAO6P,OAAOC,OAAOH,EAAK3P,OAAS,IAEd,gBAAd2P,EAAKpI,KACP,CACLA,KAAMoI,EAAKpI,KACXvH,MAAO,WAEa,WAAd2P,EAAKpI,MAAmC,yBAAdoI,EAAKpI,KAChC,CACLA,KAAMoI,EAAKpI,KACXvH,MAAO2P,EAAK3P,OAGP,CACLuH,KAAMoI,EAAKpI,KACXvH,MAAO,MAKf,MAAO,CACP+P,QAASN,EAAUM,QACnBL,WAAYE,EACX,IAMX,GAHAnU,QAAQC,IAAI,4BAA6B4M,KAGrCA,EAAQhG,OAAS,GA4DnB,OAFA7G,QAAQE,KAAK,wDAEN,GA5De,CACtB,MAAMqU,EAAW,+FAEXC,EAAe,CACnBxX,GAAIoN,EACJ7R,KAAMA,EACNkc,QAAS5H,EAAQjK,KAAIkK,GAAQA,EAAKwH,UAClCI,KAAM,kBAGR,IACE,MAAMC,QAAyB9G,EAAU,OAAQ0G,EAAaC,GAC9DxU,QAAQC,IAAI,oBAAqBiC,KAAKa,UAAU4R,IAGhD,MAAMC,EAAmB,CACvBzI,OAAQvC,EACRrR,KAAM,qCACN2T,WAAY9B,EACZgC,aAAa,iEAAD1R,OAAmE0P,IAW3EyK,EAAU,CACd,CACED,mBACAE,yBAX6BjI,EAAQjK,KAAImS,IAAG,CAC9CC,QAASD,EAAIT,QACb9W,WAAYuX,EAAId,WAAWhH,QAAO,CAACgI,EAAKf,KACtCe,EAAIf,EAAKpI,MAAQoI,EAAK3P,MACf0Q,IACN,CAAC,SAUNjV,QAAQC,IAAI,wCAAyCiC,KAAKa,UAAU8R,IAGpE,MAAMK,EAAS,0GAAAxa,OAA6G0P,GACtH+K,QAAuBtH,EAAU,QAASqH,EAAWL,GAI3D,OAFA7U,QAAQC,IAAI,4BAA6BiC,KAAKa,UAAUoS,IAEjDtI,CAOT,CAAE,MAAOpK,GAGP,OAFAzC,QAAQyC,MAAM,4CAA6CA,GAEpD,EACT,CACF,CAKF,CAKF,CAKF,CAAE,MAAOA,GAGP,OAFAzC,QAAQyC,MAAM,qCAAsCA,GAE7C,EACT,GAiEK,MAAMoL,EAAY3D,iBAMnB,IALJwH,EAAM0D,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,MACT3D,EAAG2D,UAAAvO,OAAA,EAAAuO,UAAA,QAAAC,EACHpJ,EAAImJ,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAIPpV,QAAQC,IAAI,gBAAiBwR,GAC7BzR,QAAQC,IAAI,cACZD,QAAQC,IAAI,gBAAiBiC,KAAKa,UAAUkJ,EAAM,KAAM,IAExD,IACE,MAAMK,QAAiBgJ,EAAAA,EAAAA,GAAM,CAC3B7D,MACAC,SAKA9X,KAAMqS,IAIR,OADAjM,QAAQC,IAAI,qBAAsBqM,EAAS1S,MACpC0S,CACT,CAAE,MAAO7J,GAEP,MADAzC,QAAQyC,MAAM,kBAAmBA,GAC3BA,CACR,CACF,E,sDC7MF,MAAMmH,EAAkBC,4DAgOxB,EA/N2B0L,KACzB,MAAM,eAAE7L,IAAmBC,EAAAA,EAAAA,KACrBnJ,GAAWC,EAAAA,EAAAA,MAGjB,IAAIqJ,EAAQC,OAAOC,OAAOpK,SAAS,SACnCI,QAAQC,IAAI,+BAAgC6J,GAsN5C,MAAO,CAAE0L,sBApNqBtL,MAAOC,EAAa/P,EAAOgQ,EAAU7R,KACjE,IACEiI,GAAS+J,EAAAA,EAAAA,KAAwB,IAGjC,MAAM/D,QAAgBgE,EAAAA,EAAAA,KACtB,IAAKhE,EAEH,YADAkD,EAAee,EAAAA,IAGjBzK,QAAQC,IAAI,gCAAiCuG,GAE7C,IAAIiP,EAAc,GAGlB,GAAa,kBAATld,EAA0B,CAC5B,MAAMmd,EAAkBxL,UAEtB,MAAM+I,QAAkB0C,EAAAA,EAAAA,GACtB,CAACxL,GACD3D,EACA4D,GAIF,OAFApK,QAAQC,IAAI,yBAA0BgT,GACtCzS,GAASoV,EAAAA,EAAAA,IAAe3C,IACjBA,CAAS,EAElB,IAAI4C,GAAU,EACd7V,QAAQC,IAAI,oCACZ,MAAM6V,EAAwB5L,UAC5B,MAAM6L,EAAK,GAAArb,OAAMkP,EAAe,4CAAAlP,OAA2C0P,EAAQ,8CAC7EkC,QAAiBxB,EAAAA,EAAAA,IACrB,MACAiL,EACA,GACAvP,GAIF,GAFAxG,QAAQC,IAAI,mCAAoCqM,GAE5CA,EAASvB,QAAUuB,EAAStB,OAAQ,CACtC,MAAMgL,EAAkB1J,EAAStB,OAAOgL,gBAAgBpT,KACrDqT,GAAmBA,EAAeC,MAAMhK,aAErCiK,EACJ7J,EAAStB,OAAOoL,gBAAgBxT,KAAIsH,UAClC,IAAImM,EAASC,EAAOJ,MAAMhK,WACtBqK,EAAWD,EAAOJ,MAAM3d,KAC5B,GACc,gBAAZge,GACY,gBAAZA,GACY,kBAAZA,GACY,WAAZA,GACY,kBAAZA,EACA,CACF,GAAsB,eAAlBD,EAAOjV,OAAyB,CAClC,MAAM6R,QAgRxBhJ,eAAiCgC,EAAY3T,EAAMiO,GACjD,MAAM2M,EAAM,GAAAzY,OAAMkP,EAAe,+CAC3BwJ,EAAM,GACZ,IACE,MAAMhH,EACK,iBAAT7T,EAAuB,+CAAAmC,OAC4BwR,GAAU,6CAAAxR,OACZwR,GAE7CmH,EAAO,CACXzZ,KAAM,CACJ,CACEoD,GAAIkP,EACJA,WAAYA,EACZ3T,KAAMA,EACN4T,OAAQvC,EACRwC,aAAcA,KAMdE,QAAiBxB,EAAAA,EAAAA,IACrB,OACAqI,EAEAE,EACA7M,GAIF,IAAI8F,EAASvB,SAAUuB,EAAStB,OAiB9B,OAHAhL,QAAQyC,MACN,qEAEK2Q,EAjB+B,CAAC,IAADoD,EACtC,MAAMxJ,GAAqC,QAA1BwJ,EAAAlK,EAAStB,OAAO6B,QAAQ,UAAE,IAAA2J,OAAA,EAA1BA,EAA4BxJ,WAAY,GAEzD,IAAK,MAAM6F,KAAU7F,EACnB,GACE6F,EAAOW,WACPX,EAAOW,UAAUlR,MACdmU,GAAaA,EAASvK,aAAeA,IAGxC,OAAO2G,EAAO7V,EAGpB,CAMF,CAAE,MAAOyF,GAEP,OADAzC,QAAQyC,MAAM,wCAAD/H,OAAyCwR,EAAU,KAAKzJ,GAC9D2Q,CACT,CACF,CAtU0CK,CACtB4C,EACAE,EACA/P,GAEEwP,EAAgB3Y,SAAS6V,KAC3BmD,EAASnD,EAEb,CACA,GACe,iBAAbqD,GACa,iBAAbA,EACA,CACAV,GAAU,EACV,MAAMa,QAyTxBxM,eAA6BgC,EAAY1F,GACvC,IAAIiL,EAAM,GAEVA,EAAG,GAAA/W,OAAMkP,EAAe,8CAAAlP,OAA6CwR,EAAU,uBAE/E,IACE,MAAMyK,QAAqB7L,EAAAA,EAAAA,IAAqB,MAAO2G,EAAK,GAAIjL,GAEhE,OAAImQ,EAAa5L,QAAU4L,EAAa3L,OAC/B,CACLkB,WAAYyK,EAAa3L,OAAO8I,OAAO,GAAG8C,aAAa1K,WACvD3T,KAAMoe,EAAa3L,OAAO8I,OAAO,GAAG8C,aAAare,OAGnDyH,QAAQC,IAAI,oCAADvF,OAAqCwR,IACzC,CAAC,EAEZ,CAAE,MAAOzJ,GAEP,OADAzC,QAAQyC,MAAM,mCAAD/H,OAAoCwR,EAAU,KAAKzJ,GACzD,CAAC,CACV,CACF,CA9U2CoU,CAAcR,EAAQ7P,GAC/CxG,QAAQC,IAAI,mBAAoByW,GAChCL,EAASK,EAAWxK,WACpBqK,EAAWG,EAAWne,IACxB,CACA,QAAe8c,IAAXgB,QAAqChB,IAAbkB,EAC1B,IAAK,IAADO,EAAAC,EAAAC,EAAAC,EAKF,MAAMC,QA6N1BhN,eAA8BgC,EAAYqK,EAAU/P,GAClD,IAAIiL,EAAM,GAIRA,EADe,iBAAb8E,EACC,GAAA7b,OAAMkP,EAAe,gDAAAlP,OAA+CwR,GAGpE,GAAAxR,OAAMkP,EAAe,8CAAAlP,OAA6CwR,EAAU,qCAGjF,IACE,MAAMyK,QAAqB7L,EAAAA,EAAAA,IAAqB,MAAO2G,EAAK,GAAIjL,GAEhE,OAAImQ,EAAa5L,QAAU4L,EAAa3L,OAC/B2L,EAAa3L,QAEpBhL,QAAQC,IAAI,oCAADvF,OAAqCwR,IACzC,CAAC,EAEZ,CAAE,MAAOzJ,GAEP,OADAzC,QAAQyC,MAAM,mCAAD/H,OAAoCwR,EAAU,KAAKzJ,GACzD,CAAC,CACV,CACF,CArP2C0U,CAAed,EAAQE,EAAU/P,GAElD4Q,GADgB,OAARF,QAAQ,IAARA,GAAgB,QAARJ,EAARI,EAAUpD,cAAM,IAAAgD,GAAK,QAALC,EAAhBD,EAAmB,UAAE,IAAAC,GAArBA,EAAuB3c,YAyIzD8P,eAAkCgC,EAAY1F,EAAQyM,EAAU7Y,EAAO7B,GACrE,MAAM8e,EAAc,GACpB,IAAIC,GAAa,EACjB,MAAM7F,EAAG,GAAA/W,OAAMkP,EAAe,mEAAAlP,OAAkEwR,EAAU,6CAE1G,IAAK,IAADqL,EAAAC,EACF,MAAMb,QAAqB7L,EAAAA,EAAAA,IAAqB,MAAO2G,EAAK,GAAIjL,GAChExG,QAAQC,IAAI,2BAADvF,OAA4BwR,EAAU,KAAKyK,GAEtD,IAAIc,GAA+C,QAA7BF,EAAAZ,EAAa3L,OAAO8I,OAAO,UAAE,IAAAyD,GAA0B,QAA1BC,EAA7BD,EAA+BxD,gCAAwB,IAAAyD,OAA1B,EAA7BA,EAAyD1D,SAAU,GAEzF2D,EAAkBA,EAAgBjS,QAAOkS,IACvC,MAAMC,EAAsBD,EAAIzD,WAAWhG,MAAK2J,GAAgB,yBAAXA,EAAE9L,OACjD+L,EAAuBH,EAAIzD,WAAWhG,MAAK2J,GAAgB,qBAAXA,EAAE9L,OACxD,OAAsC,KAAZ,OAAnB6L,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBpT,SAAkD,KAAZ,OAApBsT,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtT,MAAc,IAIvD,IAAzBkT,EAAgB5Q,SAClB4Q,QAAyBzE,EACvBxM,EACAyM,EACA/G,EACA9R,EACA7B,IAIJ+e,EAAYG,EAAgBnV,MAAKoV,IAC/B,MAAMxD,EAAOwD,EAAIzD,WAAWhG,MAAK2J,GAAgB,qBAAXA,EAAE9L,OACxC,OAAuB,KAAZ,OAAJoI,QAAI,IAAJA,OAAI,EAAJA,EAAM3P,MAAc,IAI3BkT,EAAgB5Q,OAAO,EAEvB4Q,EAAgBrU,SACb0U,IACC,MAAM9C,EAAU8C,EAAexD,QAC/B,IAAIyD,EAAY,KACZC,EAAY,KACZC,GAAe,EACfhH,EAAa,GAcE,IAADiH,GAZlBJ,EAAe7D,WAAW7Q,SAAS+U,IAC7BA,EAAUrM,KAAKzO,SAAS,0BAC1B4a,EAAeE,EAAU5T,OAEvB4T,EAAUrM,KAAKzO,SAAS,iBAC1B2a,EAAYG,EAAU5T,OAEpB4T,EAAUrM,KAAKzO,SAAS,gBAC1B4T,EAAakH,EAAU5T,MACzB,IAGE0T,KACFF,EAAkD,QAAzCG,EAAIjF,EAAUhF,MAAKmK,GAAKA,EAAEpb,KAAOgY,WAAQ,IAAAkD,OAAA,EAArCA,EAAuCvf,MACjDof,GAECV,EAAYxU,KAAK,CACfwV,UAAWN,EACXO,QAAStD,EACTuD,eAAgBP,GAAa,UAC7BQ,gBAAkBvH,IAG5B,IAIFjR,QAAQC,IAAI,+CAADvF,OAAgDwR,GAE/D,CAAE,MAAOzJ,GACPzC,QAAQyC,MAAM,uCAAD/H,OAAwCwR,EAAU,KAAKzJ,EACtE,CAEA,MAAO,CACL,WAAe4U,EACf,YAAeC,EAEnB,CAzNoDmB,CAAmBpC,EAAQ7P,EAASyM,EAAW7Y,EAAM7B,IAC/EmgB,EAAatB,EAAkBsB,WAC/BC,EAAcvB,EAAkBuB,YACtC3Y,QAAQC,IAAI,mBAAoByY,GAChC1Y,QAAQC,IAAI,qBAAsB0Y,GAClC3Y,QAAQC,IAAI,qBAAsBmX,GAIlC3B,EAAY5S,KAAK,CACfwT,SACAE,WACAqC,WAAmB,OAAR1B,QAAQ,IAARA,OAAQ,EAARA,EAAUpD,OAAO,GAAG1Z,QAAS,MACxCye,WAAmB,OAAR3B,QAAQ,IAARA,OAAQ,EAARA,EAAUpD,OAAO,GAAGnb,QAAS,MACxCmgB,UAAmB,OAAR5B,QAAQ,IAARA,GAAmB,QAAXF,EAARE,EAAUpD,OAAO,UAAE,IAAAkD,GAAgC,QAAhCC,EAAnBD,EAAsB,qCAA6B,IAAAC,OAA3C,EAARA,EAAqD8B,cAAe,MAC/EL,aACAC,eAEJ,CAAE,MAAOK,GACPhZ,QAAQyC,MAAM,oCAAD/H,OACyB2b,EAAM,KAC1C2C,EAEJ,CAEJ,WAGItI,QAAQC,IAAIwF,EACpB,MACEnW,QAAQyC,MAAM,qDAChB,EAKIwQ,QAAkByC,UAClBI,EAAsB7C,GAE5BzS,GAAS+J,EAAAA,EAAAA,KAAwB,IACjC/J,GAASyY,EAAAA,EAAAA,IAAiBxD,IAC1BjV,GAAS0Y,EAAAA,EAAAA,IAAWrD,IACpBrV,GAAS2Y,EAAAA,EAAAA,IAAa3S,GACxB,KAAO,CAEL,MAAM4S,OCpKoBlP,OAAO1D,EAAS4D,EAAUN,KAC1D,IACE,MAAMF,EAAkBC,4DACxB7J,QAAQC,IAAI,iCAAkCmK,GAC9C,MAAMgH,QAAgBC,EAAAA,EAAAA,MACtB,IAAIzG,EAAS,GAAAlQ,OACRkP,EAAe,iDACpB,MAAM0C,QAAiB,IAAIoE,SAAQ,CAACY,EAASC,KAC3CH,EAAQI,qBAAqB5G,EAAW,CACtC8G,OAAQ,OACRlL,SAAOrN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFqN,GAAO,IACV,eAAgB,qBAElB5M,KAAMsI,KAAKa,UAAU,CAAEnJ,KAAM,CAAC,CAAEyf,SAAUjP,MAE1C7R,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAGJvR,QAAQC,IAAI,0CAA2CqM,GAEvD,IAAIgN,EAAY,GAEZC,EAAgB,CAAEC,OAAQ,IAC9B,GAAIlN,IACFA,EAASO,QAAQzJ,SAASyP,IACxBA,EAAO4G,SAASC,WAAWtW,SAASuW,IAEb,aAAjBA,EAAMC,QACRL,EAAcC,OAAO3W,KAAK,CACxBgX,IAAKF,EAAMG,YAAYC,QAAQ,QAAS,KAE5C,GACA,IAEAR,EAAcC,OAAO3S,OAAS,GAAG,CACnC,IAAImT,EACF,+HACF,MAAMC,QAAoB,IAAIvJ,SAAQ,CAACY,EAASC,KAC9CH,EAAQI,qBAAqBwI,EAAQ,CACnCtI,OAAQ,OACRlL,QAAS,CAEP,eAAgB,oBAElB5M,KAAMsI,KAAKa,UAAUwW,GACrBhhB,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAEJvR,QAAQC,IAAI,qBAAsBga,GAE9BA,IACFX,EAAYW,EAAYT,OACrBhU,QAAQmU,GAAUA,EAAMO,QAAQ7c,SAASyM,KACzClH,KAAK+W,GAAUA,EAAMhhB,QAE5B,CAKF,OAFAqH,QAAQC,IAAI,kCAAmCqZ,GAExCA,CACT,CAAE,MAAO7W,GAEP,MADAzC,QAAQyC,MAAM,qCAAsCA,GAC9CA,CACR,GD8FoC0X,CAC5B3T,EACA4D,EACAN,GAEF9J,QAAQC,IAAI,kCAAmCmZ,GAE/C,IAAIgB,EAAkB,IAAIhB,EAAiBjP,GAC3CnK,QAAQC,IACN,2CACAma,GAIF,IAAInH,EAAY,GAShB,GARImH,EAAgBvT,OAAS,GAC3BoM,QAAkB0C,EAAAA,EAAAA,GAAayE,EAAiB5T,EAAS4D,GACzDpK,QAAQC,IAAI,qCAAsCgT,IAElDjT,QAAQE,KAAK,iDAIX+S,EAAUpM,OAAS,EAAG,CACxB,MAAMwT,OEzLmBnQ,OACjC+I,EACAzM,EACA4D,EACAhQ,EACA7B,KAEA,IAAK,IAAD+hB,EACF,MAAM1Q,EAAkBC,4DACxB7J,QAAQC,IAAI,0CAA2CgT,GAEvD,MAAMsH,EAAc,GAAA7f,OAAMkP,EAAe,mEAAAlP,OAAkE0P,EAAQ,6CAE7GgH,QAAgBC,EAAAA,EAAAA,MAEhB/E,QAAiB,IAAIoE,SAAQ,CAACY,EAASC,KAC3CH,EAAQI,qBAAqB+I,EAAgB,CAC3C7I,OAAQ,MACRlL,UACAjO,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAGJvR,QAAQC,IAAI,0CAA2CqM,GAEvD,IAAIkO,EAAyB,GACzBC,EAAqB,GAGrBhD,GAA6D,QAA3C6C,EAAAhO,EAASwH,OAAO,GAAGC,gCAAwB,IAAAuG,OAAA,EAA3CA,EAA6CxG,SAAU,GAE7E2D,EAAkBA,EAAgBjS,QAAOkS,IACvC,MAAMC,EAAsBD,EAAIzD,WAAWhG,MAAK2J,GAAgB,yBAAXA,EAAE9L,OACjD+L,EAAuBH,EAAIzD,WAAWhG,MAAK2J,GAAgB,qBAAXA,EAAE9L,OACxD,OAAsC,KAAZ,OAAnB6L,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBpT,SAAkD,KAAZ,OAApBsT,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtT,MAAc,IAEpF,MAAM+S,EAAYG,EAAgBnV,MAAKoV,IACrC,MAAMxD,EAAOwD,EAAIzD,WAAWhG,MAAK2J,GAAgB,qBAAXA,EAAE9L,OACxC,OAAuB,KAAZ,OAAJoI,QAAI,IAAJA,OAAI,EAAJA,EAAM3P,MAAc,IA8E7B,OA3E6B,IAAzBkT,EAAgB5Q,SAClB4Q,QAAyBzE,EACvBxM,EACAyM,EACA7I,EACAhQ,EACA7B,UAKEmY,QAAQC,IACZ8G,EAAgB7U,KAAIsH,UAClBlK,QAAQC,IAAI,iBAAkB+T,GAC9B,IAAK,IAAI0G,KAAezH,EACtB,GAAIe,EAAUM,UAAYoG,EAAY1d,GAAI,CACxC,IAAIqb,EAAYqC,EAAY/hB,MAC5B0f,EAAYA,EAAU0B,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAC3D,IAAItM,EAAM,CAAEzQ,GAAIgX,EAAUM,QAAS3b,MAAO+hB,EAAY/hB,OAEtD,MAAMgiB,EAAe3G,EAAUC,WAAWrR,KAAKgY,GAE3CA,EAAc9O,KAAKzO,SAAS,eAC5Bud,EAAcrW,MAEPyM,EAAqB4J,EAAcrW,MAAOiC,GAASqU,MACvDC,IACC,GAAIA,EAAmB,CACrB9a,QAAQC,IAAI6a,GACZrN,EAAe,UAAqB,OAAjBqN,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBC,SACtCtN,EAAe,UAAqB,OAAjBqN,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,SAEtC,IAAItI,EAAU,GACZC,EAAU,GAEZmI,EAAkB3J,MAAM/N,SAAS6X,IAC/BvI,GAAW,IAAMuI,EAAGvI,QACpBC,GAAW,IAAMsI,EAAGtI,OAAO,IAG7BlF,EAAY,OAAIiF,EAAQjT,MAAM,GAC9BgO,EAAkB,aAAIkF,EAAQlT,MAAM,EACtC,MAKJgO,EAAImN,EAAc9O,KAAKiO,QAAQ1B,EAAW,IAAI3M,QAC5CkP,EAAcrW,MACTmM,QAAQY,mBAKbZ,QAAQC,IAAIgK,GAClBH,EAAyB,IAAIA,EAAwB/M,GACrDzN,QAAQC,IAAI,2BAA4Bua,GACxCxa,QAAQC,IAAI,oBAAqBwN,EACnC,CACF,KAIJzN,QAAQC,IACN,qDACAua,GAEFC,EAAqBxH,EAAUzN,QAC5B0V,IACEV,EAAuBlY,MAAM6Y,GAAaA,EAASne,KAAOke,EAASle,OAExEgD,QAAQC,IAAI,wBAAyBwa,GAI9B,CACLtL,SAAS,EACTvV,KAAM,CACJwhB,UAAW,CACTnI,UAAWA,EACXoI,sBAAuBb,EACvBc,aAAcb,EACdnD,WAAYA,IAIpB,CAAE,MAAO7U,GAEP,OADAzC,QAAQyC,MAAM,yCAA0CA,GACjD,CAAE0M,SAAS,EAAO1M,QAC3B,GFqD6B8Y,CACnBtI,EACAzM,EACA4D,EACAhQ,EACA7B,GAEFyH,QAAQC,IAAI,2BAA4Boa,GAEpCA,EAAOlL,SACT3O,GAASgb,EAAAA,EAAAA,IAAmBnB,EAAOzgB,KAAKwhB,YACxC5a,GAASib,EAAAA,EAAAA,IAAWjV,KAEpBxG,QAAQyC,MAAM,8BAElB,MACEzC,QAAQE,KAAK,2CAIf,IAAIwb,EAAqB,CAAC,EAExBA,EADW,iBAATnjB,EACmB,CAAE4W,SAAS,EAAMvV,KAAM,SHnNlBsQ,OAAO1D,EAAS4D,KAClD,MAAMR,EAAkBC,4DAExB,IAAIe,EAAS,GAAAlQ,OACRkP,EAAe,8CACpBgB,GAAaR,EACbQ,GAAa,UACb,IAAIqB,EAAO,CACT0P,YAAa,EACbC,eAAgB,CAAC,gBACjBC,gBAAiB,CAAC,gBAGpB,IACE7b,QAAQC,IAAI,kCAAmCmK,GAC/C,MAAMgH,QAAgBC,EAAAA,EAAAA,MAEhBxD,EAAYA,CAAC4D,EAAKqK,EAAQtH,IACvB,IAAI9D,SAAQ,CAACY,EAASC,KAC3BH,EAAQI,qBAAqBC,EAAK,CAChCC,OAAQoK,EACRtV,SAAOrN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFqN,GAAO,IACV,eAAgB,qBAElB5M,KAAMsI,KAAKa,UAAUyR,GACrBjc,KAAM,OACNoZ,WAAarF,IACXtM,QAAQC,IAAI,qBAAsBqM,GAClCgF,EAAQhF,EAAS,EAEnBsF,UAAYnP,IACVzC,QAAQyC,MAAM,kBAAmBA,GACjC8O,EAAO9O,EAAM,GAEf,IAIA6J,QAAiBuB,EAAUjD,EAAW,OAAQqB,GACpDjM,QAAQC,IAAI,0CAA2CqM,GACvD,MAAM,OAAEwH,GAAWxH,EAEnB,GAAIwH,EAAQ,CACV,IAAIiI,EAASzP,EAASwH,OACnBtO,QACEsO,IACkB,iBAAhBA,EAAOvb,MACU,iBAAhBub,EAAOvb,OACTub,EAAO9W,KAAOoN,IAEjBxH,KAAKkR,IAAM,CACV9W,GAAI8W,EAAO9W,GACXzE,KAAMub,EAAOvb,KACbuT,KAAMgI,EAAOnb,MACbyB,MAAO0Z,EAAO1Z,UA2BlB,OAvBI2hB,EAAOlV,OAAS,SAEZ6J,QAAQC,IACZoL,EAAOnZ,KAAIsH,UACT,GAAkC,aAA9B8B,EAAM5R,MAAM4hB,cAA8B,CAC5C,IAAIC,EAAU,GAAAvhB,OAAMkP,EAAe,mEAAAlP,OAAkEsR,EAAMhP,GAAE,6CAC7G,MAAMkf,QAAsBrO,EAAUoO,EAAY,MAAO,IACzDjc,QAAQC,IAAI,kBAAmBic,GAE/B,MAAMC,EAAWD,EAAcpI,OAAOsI,SAAStI,IAAY,IAADuI,EACxD,OAAmC,QAAnCA,EAAIvI,EAAOC,gCAAwB,IAAAsI,GAA/BA,EAAiCvI,OAC5BA,EAAOC,yBAAyBD,OAAOlR,KAC3CkV,GAAmBA,EAAexD,UAGhC,EAAE,IAEXtI,EAAMyI,QAAU0H,CAClB,MAKC,CACLhN,SAAS,EACTvV,KAAMmiB,EAEV,CACF,CAAE,MAAOtZ,GAEP,OADAzC,QAAQyC,MAAM,uBAAwBA,GAC/B,CAAE0M,SAAS,EAAOvV,KAAM,GAAI6I,QACrC,GG2HmC6Z,CACzB9V,EACA4D,GAKJpK,QAAQC,IAAI,cAAe1H,GAC3ByH,QAAQC,IACN,2CACAyb,GAGEA,EAAmBvM,SACrB3O,GAAS+b,EAAAA,EAAAA,IAAmBb,EAAmB9hB,OAIjD,MAAM4iB,OGvOgBtS,OAAO1D,EAAS6S,EAAUjf,KACtD,MAAMwP,EAAkBC,4DACxB,IAAI4S,GAAY,EACZC,EAAuB,GACvBxL,EAAY,CAAC,OAAS,GAAI,SAAW,IACzC,MAAMyL,EAAkB,CAAC,uBAAwB,wBAC3CC,EAAY,GAAAliB,OACbkP,EAAe,mDAEpB,IAAIqC,EAAO,CACT4Q,SAAU,+CACVC,UAAW,CAAC,uBAAwB,wBACpCC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,kBAAkB,cAClEC,MAAO,mCACPC,KAAM,KACNC,WAAW,GAETC,EAAI,GAAA5iB,OACHkP,EAAe,iDAChB2T,EAAK,CACPV,SAAU,+CACVW,aAAc,oBACdL,MAAO,mCACPM,IAAK,CAACpE,IAGR,IACErZ,QAAQC,IAAI,+BAAgCoZ,GAE5C,MAAMjI,QAAgBC,EAAAA,EAAAA,MAEhB/E,QAAiB,IAAIoE,SAAQ,CAACY,EAASC,KAC3CH,EAAQI,qBAAqBoL,EAAc,CACzClL,OAAQ,OACRlL,SAAOrN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFqN,GAAO,IACV,eAAgB,qBAElB5M,KAAMsI,KAAKa,UAAUkJ,GACrB1T,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAKJ,GAFAvR,QAAQC,IAAI,0CAA2CqM,GAE/B,OAApBA,EAASvB,OAAiB,CAC5B,MAAM2S,QAAkB,IAAIhN,SAAQ,CAACY,EAASC,KAC5CH,EAAQI,qBAAqB8L,EAAM,CACjC5L,OAAQ,OACRlL,SAAOrN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFqN,GAAO,IACV,eAAgB,qBAElB5M,KAAMsI,KAAKa,UAAUwa,GACrBhlB,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAGJvR,QAAQC,IAAI,0CAA2Cyd,GACvD,IAAK,MAAMC,KAAWhB,EAChBe,EAAUE,kBAAkBD,UACxBjN,QAAQC,IACZ+M,EAAUE,kBAAkBD,GAAS/a,KAAIsH,UACvC,MAAMa,EAAS8S,EAAI,eAAepe,MAAM,IAClCqe,EAASD,EAAI,cAEnB,GAAe,aAAX9S,EAAuB,CACzB,MAAMgT,EAAI,GAAArjB,OAAMkP,EAAe,4CAAAlP,OAA2CmjB,EAAI7gB,GAAE,qDAE1EghB,QAAkB,IAAItN,SAAQ,CAACY,EAASC,KAC5CH,EAAQI,qBAAqBuM,EAAM,CACjCrM,OAAQ,MACRlL,UACAjO,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAEJvR,QAAQC,IAAI,8BAA+B+d,GAE3B,yBAAZL,EACErK,MAAMC,QAAQyK,EAAU5H,kBAC1B4H,EAAU5H,gBAAgBhT,SAAS6a,IACjCvB,EAAqB7Z,KAAK,CACxBqJ,WAAY+R,EAAe/H,MAAMhK,WACjCgS,OAAQD,EAAeE,MAAM,GAAGC,MAChC,IAIF9K,MAAMC,QAAQyK,EAAUhI,kBACxBgI,EAAUhI,gBAAgB5S,SAAS6S,IACjCyG,EAAqB7Z,KAAK,CACxBqJ,WAAY+J,EAAeC,MAAMhK,WACjCgS,OAAQjI,EAAeoI,WAAW,IAClC,IAMN5B,EAD0B,aAAxBriB,EAAM4hB,eACIU,EAAqBpa,MAC9BgU,GACCA,EAAOpK,aAAemN,GACJ,WAAlB/C,EAAO4H,SAKXzB,IACFvL,EAAkB,OAAI4M,EACtB5M,EAAoB,SAAInG,EAE5B,KAKV,MACE/K,QAAQyC,MAAM,wBAKhB,OAHAzC,QAAQC,IAAI,6BACZD,QAAQC,IAAI,sBAAuBwc,GAE5B,CACLtN,SAAS,EACTvV,KAAM6iB,EACN6B,OAASpN,EACTkF,gBAAiBsG,EAErB,CAAE,MAAOja,GAQP,MAPAzC,QAAQyC,MAAM,kBAAmB,CAC/BgP,IAAKmL,EACLpW,UACAyF,OACAxJ,UAGIA,CACR,GHqFiC8b,CAAe/X,EAAS4D,EAAUhQ,GAC7D4F,QAAQC,IAAI,qCAAsCuc,GAE9CA,EAAarN,UACf3O,GAASge,EAAAA,EAAAA,IAAUhC,EAAa5iB,OAChC4G,GAASie,EAAAA,EAAAA,IAAmBjC,EAAapG,kBACzC5V,GAASke,EAAAA,EAAAA,IAAUlC,EAAa8B,UAGlCte,QAAQC,IAAI,yDACd,CACF,CAAE,MAAOwC,GACPzC,QAAQyC,MAAM,4BAA6BA,GAC3CiH,EAAe,0DACjB,CAAC,QACClJ,GAAS+J,EAAAA,EAAAA,KAAwB,GACnC,GAG8B,C,2GI9NlC,MAmKA,EAnK6B1O,KAC3B,MAAM,eAAE6N,IAAmBC,EAAAA,EAAAA,MACrB,sBAAE6L,IAA0BD,EAAAA,EAAAA,KAC5B3G,GAAYzU,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAcuU,YACvDC,GAAU1U,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAcwU,UACrDrO,GAAWC,EAAAA,EAAAA,MAEXqO,GAAqBC,EAAAA,EAAAA,cACzB7E,UACE,IACE,MAAM8E,QAA4BC,EAAAA,EAAAA,IAAwB,CACxDC,cAkCF,GAAIF,EAAoBG,QAAS,CAO/B3O,GACE4O,EAAAA,EAAAA,IAAqB,CACnBC,SAAUL,EAAoBpV,KAAKyV,YAIvC,MAAMC,EAAoBN,EAAoBpV,KAAKyV,SAMzB,IAADE,EAAAC,EAAzB,GALAxP,QAAQC,IAAI,sBAAuBqP,GAEnC9O,GAASiP,EAAAA,EAAAA,KAAmB,IAGxBT,QACIwG,EACJlG,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnCL,EAAU,UAAE,IAAAK,OAAA,EAAZA,EAAcnF,SACF,QADUoF,EACtBN,EAAU,UAAE,IAAAM,OAAA,EAAZA,EAAcE,WAGpB,MACEhG,EAAekG,EAAAA,GAEnB,CAAE,MAAOnN,GACPzC,QAAQyC,MAAM,+CAAgDA,GAC9DiH,EAAekG,EAAAA,GACjB,CAAC,QACCpP,GAASqP,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAACrP,EAAUgV,IAGP1F,GAAaf,EAAAA,EAAAA,cACjB7E,UACElK,QAAQC,IAAI,iDAAkDiP,GAE9D,IACE,GAAIA,GAAaA,EAAUrI,OAAS,EAAG,CAAC,IAADgK,EAErC,MAAMnB,EAAyB,QAAfmB,EAAG3B,EAAU,UAAE,IAAA2B,OAAA,EAAZA,EAAcnB,WAOjC,IANmB,CACjB,eAEA,eACA,iBAEcrS,SAASqS,GAEvB,YADAhG,EAAeoH,EAAAA,IAGjBtQ,GAASiP,EAAAA,EAAAA,KAAmB,IAE5BzP,QAAQC,IAAI,+DACZO,GAASqP,EAAAA,EAAAA,KAAW,IACpBkB,YAAW,IAAMvQ,GAASqP,EAAAA,EAAAA,KAAW,KAAQ,SACvCf,EAAmBI,EAC3B,MACElP,QAAQE,KAAK,yCAEjB,CAAE,MAAOuC,GACPzC,QAAQyC,MAAM,8BAA+BA,GAC7CjC,GAASqP,EAAAA,EAAAA,KAAW,IACpB7P,QAAQC,IACN,8DAEFyJ,EAAeqG,EAAAA,GACjB,IAWF,CAACjB,EAAoBpF,IA0BvB,MAAO,CACLxN,yBAxB8B6S,EAAAA,EAAAA,cAAY,KAErCH,EAMH5O,QAAQC,IACN,gFANFD,QAAQC,IACN,0EAEFO,GAASiP,EAAAA,EAAAA,KAAmB,KAM9B,MAAMO,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoBJ,EAAYtP,EAAUkJ,GAC1D,GACC,KAEH,MAAO,IAAM2G,cAAcL,EAAS,GACnC,CAACF,EAAYtP,IAIdqO,UACAiB,aACD,C,mECxLH,MAyEA,EAzEqBU,KACnB,MAAM,iBAAEmO,EAAgB,eAAEjV,IAAmBC,EAAAA,EAAAA,KAqE7C,MAAO,CAAE4G,yBAnEwBrG,MAC/BE,EACAsF,EACAtD,KAEA,IAAKA,EAEH,YADApM,QAAQyC,MAAM,mDAMhB,IAEE,MAAM6J,QAAiBsS,EAAAA,EAAIC,KAJd,uBAI8B,CACzCjlB,KAAM,CACJoD,GAAIoN,EACJ7R,KAAMmX,EACNtD,aAAcA,KAIlB,GAAwB,MAApBE,EAASvB,OAAgB,CAI3B,OAHsBuB,EAAS1S,IAIjC,CACE,MAAM,IAAIklB,MAAM,yCAADpkB,OAC4B4R,EAASvB,QAGxD,CAAE,MAAOtI,GAEP,OADAzC,QAAQyC,MAAM,2CAAuCA,GAC9C,IACT,GAgCiCsc,iBA7BV7U,MAAO8U,EAAiBC,EAAaC,KAG5D,IAEE,MAAM5S,QAAiBsS,EAAAA,EAAIC,KAJd,2BAI8B,CACzCM,gBAAiBH,EACjBI,YAAaH,EACbC,UAAWA,IAGb,GAAwB,MAApB5S,EAASvB,OAKX,OAHA/K,QAAQC,IAAI,0BAA2BqM,EAAS1S,MAChD+kB,EAAiBU,EAAAA,IAEV,CAAElQ,SAAS,GAElB,MAAM,IAAI2P,MAAM,yCAADpkB,OAC4B4R,EAASvB,QAGxD,CAAE,MAAOtI,GAGP,OAFAzC,QAAQyC,MAAM,4BAA6BA,GAC3CiH,EAAe4V,EAAAA,IACR,CAAEnQ,SAAS,EAAO1M,MAAOA,EAAM8c,QACxC,GAGmD,C,2OCvEjD5V,EAAWA,KACf,MAAM6V,EAAYpnB,IAcX,IAdY,QACjBmnB,EAAO,KACPhnB,EAAO,UAAS,SAChBsF,EAAW,YAAW,UACtB4hB,EAAY,IAAI,gBAChBC,GAAkB,EAAK,aACvBC,GAAe,EAAI,aACnBC,GAAe,EAAK,iBACpBC,GAAkB,EAAK,UACvBC,GAAY,EAAI,MAChBC,EAAQ,QAAO,WACf7hB,EAAa8hB,EAAAA,GAAM,SACnBC,GAED7nB,EADI8nB,GAAYnnB,EAAAA,EAAAA,GAAAX,EAAAY,IAEOmnB,EAAAA,GAAM5nB,IAAS4nB,EAAAA,IAEvBZ,GAAOpmB,EAAAA,EAAAA,GAAA,CACnB0E,WACA4hB,YACAC,kBACAC,eACAC,eACAE,YACAC,QACA7hB,aACA+hB,YACGC,GACH,EAmBJ,MAAO,CAAEV,YAAWb,iBAhBK,SAACY,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5CoK,GAASrmB,EAAAA,EAAAA,GAAC,CAAEomB,UAAShnB,KAAM,WAAc6nB,GAC3C,EAcsC1W,eAZf,SAAC6V,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1CoK,GAASrmB,EAAAA,EAAAA,GAAC,CAAEomB,UAAShnB,KAAM,SAAY6nB,GACzC,EAUsDC,cARhC,SAACd,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzCoK,GAASrmB,EAAAA,EAAAA,GAAC,CAAEomB,UAAShnB,KAAM,QAAW6nB,GACxC,EAMqEE,iBAJ5C,SAACf,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5CoK,GAASrmB,EAAAA,EAAAA,GAAC,CAAEomB,UAAShnB,KAAM,QAAW6nB,GACxC,EAEuF,EAInFG,EAAuBA,KAC3B,MAAM,UAAEf,EAAS,iBAAEb,EAAgB,eAAEjV,EAAc,cAAE2W,EAAa,iBAAEC,GAAqB3W,IAsBzF,MAAO,CACL6W,sBArB4B,SAACjB,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjDoK,GAASrmB,EAAAA,EAAAA,GAAC,CAAEomB,UAASU,SAAU,GAAMG,GACvC,EAoBEK,6BAlBmC,SAAClB,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxDuJ,EAAiBY,GAAOpmB,EAAAA,EAAAA,GAAA,CAAI8mB,SAAU,GAAMG,GAC9C,EAiBEM,2BAfiC,SAACnB,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtD1L,EAAe6V,GAAOpmB,EAAAA,EAAAA,GAAA,CAAI8mB,SAAU,GAAMG,GAC5C,EAcEO,0BAZgC,SAACpB,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrDiL,EAAcd,GAAOpmB,EAAAA,EAAAA,GAAA,CAAI8mB,SAAU,GAAMG,GAC3C,EAWEQ,6BATmC,SAACrB,GAA2B,IAAlBa,EAAOhL,UAAAvO,OAAA,QAAAwO,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxDkL,EAAiBf,GAAOpmB,EAAAA,EAAAA,GAAA,CAAI8mB,SAAU,GAAMG,GAC9C,EAQC,EAIH,G,gDCvFO,MAAMzK,EAAezL,MAAOkQ,EAAiB5T,EAAS4D,KAC3D,IACE,MAAMR,EAAkBC,4DACxB,IAAIgX,EAAmB,GACvB7gB,QAAQC,IAAI,qCAAsCma,GAClDpa,QAAQC,IAAI,gCAAiCuG,GAC7C,MAAM4K,QAAgBC,EAAAA,EAAAA,MAEhBxD,EAAY3D,SACT,IAAIwG,SAAQ,CAACY,EAASC,KAC3BH,EAAQI,qBAAqBC,EAAK,CAChCC,OAAQ,MACRlL,UACAjO,KAAM,OACNoZ,WAAarF,IACXtM,QAAQC,IAAI,qBAAsBqM,GAClCgF,EAAQhF,EAAS,EAEnBsF,UAAYnP,IACVzC,QAAQyC,MAAM,kBAAmBA,GACjC8O,EAAO9O,EAAM,GAEf,IAKAqe,EAAoB1G,EAAgBxX,KAAIsH,UAC5C,IAAK,IAAD6W,EAAAC,EACF,MAAMC,EAAc,GAAAvmB,OAAMkP,EAAe,gEAAAlP,OAA+DyP,GAGlG+W,EAAsC,QAA7BH,SADmBlT,EAAUoT,IACNnN,cAAM,IAAAiN,GAE3C,QAF2CC,EAA1BD,EAA4B9S,MAC3CnB,GAASA,EAAKnU,QAAUwR,WAC1B,IAAA6W,OAF2C,EAA1BA,EAEfhkB,GAIH,GAFAgD,QAAQC,IAAI,qCAAsCihB,GAE9CA,EAAW,CACb,MAAM3G,EAAc,GAAA7f,OAAMkP,EAAe,8CAAAlP,OAA6CwmB,EAAS,8CAEzFhF,QAAsBrO,EAAU0M,IAEhC,OAAEzG,GAAWoI,EAEnB,GAAIpI,GAAUA,EAAOjN,OAAS,EAAG,CAAC,IAADsa,EAAAC,EAC/BphB,QAAQC,IAAI,uCAAwC6T,GAEpD,MAAMuN,EAAyB,QAAZF,EAAGrN,EAAO,UAAE,IAAAqN,OAAA,EAATA,EAAWG,aAEjC,IAAiB,OAAbD,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAevN,cAAM,IAAAsN,OAAR,EAAbA,EAAuBva,QAAS,EAAG,CAAC,IAAD0a,EACrC,MAAMC,EAAiD,QAAvCD,EAAGF,EAAcvN,OAAO,GAAGwN,oBAAY,IAAAC,OAAA,EAApCA,EAAsCzN,OAEzD,GAAI0N,GAAcA,EAAW3a,OAAS,EAAG,CAEvC,MAAM4a,EAAmBD,EAAWhc,QACjCkc,IACEb,EAAiBve,MACfqf,GAAcA,EAAU3kB,KAAO0kB,EAAM1kB,OAK5C6jB,EAAmB,IAAIA,KAAqBY,EAC9C,CACF,CACF,CACF,CACF,CAAE,MAAOhf,GAEP,MADAzC,QAAQyC,MAAM,0BAA2B0H,EAAa1H,GAChDA,CACR,KAIF,aADMiO,QAAQC,IAAImQ,GACXD,CACT,CAAE,MAAOpe,GAEP,MADAzC,QAAQyC,MAAM,sCAAuCA,GAC/CA,CACR,E,gDC/EK,MAAM+H,EAAiBN,UAC5B,IACE,IAAI0X,EAAmB7X,OAAOC,OAAOpK,SAAS,eAC9C,MAAMwR,QAAgBC,EAAAA,EAAAA,MACtBrR,QAAQC,IAAI,uBAAwB2hB,GACpC,MAAMC,EAAUhY,6GAEVyC,QAAiB,IAAIoE,SAAQ,CAACY,EAASC,KAC3CH,EAAQI,qBAAqBqQ,EAAS,CACpCnQ,OAAQ,MACRnZ,KAAM,OACNoZ,WAAYL,EACZM,UAAWL,GACX,IAGEuQ,EAAYxV,EAASyV,KAAKjW,KAC1BkW,EAAY1V,EAASyV,KAAKxd,MAC1B0d,EAAwB,kBACxBC,EAAuBN,EAM7B,MAJgB,CACd,CAACE,GAAYE,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAOzf,GAEP,YADAzC,QAAQyC,MAAM,gCAAiCA,EAEjD,E,iCC/BK,MAAM0f,EAAoBjY,MAAOgF,EAAWY,KAEjD,GADA9P,QAAQC,IAAI,6CAA8CiP,GACrDA,GAAkC,IAArBA,EAAUrI,OAI5B,IACE,GAA0B,oBAAfiJ,EACT,MAAM,IAAIgP,MAAM,iDAEZhP,EAAWZ,EACnB,CAAE,MAAOzM,GACPzC,QAAQyC,MAAM,+CAAgDA,EAChE,MAVEzC,QAAQE,KAAK,kDAUf,C","sources":["components/Button/Button.jsx","components/List/List.jsx","components/Card/Card.jsx","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/Loader/Loader.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useDroppableArea.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/getRouteDetails.js","services/api/PlantAssignment/updateClasses.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","hooks/useRevisions.js","hooks/useToast.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea();\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\" && widgetType !== \"companionWidget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/PlantAssignment/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n    const hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        objectId,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: hasNoClass\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            // \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","data","isColumn","onDragStart","onDragEnd","titleRef","useRef","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","useEffect","current","makeDraggable","concat","ref","border","owner","paddingLeft","_Fragment","EIN","Description","setIsColumn","useState","Card","Img","imageURL","CardBody","List","toggleFlexDirection","Image","widgetType","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","initializeDroppableArea","hasInitializedDroppable","isDragging","setIsDragging","DragAndDropStandAlone","CardComponent","handleDragStart","handleDragEnd","Loader","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","getValue","color","fontWeight","getWidgetStorageKey","console","log","warn","editable","meta","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","isScrolled","setIsScrolled","handleScroll","e","target","scrollTop","tableContainer","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","useBOSWidget","showErrorToast","useToast","ENOVIA_BASE_URL","process","email","window","widget","handleBOSWidget","async","collabSpace","objectId","parentName","parentRevision","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","trim","secondaryTitle","revision","stateNLS","name","revisionBody","child","body","identifier","source","relativePath","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","charCodeAt","results","item","latestVersion","versions","reduce","latest","doc","version","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","isDropped","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","fetchRevisionsAndParents","useRevisions","revisionParentData","Promise","all","parentDetails","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","WAFData","loadWAFData","resolve","reject","authenticatedRequest","url","method","onComplete","onFailure","searchResponse","routeData","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","_CASearchResponse$cha","result","CAurlObjWAF","changeAction","updateClasses","allPlants","sLatestID","revurl","ret","Body","Array","isArray","ancestors","getLatestRevision","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","member","ClassificationAttributes","classItem","Attributes","attr","updatedAttributes","String","Number","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","referencedObject","payload","categorizationAttributes","res","classId","acc","secondUrl","secondResponse","arguments","undefined","axios","usePlantAssignment","handlePlantAssignment","ItemDetails","CAAllPlantsData","getAllPlants","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","_response$output$resu","ancestor","mfgDetails","itemResponse","ScopeEngItem","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","plantAssignmentAttr","a","allPlantsRemovedAttr","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","members","getUserGroupCollab","allCollabSpaces","plants","_response$member$0$Cl","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","parentClass","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","CAName","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","showSuccessToast","api","post","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","progress","otherOptions","toast","options","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","refreshWidgetData"],"sourceRoot":""}