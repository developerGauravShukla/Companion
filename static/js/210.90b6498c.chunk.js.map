{"version":3,"file":"static/js/210.90b6498c.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Modals/ConfirmationModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","services/api/companion/userGroupService.js","services/api/companion/allPlantSevice.js","services/api/companion/plantChildrenService.js","services/api/companion/getRouteDetails.js","services/api/companion/updateClasses.js","services/api/companion/processPlantsService.js","services/api/companion/fetchCsrfService.js","hooks/useCompanionWidget.js","services/api/companion/assignedPlantService.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/comapnaiondataHelpers.js","services/api/companion/saveTableDataService.js","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/DragAndDrop.jsx","services/api/companion/createMFGCA.js","pages/companionWidget/CompanionWidget.jsx","services/api/companion/noPlants.js","pages/companionWidget/companionIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { callEnoviaWebService } from \"../../../utils/helpers\";\r\nconst ENOVIA_BASE_URL = \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\";\r\n\r\nconst ClassDetails = [];\r\n/**\r\n * Generic helper to call Enovia Web Service\r\n * @param {string} method - HTTP method (GET, POST)\r\n * @param {string} url - Full URL for the API call\r\n * @param {string|object} body - Request body as string or object\r\n * @param {object} headers - Headers object\r\n * @returns {Promise<object>} - Parsed JSON response\r\n */\r\n// async function callEnoviaWebService(method, url, body, headers) {\r\n//   const options = {\r\n//     method,\r\n//     headers: {\r\n//       ...headers,\r\n//       \"Content-Type\": \"application/json\"\r\n//     }\r\n//   };\r\n \r\n//   if (body) {\r\n//     options.body = typeof body === \"string\" ? body : JSON.stringify(body);\r\n//   }\r\n \r\n//   const response = await fetch(url, options);\r\n//   if (!response.ok) {\r\n//     throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\r\n//   }\r\n//   return response.json();\r\n// }\r\n \r\n/**\r\n * Get Manufacturing Item identifiers from an engineering item ID\r\n * @param {object} headers\r\n * @param {string} engItemId\r\n * @returns {Promise<string[]>} - Array of manufacturing item identifiers\r\n */\r\nasync function getManufacturingItems(headers, engItemId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/invoke/dsmfg:getMfgItemsFromEngItem`;\r\n  const body = [engItemId];\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n    if (response.output.totalItems > 0 && Array.isArray(response.output.member)) {\r\n        return response.output.member.map(item => item.identifier);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching manufacturing items:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get detailed info for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object|null>} - Details with name, title, type, createdFrom, identifier\r\n */\r\nasync function getMfgItemDetails(headers, identifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}?$mask=dsmfg:MfgItemMask.Details`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Manufacturing Item URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    console.log(\"Response member:\", response.output.member);\r\n    if ( response &&\r\n        response.output &&\r\n        response.output.totalItems > 0 &&\r\n        Array.isArray(response.output.member) &&\r\n        response.output.member.length > 0) {\r\n      const item = response.output.member[0];\r\n      console.log(\"item:\", item);\r\n      return {\r\n        identifier: item.id,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        createdFrom: item.createdFrom || null\r\n      };\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching details for identifier ${identifier}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get plant class IDs assigned to a manufacturing item (filtering where PlantAssignmentClass is true)\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant ClassIDs\r\n */\r\nasync function getPlantClassIDs(headers, mfgIdentifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${mfgIdentifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Plant Class IDs URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0 &&\r\n      response.output.member[0].ClassificationAttributes &&\r\n      Array.isArray(response.output.member[0].ClassificationAttributes.member)\r\n    ) {\r\n      const classMembers = response.output.member[0].ClassificationAttributes.member;\r\n      return classMembers\r\n        .filter(classItem => {\r\n          const plantAssignmentAttr = (classItem.Attributes || []).find(attr => attr.name === \"PlantAssignmentClass\");\r\n          return plantAssignmentAttr && plantAssignmentAttr.value === true;\r\n        })\r\n        .map(classItem => classItem.ClassID);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(`Error fetching plant class IDs for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get Plant title by ClassID\r\n * @param {object} headers\r\n * @param {string} classId\r\n * @returns {Promise<string|null>} - Plant title or null if not found\r\n */\r\nasync function getPlantTitleByClassID(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0\r\n    ) {\r\n      return response.output.member[0].title || null;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching plant title for class ID ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get all assigned plant titles for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant titles\r\n */\r\nasync function getAssignedPlants(headers, mfgIdentifier) {\r\n  try {\r\n    const classIDs = await getPlantClassIDs(headers, mfgIdentifier);\r\n    if (classIDs.length === 0) return [];\r\n \r\n    const plantTitles = [];\r\n    for (const classId of classIDs) {\r\n        const existing = ClassDetails.find(item => item.classid === classId);\r\n        \r\n        if (existing) {\r\n            // If classId is already in ClassDetails, push its title to plantTitles\r\n            plantTitles.push(existing.title);\r\n        } else {\r\n            // If not, fetch title, then push to both ClassDetails and plantTitles\r\n            const title = await getPlantTitleByClassID(headers, classId);\r\n            if (title) {\r\n            ClassDetails.push({ classid: classId, title });\r\n            plantTitles.push(title);\r\n            }\r\n        }\r\n        }\r\n    return plantTitles;\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned plants for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Expand children manufacturing items for a given identifier\r\n * Exclude those of type \"DELFmiFunctionIdentifiedInstance\"\r\n * Add assigned plants info for each child\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object[]>} - Array of child objects with id, name, type, title, and AssignedPlants\r\n */\r\nasync function getMFGChilders(headers, identifier) {\r\n    const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/expand`;\r\n    const body = {\r\n      expandDepth: 1,\r\n      withPath: true\r\n    };\r\n     \r\n \r\n    try {\r\n      const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n \r\n      if (\r\n        response.status &&\r\n        response.output &&\r\n        Array.isArray(response.output.member)\r\n      ) {\r\n        // Filter children (exclude DELFmiFunctionIdentifiedInstance)\r\n        const children = response.output.member.filter(\r\n          item => item.type && item.type !== \"DELFmiFunctionIdentifiedInstance\"\r\n        );\r\n \r\n        // Enrich each child with AssignedPlants\r\n        const enrichedChildren = await Promise.all(\r\n          children.map(async child => {\r\n            const assignedPlants = await getAssignedPlants(headers, child.id);\r\n            return {\r\n              id: child.id,\r\n              type: child.type,\r\n              name: child.name,\r\n              title: child.title || null,\r\n              AssignedPlants: assignedPlants\r\n            };\r\n          })\r\n        );\r\n \r\n        return enrichedChildren;\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching children for identifier ${identifier}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n \r\n \r\n/**\r\n * Main method that prepares the output data\r\n * @param {object} headers\r\n * @param {string} engItemId - Engineering Item ID\r\n * @param {string} droppedMfgID - Manufacturing Item ID to flag as currentObject\r\n * @returns {Promise<object[]>} - Array of objects with manufacturing details and assigned plants and children\r\n */\r\nexport async function prepareDataOutput(headers, droppedMfgID, engItemId) {\r\n  try {\r\n    const identifiers = await getManufacturingItems(headers, engItemId);\r\n    console.log(\"Manufacturing Identifiers:\", identifiers);\r\n    if (identifiers.length === 0) return [];\r\n \r\n    const detailsArray = await Promise.all(\r\n      identifiers.map(id => getMfgItemDetails(headers, id))\r\n    );\r\n\r\n    console.log(\"Manufacturing Details:\", detailsArray);\r\n \r\n    const items = detailsArray.filter(item => item !== null);\r\n \r\n    // Determine which items are parents (no createdFrom reference from others)\r\n    const createdFromSet = new Set(\r\n      items\r\n        .map(item => item.createdFrom)\r\n        .filter(Boolean)\r\n        .map(cf => cf.split(\" \")[0])\r\n    );\r\n\r\n    console.log(\"Created From Set:\", createdFromSet);\r\n \r\n    const result = [];\r\n \r\n    for (const item of items) {\r\n      const isParent = createdFromSet.has(item.name);\r\n      const currentObject = item.identifier === droppedMfgID;\r\n      console.log(`Processing item: ${item.name}, isParent: ${isParent}, currentObject: ${currentObject}`);\r\n \r\n      // Get assigned plants for each manufacturing item\r\n      const assignedPlants = await getAssignedPlants(headers, item.identifier);\r\n      console.log(`Assigned Plants for Hello:`, assignedPlants);\r\n \r\n      // Expand children if parent or currentObject\r\n      let children = [];\r\n      if (isParent || currentObject) {\r\n        children = await getMFGChilders(headers, item.identifier);\r\n      }\r\n \r\n      result.push({\r\n        identifier: item.identifier,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        isParent,\r\n        currentObject,\r\n        AssignedPlants: assignedPlants,\r\n        children\r\n      });\r\n    }\r\n\r\n    console.log(\"Prepared Data Output:\", result);\r\n \r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Error in prepareDataOutput:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n \r\n//Plants for popup\r\nexport async function preparePlantLists(preparedDataOutput, engItemId) {\r\n    // 1. Get plants assigned to the engineering item\r\n    const engItemPlants = await getAssignedPlants(engItemId);\r\n \r\n    // 2. Find the current MFG item (where currentObject === true)\r\n    const currentMfgItem = preparedDataOutput.find(mfg => mfg.currentObject === true);\r\n \r\n    if (!currentMfgItem) {\r\n      console.warn(\"Current MFG item not found in prepared data output.\");\r\n      return {\r\n        AssignedPlants: [],\r\n        AvailablePlants: engItemPlants\r\n      };\r\n    }\r\n \r\n    // Assigned plants of current MFG\r\n    const assignedPlants = currentMfgItem.AssignedPlants || [];\r\n \r\n    // 3. Collect plants assigned to all other MFG items except the parent MFG item\r\n    const otherPlants = [];\r\n \r\n    preparedDataOutput.forEach(mfgItem => {\r\n      if (!mfgItem.isParent) {  // exclude parent MFG plants\r\n        const plants = mfgItem.AssignedPlants || [];\r\n        plants.forEach(plant => {\r\n          if (!otherPlants.includes(plant)) {\r\n            otherPlants.push(plant);\r\n          }\r\n        });\r\n      }\r\n    });\r\n \r\n    // 4. Calculate available plants: engItemPlants - otherPlants\r\n    const availablePlants = engItemPlants.filter(plant => !otherPlants.includes(plant));\r\n\r\n    console.log(\"Assigned Plants:\", assignedPlants);\r\n    console.log(\"Available Plants:\", availablePlants);\r\n\r\n\r\n    return {\r\n      AssignedPlants: assignedPlants,\r\n      AvailablePlants: availablePlants\r\n    };\r\n  }","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/companion/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/companion/updateClasses\";\r\nimport {prepareDataOutput, preparePlantLists} from \"../services/api/companion/processPlantsService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/companion/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handleCompanion = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // // Step 1: Fetch user group collaboration spaces\r\n        // const userGroupCollab = await getUserGroupCollab(\r\n        //   headers,\r\n        //   objectId,\r\n        //   email\r\n        // );\r\n        // console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        // let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] All CollabSpaces:\",\r\n        //   allCollabSpaces\r\n        // );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        // let allPlants = [];\r\n        // if (allCollabSpaces.length > 0) {\r\n        //   allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        //   console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        // }\r\n\r\n        //here we have to get from ScopeLined EngineeringItem. for companion widget---->\r\n        let allPlants = [];\r\n        const scopeLinekdData = await getScopedItms(objectId,headers);\r\n        console.log(\"[Use Companion] Scope Linked Data:\", scopeLinekdData);\r\n        if(scopeLinekdData.identifier){\r\n          allPlants = await getPlantClasses(headers, scopeLinekdData.identifier);\r\n\r\n          const prepareData = await prepareDataOutput(headers, objectId, scopeLinekdData.identifier);\r\n\r\n          console.log(\"[Use Companion] Prepare Data Output:\", prepareData);\r\n          // Store the prepared product/plant hierarchy in Redux so it can be accessed by any component that needs the product children structure\r\n          dispatch(setProductChildren(prepareData)); //\r\n          \r\n          const plantLists = await preparePlantLists(prepareData, headers);\r\n          console.log(\"[Use Companion] Plant Lists:\", plantLists);\r\n          // Store AssignedPlants and AvailablePlants in Redux for use in table and popup\r\n          dispatch(setPlantObjectData(plantLists));\r\n        }\r\n\r\n        console.log(\"[Companion] All Plants:\", allPlants);\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            console.log(\"[Use Plant Assignment] Plant Object Data:\", plants.data.plantData);\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        // TODO : Need Update for companion widget\r\n\r\n          const typeList = [\"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\",\r\n            \"Raw_Material\"];\r\n        if (typeList.includes(type)) {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handleCompanion };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getPlantClasses(headers, objectId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (itemResponse.status && itemResponse.output) {\r\n      const classExtensions = itemResponse.output.member[0].ClassificationAttributes?.member || [];\r\n \r\n      const result = [];\r\n \r\n      for (const classItem of classExtensions) {\r\n        const id = classItem.ClassID;\r\n        const attributes = classItem.Attributes || [];\r\n \r\n        const plantAssignmentClass = attributes.find(attr => attr.name === 'PlantAssignmentClass')?.value;\r\n \r\n        if (plantAssignmentClass) {\r\n          const title = await getClassTitleById(headers, id);\r\n          result.push({\r\n            id,\r\n            title\r\n          });\r\n        }\r\n      }\r\n \r\n      return result;\r\n    } else {\r\n      console.log(`No valid response for object ID ${objectId}`);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${objectId}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\nasync function getClassTitleById(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (response.status && response.output && response.output.member && response.output.member.length > 0) {\r\n      const classInfo = response.output.member[0];\r\n      return classInfo.title || null;\r\n    } else {\r\n      console.log(`No class found for classId ${classId}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching class title for classId ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    // ClassExtensions = ClassExtensions.filter(ext => {\r\n    //   const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n    //   const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n    //   return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    // });\r\n    // const hasNoClass= ClassExtensions.some(ext => {\r\n    //   const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n    //   return attr?.value === true;\r\n    // });\r\n \r\n    // if (ClassExtensions.length===0){\r\n    //   ClassExtensions =  await updateClasses(\r\n    //     headers,\r\n    //     allPlants,\r\n    //     objectId,\r\n    //     state,\r\n    //     type\r\n    //     );\r\n    // }\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: false\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n  MSG_INVALID_MFG_TYPES,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanion } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanion(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanion]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            // \"VPMReference\",\r\n            // \"Raw_Material\",\r\n            // \"Change Action\",\r\n            \"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\"\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_MFG_TYPES);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanionDropableArea;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        // Seq: data?.Seq || \"1\",\r\n        // Status: data?.PlantStatus || \"Pending\",\r\n        // \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        // \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        // Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        // \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        // \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        // \"ERP Status\": \"Active\" || \"N/A\",\r\n        // \"ERP Export\": \"Yes\" || \"N/A\",\r\n        // \"Lead Plant\": false,\r\n        // MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        // \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    // { accessorKey: \"Seq\", header: \"Seq\" },\r\n    // { accessorKey: \"Status\", header: \"Status\" },\r\n    // { accessorKey: \"Change\", header: \"Change\" },\r\n    // { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    // { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    // { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    // { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    // {\r\n    //   accessorKey: \"MBom\",\r\n    //   header: \"MBom\",\r\n      \r\n    // },\r\n    // { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    // { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    // { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    // { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./companionWidget.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled,\r\n  setIsFileInputDisabled \r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    setIsFileInputDisabled(false); // ✅ Only here\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n      setIsFileInputDisabled(true);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./comapnaiondataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/companion/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/companion/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/companion/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/companion/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useCompanionDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useCompanionDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"CreateKit\",  \"CreateAssembly\", \"CreateMaterial\",  \"Provide\", \"ProcessContinuousProvide\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import {fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const noPlants = async (headers, type, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchDataWithUrl = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    \r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=NoClassification`;\r\n\r\n        const collabspaceResponse = await fetchDataWithUrl(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === \"NoClassification\"\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n            const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n            const classResponse = await fetchDataWithUrl(libraryDataURL);\r\n\r\n            const noClassChild = classResponse.member[0]?.ChildClasses?.member?.find(child => child.title === \"No Class\");\r\n            const Classid = noClassChild?.id;\r\n            if (Classid) {\r\n                const classifyUrl =\r\n                  \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n             \r\n                const classifybody = {\r\n                  id: objectId, // Use objectId from Redux\r\n                  type: type, // Use type from Redux\r\n                  classes: [Classid],\r\n                  mode: \"classifyParent\",\r\n                };\r\n             \r\n                console.log(\"Classify API Body:\", classifybody);\r\n             \r\n                try {\r\n                  const classifyResponse = await fetchData(\r\n                    \"POST\",\r\n                    classifyUrl,\r\n                    classifybody,\r\n                   \r\n                  );\r\n                  console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n                } catch (error) {\r\n                  console.error(\"Error in Classify API Call:\", error);\r\n                }\r\n              }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./CompanionWidget\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","onConfirm","CustomModal","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","getAllPlants","async","allCollabSpaces","headers","objectId","ENOVIA_BASE_URL","process","UserGroupClasses","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","concat","collabSpace","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","filter","plant","some","userClass","all","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","urlObjWAF","searchResponse","routeData","RouteID","identifier","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","_CASearchResponse$cha","result","CAurlObjWAF","changeAction","updateClasses","allPlants","sLatestID","revurl","ret","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","getLatestRevision","warn","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","ClassificationAttributes","classItem","Attributes","attr","name","value","updatedAttributes","String","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","acc","secondUrl","secondResponse","arguments","undefined","body","axios","ClassDetails","getPlantTitleByClassID","totalItems","getAssignedPlants","mfgIdentifier","classIDs","plantAssignmentAttr","getPlantClassIDs","plantTitles","existing","classid","getMFGChilders","expandDepth","withPath","assignedPlants","child","AssignedPlants","prepareDataOutput","droppedMfgID","engItemId","identifiers","getManufacturingItems","detailsArray","createdFrom","getMfgItemDetails","items","createdFromSet","Set","Boolean","cf","isParent","has","currentObject","fetchCsrfToken","securityContext1","window","widget","getValue","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","useCompanionWidget","showErrorToast","dispatch","useDispatch","email","handleCompanion","setParentDetailsLoading","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","_response$output$resu","ancestor","mfgDetails","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","itemResponse","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","allPlantsRemovedAttr","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","setCAItemDetails","setIsMFGCA","setCAHeaders","scopeLinekdData","_itemResponse$output$3","classExtensions","_attributes$find","getClassTitleById","getPlantClasses","prepareData","setProductChildren","plantLists","preparedDataOutput","engItemPlants","currentMfgItem","mfg","AvailablePlants","otherPlants","mfgItem","availablePlants","preparePlantLists","setPlantObjectData","plants","_response$member$0$Cl","initialAssignedClasses","uniqueInAllclasses","parentClass","replace","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setHeaders","getProductChildren","type_filter_bo","type_filter_rel","Method","_objectSpread","childs","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","fetchProductChildren","getCaDetails","objectID","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","ScopeEngItem","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_MFG_TYPES","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","itemId","isRemoveMode","handleRemovePlant","marginRight","display","alignItems","color","fontWeight","AiOutlineClose","cursor","marginLeft","getTableData","tableData","mappedData","ItemName","Plant","Change","localeCompare","uniqueColumns","header","extractIdsFromTitles","newClasses","itemTitle","matchedPlant","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","declassifyResponse","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","Seq","Status","CAStatus","MBom","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","callManufacturingCAApi","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","CAHeaders","credentials","credentialsParts","companyName","allPlantsData","manufacturingCABody","excelData","uniquePlantTitles","itemName","toString","plantsList","add","parentPlants","plantTitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","event","stopPropagation","navigator","clipboard","writeText","background","border","FaRegCopy","CompanionWidget","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","initialTableData","setInitialTableData","confirmedRemove","_droppedObjectData$in5","_droppedObjectData$in6","selectedTitles","selectedTableRows","updatedTableData","prevKey","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","fetchDataWithUrl","_classResponse$member","_classResponse$member2","_classResponse$member3","noClassChild","Classid","noPlants","plantObjectData","plantId","extractPlantData","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","uniquePlant","asignedPlant","productChildren","getUniquePlant","sourceData","assignedTablePlants","_item$Plant","uniqueTablePlants","updateTableData","updatedData","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classitem","MBOM","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","_allPlants$find4","AllClasses","productChilds","fetchOOTBData","NotPropagableChilds","prodChild","ErrorObj","prodchilds","notPropagableChild","childId","childName","Finalmessage","every","childTitles","errorItem","updateBody","propagateClasses","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","saveData","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","right","top","fontSize","formattedFinalMessage","autoClose","finalobj","errorObj","processErrorObj","prev","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","parse","tableColumns","plantList","tooltipText","ConfirmationModal","flexDirection","justifyContent","DragAndDropComponent","files","validExtensions","from","file","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","parentDetails","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","missingIn","Childs","classTitle","filteredNewClasses","handleAddData","erroredPlants","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","originalPlant","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}