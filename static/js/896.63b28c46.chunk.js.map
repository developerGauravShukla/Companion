{"version":3,"file":"static/js/896.63b28c46.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","components/SearchInput/SearchInput.jsx","hooks/useInterComSearch.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/getRouteDetails.js","services/api/PlantAssignment/updateClasses.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","hooks/useToast.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/PlantAssignment/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n    const hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        objectId,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: hasNoClass\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            // \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["Loader","_jsx","className","children","_ref","onSearch","disabled","searchText","setSearchText","useState","inputRef","useRef","_jsxs","FontAwesomeIcon","icon","faMagnifyingGlass","onClick","handleSearchIconClick","trim","InputGroup","Form","Control","type","ref","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","current","focus","useInterComSearch","socket","setSocket","InterCom","setInterCom","useEffect","async","interComInstance","loadInterCom","error","console","loadData","disconnect","performSearch","useCallback","searchOpts","onObjectsSelected","_window$widget","warn","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","log","widgetId","window","widget","id","finalSearchOpts","_objectSpread","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","data","GetFlowDownCADetails","flowDownCA","headers","CADetails","CAAtt","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","urlObjWAF","concat","searchResponse","routeData","find","item","RouteID","identifier","RouteStatus","state","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","push","CATitle","title","CAState","_CASearchResponse$cha","result","split","slice","join","CAurlObjWAF","changeAction","updateClasses","allPlants","objectId","sLatestID","revurl","ret","Body","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","length","getLatestRevision","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","member","ClassificationAttributes","filter","classItem","Attributes","some","attr","name","map","updatedAttributes","String","Number","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","reduce","acc","secondUrl","secondResponse","arguments","undefined","body","axios","usePlantAssignment","showErrorToast","useToast","dispatch","useDispatch","email","getValue","handlePlantAssignment","collabSpace","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","getAllPlants","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","_response$output$resu","ancestor","includes","mfgDetails","itemResponse","ScopeEngItem","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","plantAssignmentAttr","a","allPlantsRemovedAttr","forEach","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","all","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","getUserGroupCollab","allCollabSpaces","plants","_response$member$0$Cl","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","parentClass","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","childs","child","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","CAName","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","usePlantDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","progress","otherOptions","_objectWithoutProperties","_excluded","toast","showSuccessToast","options","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","refreshWidgetData","Error"],"sourceRoot":""}