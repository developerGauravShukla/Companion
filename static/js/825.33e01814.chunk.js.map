{"version":3,"file":"static/js/825.33e01814.chunk.js","mappings":"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","sources":["hooks/useCompanion.js","hooks/useCompanianDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/dataHelpers.js","pages/companionWidget/companion.jsx","pages/companionWidget/companionIndex.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/PlantAssignment/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./useCompanion\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"./useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanianDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            // \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanianDropableArea;","import React, { useEffect, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanianDropableArea from \"../../hooks/useCompanianDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanianDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const CompanionRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"CompanionRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <CompanionRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanianDropableArea from \"../../hooks/useCompanianDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/PlantAssignment/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CompanionWidget = () => {\r\n  // ...state and refs\r\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [errors, setErrors] = useState([]);\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const [failureMessage, setFailureMessage] = useState(\"\");\r\n  const [plantData, setPlantData] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [uniqueTableData, setUniqueTableData] = useState([]);\r\n  const [cardData, setCardData] = useState([]);\r\n  const [droppedData, setDroppedData] = useState([]);\r\n  const [isDropped, setIsDropped] = useState(false);\r\n  const [resetKey, setResetKey] = useState(Date.now());\r\n  const [showContentErrorsModal, setShowContentErrorsModal] = useState(false);\r\n  const [contentErrors, setContentErrors] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const {\r\n    caItemDetails,\r\n    caItemObjectDetails,\r\n    droppedObjectData,\r\n    plantObjectData,\r\n  } = useSelector((state) => state.droppedObject);\r\n\r\n  // Add updateTableData for Table meta prop\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // ...callbacks and effects\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setFile(file);\r\n      const reader = new FileReader();\r\n      reader.onload = (evt) => {\r\n        const bstr = evt.target.result;\r\n        const workbook = XLSX.read(bstr, { type: \"binary\" });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n        console.log(jsonData);\r\n      };\r\n      reader.readAsBinaryString(file);\r\n    }\r\n  };\r\n\r\n  const processFile = () => {\r\n    if (!file) return;\r\n    setIsLoading(true);\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    axios\r\n      .post(\"/api/process-file\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setIsLoading(false);\r\n        setSuccessMessage(\"File processed successfully!\");\r\n        setErrors([]);\r\n        setContentErrors([]);\r\n        setShowContentErrorsModal(true);\r\n        // Process response data\r\n        const { plantData, cardData, tableData } = response.data;\r\n        setPlantData(plantData);\r\n        setCardData(cardData);\r\n        setTableData(tableData);\r\n        // Dispatch actions or update state as needed\r\n        dispatch(setPlantObjectData(plantData));\r\n        dispatch(setCAItemDetails(cardData));\r\n        dispatch(setDroppedObjectData(tableData));\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        setFailureMessage(\"Error processing file.\");\r\n        setSuccessMessage(\"\");\r\n        setErrors([]);\r\n        setContentErrors([]);\r\n        setShowContentErrorsModal(true);\r\n        console.error(\"Error processing file:\", error);\r\n      });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    setIsLoading(true);\r\n    saveData({ tableData, cardData })\r\n      .then((response) => {\r\n        setIsLoading(false);\r\n        setSuccessMessage(\"Data saved successfully!\");\r\n        setFailureMessage(\"\");\r\n        setErrors([]);\r\n        setContentErrors([]);\r\n        setShowContentErrorsModal(true);\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        setFailureMessage(\"Error saving data.\");\r\n        setSuccessMessage(\"\");\r\n        setErrors([]);\r\n        setContentErrors([]);\r\n        setShowContentErrorsModal(true);\r\n        console.error(\"Error saving data:\", error);\r\n      });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setResetKey(Date.now());\r\n    setFile(null);\r\n    setErrors([]);\r\n    setSuccessMessage(\"\");\r\n    setFailureMessage(\"\");\r\n    setPlantData([]);\r\n    setCardData([]);\r\n    setTableData([]);\r\n    dispatch(setPlantObjectData([]));\r\n    dispatch(setCAItemDetails([]));\r\n    dispatch(setDroppedObjectData([]));\r\n  };\r\n\r\n  const handleRowSelect = (selectedRowKeys, selectedRows) => {\r\n    setSelectedRows(selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows));\r\n  };\r\n\r\n  // ...memoized values\r\n  const memoizedCardData = useMemo(() => {\r\n    return cardData.map((item) => ({\r\n      ...item,\r\n      key: item.id,\r\n    }));\r\n  }, [cardData]);\r\n\r\n  const memoizedTableData = useMemo(() => {\r\n    return tableData.map((item) => ({\r\n      ...item,\r\n      key: item.id,\r\n    }));\r\n  }, [tableData]);\r\n\r\n  // ...effects\r\n  useEffect(() => {\r\n    // Initial data fetch or setup\r\n    refreshWidgetData()\r\n      .then((data) => {\r\n        // Handle successful data fetch\r\n        const { plantData, cardData, tableData } = data;\r\n        setPlantData(plantData);\r\n        setCardData(cardData);\r\n        setTableData(tableData);\r\n        dispatch(setPlantObjectData(plantData));\r\n        dispatch(setCAItemDetails(cardData));\r\n        dispatch(setDroppedObjectData(tableData));\r\n      })\r\n      .catch((error) => {\r\n        // Handle error\r\n        console.error(\"Error fetching data:\", error);\r\n      });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"companion-widget\">\r\n      <div className=\"widget-header\">\r\n        <h2>Companion Widget</h2>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => setShowConfirmationModal(true)}\r\n        >\r\n          Open Confirmation Modal\r\n        </Button>\r\n      </div>\r\n      <div className=\"widget-content\">\r\n        <CardComponent\r\n          title=\"Card Title\"\r\n          content=\"Card content goes here.\"\r\n          footer=\"Card footer\"\r\n        />\r\n        <ReusableTable\r\n          columns={tableColumns}\r\n          data={memoizedTableData}\r\n          onRowSelect={handleRowSelect}\r\n          meta={{ updateTableData }}\r\n          widgetType=\"Companion_Widget\"\r\n        />\r\n        <CardWithDragAndDrop\r\n          data={droppedObjectData}\r\n          onDrop={(item) => {\r\n            setDroppedData((prev) => [...prev, item]);\r\n            setIsDropped(true);\r\n          }}\r\n          onDragEnd={() => setIsDropped(false)}\r\n        />\r\n        <div className=\"file-upload\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".xlsx, .xls\"\r\n            onChange={handleFileChange}\r\n            key={resetKey}\r\n          />\r\n          <Button\r\n            variant=\"success\"\r\n            onClick={processFile}\r\n            disabled={isLoading || !file}\r\n          >\r\n            {isLoading ? \"Processing...\" : \"Process File\"}\r\n          </Button>\r\n        </div>\r\n        <div className=\"actions\">\r\n          <Button\r\n            variant=\"danger\"\r\n            onClick={handleReset}\r\n            disabled={isLoading}\r\n          >\r\n            {isLoading ? \"Resetting...\" : \"Reset\"}\r\n          </Button>\r\n          <Button\r\n            variant=\"warning\"\r\n            onClick={handleSave}\r\n            disabled={isLoading}\r\n          >\r\n            {isLoading ? \"Saving...\" : \"Save Data\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <ConfirmationModal\r\n        show={showConfirmationModal}\r\n        onHide={() => setShowConfirmationModal(false)}\r\n        onConfirm={() => {\r\n          // Handle confirmation action\r\n          setShowConfirmationModal(false);\r\n        }}\r\n        title=\"Confirm Action\"\r\n        body=\"Are you sure you want to perform this action?\"\r\n      />\r\n      <ContentErrorsModal\r\n        show={showContentErrorsModal}\r\n        onHide={() => setShowContentErrorsModal(false)}\r\n        errors={contentErrors}\r\n        title=\"Content Errors\"\r\n        successMessage={successMessage}\r\n        failureMessage={failureMessage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport Companion from \"./companion\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nexport function start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <Companion />\r\n      <ToastContainer />\r\n    </Provider>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n// Export a default function for dynamic import compatibility\r\nexport default function () {\r\n  if (window.widget) {\r\n    start();\r\n  }\r\n}\r\n"],"names":["ENOVIA_BASE_URL","process","usePlantAssignment","showErrorToast","useToast","dispatch","useDispatch","email","window","widget","getValue","console","log","handlePlantAssignment","async","collabSpace","state","objectId","type","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","concat","response","callEnoviaWebService","status","output","realizedChanges","map","realizedChange","where","identifier","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","sLatestID","revurl","ret","relativePath","Body","data","id","source","error","_response$output$resu","versions","results","result","ancestors","some","ancestor","getLatestRevision","includes","mfgDetails","url","itemResponse","member","ScopeEngItem","getScopedItms","undefined","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ClassificationAttributes","filter","ext","plantAssignmentAttr","Attributes","find","a","name","allPlantsRemovedAttr","value","length","updateClasses","attr","forEach","classification","classId","ClassID","plantName","erpStatus","isPlantClass","flowDownCA","_allPlants$find","attribute","p","title","push","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","Promise","all","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","warn","plants","fetchAssignedPlants","success","setPlantObjectData","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","useCompanianDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","CompanionRenderer","_ref","itemId","isRemoveMode","handleRemovePlant","_Fragment","children","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","AiOutlineClose","size","cursor","marginLeft","onClick","tableColumns","CAName","accessorKey","header","cell","_ref2","row","plantList","original","Plant","tooltipText","Array","isArray","join","CompanionWidget","showConfirmationModal","setShowConfirmationModal","isLoading","setIsLoading","file","setFile","errors","setErrors","successMessage","setSuccessMessage","failureMessage","setFailureMessage","setPlantData","selectedRows","setSelectedRows","tableData","setTableData","uniqueTableData","setUniqueTableData","setCardData","droppedData","setDroppedData","setIsDropped","resetKey","setResetKey","Date","now","showContentErrorsModal","setShowContentErrorsModal","contentErrors","setContentErrors","caItemDetails","caItemObjectDetails","plantObjectData","memoizedTableData","useMemo","item","_objectSpread","key","then","catch","className","Button","variant","CardComponent","content","footer","ReusableTable","columns","onRowSelect","handleRowSelect","selectedRowKeys","setSelectedTableRows","meta","updateTableData","updatedData","widgetType","CardWithDragAndDrop","onDrop","prev","onDragEnd","accept","onChange","e","files","reader","FileReader","onload","evt","bstr","workbook","XLSX","sheetName","SheetNames","worksheet","Sheets","jsonData","sheet_to_json","readAsBinaryString","processFile","formData","FormData","append","axios","post","disabled","handleReset","handleSave","saveData","ConfirmationModal","show","onHide","onConfirm","body","ContentErrorsModal","root","start","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","Companion","ToastContainer","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}