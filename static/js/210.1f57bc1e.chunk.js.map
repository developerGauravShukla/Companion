{"version":3,"file":"static/js/210.1f57bc1e.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Modals/ConfirmationModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","services/api/companion/userGroupService.js","services/api/companion/allPlantSevice.js","services/api/companion/updateClasses.js","services/api/companion/processPlantsService.js","services/api/companion/fetchCsrfService.js","hooks/useCompanionWidget.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/comapnaiondataHelpers.js","services/api/companion/saveTableDataService.js","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/DragAndDrop.jsx","services/api/companion/createMFGCA.js","pages/companionWidget/CompanionWidget.jsx","services/api/companion/noPlants.js","pages/companionWidget/companionIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { callEnoviaWebService } from \"../../../utils/helpers\";\r\nconst ENOVIA_BASE_URL = \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\";\r\n\r\nconst ClassDetails = [];\r\n/**\r\n * Generic helper to call Enovia Web Service\r\n * @param {string} method - HTTP method (GET, POST)\r\n * @param {string} url - Full URL for the API call\r\n * @param {string|object} body - Request body as string or object\r\n * @param {object} headers - Headers object\r\n * @returns {Promise<object>} - Parsed JSON response\r\n */\r\n// async function callEnoviaWebService(method, url, body, headers) {\r\n//   const options = {\r\n//     method,\r\n//     headers: {\r\n//       ...headers,\r\n//       \"Content-Type\": \"application/json\"\r\n//     }\r\n//   };\r\n \r\n//   if (body) {\r\n//     options.body = typeof body === \"string\" ? body : JSON.stringify(body);\r\n//   }\r\n \r\n//   const response = await fetch(url, options);\r\n//   if (!response.ok) {\r\n//     throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\r\n//   }\r\n//   return response.json();\r\n// }\r\n \r\n/**\r\n * Get Manufacturing Item identifiers from an engineering item ID\r\n * @param {object} headers\r\n * @param {string} engItemId\r\n * @returns {Promise<string[]>} - Array of manufacturing item identifiers\r\n */\r\nasync function getManufacturingItems(headers, engItemId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/invoke/dsmfg:getMfgItemsFromEngItem`;\r\n  const body = [engItemId];\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n    if (response.output.totalItems > 0 && Array.isArray(response.output.member)) {\r\n        return response.output.member.map(item => item.identifier);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching manufacturing items:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get detailed info for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object|null>} - Details with name, title, type, createdFrom, identifier\r\n */\r\nasync function getMfgItemDetails(headers, identifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}?$mask=dsmfg:MfgItemMask.Details`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Manufacturing Item URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    console.log(\"Response member:\", response.output.member);\r\n    if ( response &&\r\n        response.output &&\r\n        response.output.totalItems > 0 &&\r\n        Array.isArray(response.output.member) &&\r\n        response.output.member.length > 0) {\r\n      const item = response.output.member[0];\r\n      console.log(\"item:\", item);\r\n      return {\r\n        identifier: item.id,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        createdFrom: item.createdFrom || null\r\n      };\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching details for identifier ${identifier}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get plant class IDs assigned to a manufacturing item (filtering where PlantAssignmentClass is true)\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant ClassIDs\r\n */\r\nasync function getPlantClassIDs(headers, mfgIdentifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${mfgIdentifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Plant Class IDs URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0 &&\r\n      response.output.member[0].ClassificationAttributes &&\r\n      Array.isArray(response.output.member[0].ClassificationAttributes.member)\r\n    ) {\r\n      const classMembers = response.output.member[0].ClassificationAttributes.member;\r\n      return classMembers\r\n        .filter(classItem => {\r\n          const plantAssignmentAttr = (classItem.Attributes || []).find(attr => attr.name === \"PlantAssignmentClass\");\r\n          return plantAssignmentAttr && plantAssignmentAttr.value === true;\r\n        })\r\n        .map(classItem => classItem.ClassID);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(`Error fetching plant class IDs for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get Plant title by ClassID\r\n * @param {object} headers\r\n * @param {string} classId\r\n * @returns {Promise<string|null>} - Plant title or null if not found\r\n */\r\nasync function getPlantTitleByClassID(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0\r\n    ) {\r\n      return response.output.member[0].title || null;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching plant title for class ID ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get all assigned plant titles for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant titles\r\n */\r\nasync function getAssignedPlants(headers, mfgIdentifier) {\r\n  try {\r\n    const classIDs = await getPlantClassIDs(headers, mfgIdentifier);\r\n    if (classIDs.length === 0) return [];\r\n \r\n    const plantTitles = [];\r\n    for (const classId of classIDs) {\r\n        const existing = ClassDetails.find(item => item.classid === classId);\r\n        \r\n        if (existing) {\r\n            // If classId is already in ClassDetails, push its title to plantTitles\r\n            plantTitles.push(existing.title);\r\n        } else {\r\n            // If not, fetch title, then push to both ClassDetails and plantTitles\r\n            const title = await getPlantTitleByClassID(headers, classId);\r\n            if (title) {\r\n            ClassDetails.push({ classid: classId, title });\r\n            plantTitles.push(title);\r\n            }\r\n        }\r\n        }\r\n    return plantTitles;\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned plants for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Expand children manufacturing items for a given identifier\r\n * Exclude those of type \"DELFmiFunctionIdentifiedInstance\"\r\n * Add assigned plants info for each child\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object[]>} - Array of child objects with id, name, type, title, and AssignedPlants\r\n */\r\nasync function getMFGChilders(headers, identifier) {\r\n    const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/expand`;\r\n    const body = {\r\n      expandDepth: 1,\r\n      withPath: true\r\n    };\r\n     \r\n \r\n    try {\r\n      const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n \r\n      if (\r\n        response.status &&\r\n        response.output &&\r\n        Array.isArray(response.output.member)\r\n      ) {\r\n        // Filter children (exclude DELFmiFunctionIdentifiedInstance)\r\n        const children = response.output.member.filter(\r\n          item => item.type && item.type !== \"DELFmiFunctionIdentifiedInstance\"\r\n        );\r\n \r\n        // Enrich each child with AssignedPlants\r\n        const enrichedChildren = await Promise.all(\r\n          children.map(async child => {\r\n            const assignedPlants = await getAssignedPlants(headers, child.id);\r\n            return {\r\n              id: child.id,\r\n              type: child.type,\r\n              name: child.name,\r\n              title: child.title || null,\r\n              AssignedPlants: assignedPlants\r\n            };\r\n          })\r\n        );\r\n \r\n        return enrichedChildren;\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching children for identifier ${identifier}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n \r\n \r\n/**\r\n * Main method that prepares the output data\r\n * @param {object} headers\r\n * @param {string} engItemId - Engineering Item ID\r\n * @param {string} droppedMfgID - Manufacturing Item ID to flag as currentObject\r\n * @returns {Promise<object[]>} - Array of objects with manufacturing details and assigned plants and children\r\n */\r\nexport async function prepareDataOutput(headers, droppedMfgID, engItemId) {\r\n  try {\r\n    const identifiers = await getManufacturingItems(headers, engItemId);\r\n    console.log(\"Manufacturing Identifiers:\", identifiers);\r\n    if (identifiers.length === 0) return [];\r\n \r\n    const detailsArray = await Promise.all(\r\n      identifiers.map(id => getMfgItemDetails(headers, id))\r\n    );\r\n\r\n    console.log(\"Manufacturing Details:\", detailsArray);\r\n \r\n    const items = detailsArray.filter(item => item !== null);\r\n \r\n    // Determine which items are parents (no createdFrom reference from others)\r\n    const createdFromSet = new Set(\r\n      items\r\n        .map(item => item.createdFrom)\r\n        .filter(Boolean)\r\n        .map(cf => cf.split(\" \")[0])\r\n    );\r\n\r\n    console.log(\"Created From Set:\", createdFromSet);\r\n \r\n    const result = [];\r\n \r\n    for (const item of items) {\r\n      const isParent = createdFromSet.has(item.name);\r\n      const currentObject = item.identifier === droppedMfgID;\r\n      console.log(`Processing item: ${item.name}, isParent: ${isParent}, currentObject: ${currentObject}`);\r\n \r\n      // Get assigned plants for each manufacturing item\r\n      const assignedPlants = await getAssignedPlants(headers, item.identifier);\r\n      console.log(`Assigned Plants for Hello:`, assignedPlants);\r\n \r\n      // Expand children if parent or currentObject\r\n      let children = [];\r\n      if (isParent || currentObject) {\r\n        children = await getMFGChilders(headers, item.identifier);\r\n      }\r\n \r\n      result.push({\r\n        identifier: item.identifier,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        isParent,\r\n        currentObject,\r\n        AssignedPlants: assignedPlants,\r\n        children\r\n      });\r\n    }\r\n\r\n    console.log(\"Prepared Data Output:\", result);\r\n \r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Error in prepareDataOutput:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n \r\n//Plants for popup\r\nexport async function preparePlantLists(preparedDataOutput, engItemId) {\r\n    // 1. Get plants assigned to the engineering item\r\n    const engItemPlants = await getAssignedPlants(engItemId);\r\n    console.log(\"Engineering Item Plants:\", engItemPlants);\r\n \r\n    // 2. Find the current MFG item (where currentObject === true)\r\n    const currentMfgItem = preparedDataOutput.find(mfg => mfg.currentObject === true);\r\n \r\n    if (!currentMfgItem) {\r\n      console.warn(\"Current MFG item not found in prepared data output.\");\r\n      return {\r\n        AssignedPlants: [],\r\n        AvailablePlants: engItemPlants\r\n      };\r\n    }\r\n \r\n    // Assigned plants of current MFG\r\n    const assignedPlants = currentMfgItem.AssignedPlants || [];\r\n \r\n    // 3. Collect plants assigned to all other MFG items except the parent MFG item\r\n    const otherPlants = [];\r\n \r\n    preparedDataOutput.forEach(mfgItem => {\r\n      if (!mfgItem.isParent) {  // exclude parent MFG plants\r\n        const plants = mfgItem.AssignedPlants || [];\r\n        plants.forEach(plant => {\r\n          if (!otherPlants.includes(plant)) {\r\n            otherPlants.push(plant);\r\n          }\r\n        });\r\n      }\r\n    });\r\n \r\n    // 4. Calculate available plants: engItemPlants - otherPlants\r\n    const availablePlants = engItemPlants.filter(plant => !otherPlants.includes(plant));\r\n\r\n    console.log(\"Assigned Plants:\", assignedPlants);\r\n    console.log(\"Available Plants:\", availablePlants);\r\n\r\n\r\n    return {\r\n      AssignedPlants: assignedPlants,\r\n      AvailablePlants: availablePlants\r\n    };\r\n  }","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/companion/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/companion/updateClasses\";\r\nimport {prepareDataOutput, preparePlantLists} from \"../services/api/companion/processPlantsService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n  setCompanionObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/companion/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handleCompanion = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // // Step 1: Fetch user group collaboration spaces\r\n        // const userGroupCollab = await getUserGroupCollab(\r\n        //   headers,\r\n        //   objectId,\r\n        //   email\r\n        // );\r\n        // console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        // let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] All CollabSpaces:\",\r\n        //   allCollabSpaces\r\n        // );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        // let allPlants = [];\r\n        // if (allCollabSpaces.length > 0) {\r\n        //   allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        //   console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        // }\r\n\r\n        //here we have to get from ScopeLined EngineeringItem. for companion widget---->\r\n        let allPlants = [];\r\n        const scopeLinekdData = await getScopedItms(objectId,headers);\r\n        console.log(\"[Use Companion] Scope Linked Data:\", scopeLinekdData);\r\n        if(scopeLinekdData.identifier){\r\n          allPlants = await getPlantClasses(headers, scopeLinekdData.identifier);\r\n\r\n          const prepareData = await prepareDataOutput(headers, objectId, scopeLinekdData.identifier);\r\n\r\n          console.log(\"[Use Companion] Prepare Data Output:\", prepareData);\r\n          // Store the prepared product/plant hierarchy in Redux so it can be accessed by any component that needs the product children structure\r\n          dispatch(setProductChildren(prepareData)); //\r\n          \r\n          const plantLists = await preparePlantLists(prepareData, scopeLinekdData.identifier);\r\n          console.log(\"[Use Companion] Plant Lists:\", plantLists);\r\n          // Store AssignedPlants and AvailablePlants in Redux for use in table and popup\r\n          dispatch(setCompanionObjectData({\r\n            initialAssignedPlants: plantLists.AssignedPlants,\r\n            uniquePlants: plantLists.AvailablePlants\r\n          }));\r\n        }\r\n\r\n        \r\n\r\n        // // Step 3: Fetch assigned plants if there are any\r\n        // if (allPlants.length > 0) {\r\n        //   const plants = await fetchAssignedPlants(\r\n        //     allPlants,\r\n        //     headers,\r\n        //     objectId,\r\n        //     state,\r\n        //     type\r\n        //   );\r\n        //   console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n        //   if (plants.success) {\r\n        //     dispatch(setPlantObjectData(plants.data.plantData));\r\n        //     console.log(\"[Use Plant Assignment] Plant Object Data:\", plants.data.plantData);\r\n        //     dispatch(setHeaders(headers));\r\n        //   } else {\r\n        //     console.error(\"Failed to fetch plant data.\");\r\n        //   }\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        // }\r\n\r\n        // // Step 4: Fetch Product Children based on type\r\n        // let getProductChildren = {};\r\n        // // TODO : Need Update for companion widget\r\n\r\n        //   const typeList = [\"CreateKit\", \r\n        //     \"CreateAssembly\", \r\n        //     \"CreateMaterial\", \r\n        //     \"Provide\", \r\n        //     \"ProcessContinuousProvide\",\r\n        //     \"Raw_Material\"];\r\n        // if (typeList.includes(type)) {\r\n        //   getProductChildren = { success: true, data: [] };\r\n        // } else {\r\n        //   getProductChildren = await fetchProductChildren(\r\n        //     headers,\r\n        //     objectId,\r\n        //     type\r\n        //   );\r\n        // }\r\n\r\n        // console.log(\"Type After:\", type);\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] Product Children:\",\r\n        //   getProductChildren\r\n        // );\r\n\r\n        // if (getProductChildren.success) {\r\n        //   dispatch(setProductChildren(getProductChildren.data));\r\n        // }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handleCompanion };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getPlantClasses(headers, objectId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (itemResponse.status && itemResponse.output) {\r\n      const classExtensions = itemResponse.output.member[0].ClassificationAttributes?.member || [];\r\n \r\n      const result = [];\r\n \r\n      for (const classItem of classExtensions) {\r\n        const id = classItem.ClassID;\r\n        const attributes = classItem.Attributes || [];\r\n \r\n        const plantAssignmentClass = attributes.find(attr => attr.name === 'PlantAssignmentClass')?.value;\r\n \r\n        if (plantAssignmentClass) {\r\n          const title = await getClassTitleById(headers, id);\r\n          result.push({\r\n            id,\r\n            title\r\n          });\r\n        }\r\n      }\r\n \r\n      return result;\r\n    } else {\r\n      console.log(`No valid response for object ID ${objectId}`);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${objectId}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\nasync function getClassTitleById(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (response.status && response.output && response.output.member && response.output.member.length > 0) {\r\n      const classInfo = response.output.member[0];\r\n      return classInfo.title || null;\r\n    } else {\r\n      console.log(`No class found for classId ${classId}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching class title for classId ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n  MSG_INVALID_MFG_TYPES,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanion } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanion(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanion]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            // \"VPMReference\",\r\n            // \"Raw_Material\",\r\n            // \"Change Action\",\r\n            \"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\"\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_MFG_TYPES);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanionDropableArea;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"type in datahelpers\", type);\r\n  console.log(\"tableData in datahelpers\", tableData);\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data || \"N/A\",\r\n        // Seq: data?.Seq || \"1\",\r\n        // Status: data?.PlantStatus || \"Pending\",\r\n        // \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        // \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        // Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        // \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        // \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        // \"ERP Status\": \"Active\" || \"N/A\",\r\n        // \"ERP Export\": \"Yes\" || \"N/A\",\r\n        // \"Lead Plant\": false,\r\n        // MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        // \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    // { accessorKey: \"Seq\", header: \"Seq\" },\r\n    // { accessorKey: \"Status\", header: \"Status\" },\r\n    // { accessorKey: \"Change\", header: \"Change\" },\r\n    // { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    // { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    // { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    // { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    // {\r\n    //   accessorKey: \"MBom\",\r\n    //   header: \"MBom\",\r\n      \r\n    // },\r\n    // { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    // { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    // { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    // { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./companionWidget.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled,\r\n  setIsFileInputDisabled \r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    setIsFileInputDisabled(false); // ✅ Only here\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n      setIsFileInputDisabled(true);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./comapnaiondataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/companion/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/companion/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/companion/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/companion/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useCompanionDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useCompanionDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"CreateKit\",  \"CreateAssembly\", \"CreateMaterial\",  \"Provide\", \"ProcessContinuousProvide\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.CompanionObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.CompanionObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import {fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const noPlants = async (headers, type, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchDataWithUrl = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    \r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=NoClassification`;\r\n\r\n        const collabspaceResponse = await fetchDataWithUrl(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === \"NoClassification\"\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n            const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n            const classResponse = await fetchDataWithUrl(libraryDataURL);\r\n\r\n            const noClassChild = classResponse.member[0]?.ChildClasses?.member?.find(child => child.title === \"No Class\");\r\n            const Classid = noClassChild?.id;\r\n            if (Classid) {\r\n                const classifyUrl =\r\n                  \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n             \r\n                const classifybody = {\r\n                  id: objectId, // Use objectId from Redux\r\n                  type: type, // Use type from Redux\r\n                  classes: [Classid],\r\n                  mode: \"classifyParent\",\r\n                };\r\n             \r\n                console.log(\"Classify API Body:\", classifybody);\r\n             \r\n                try {\r\n                  const classifyResponse = await fetchData(\r\n                    \"POST\",\r\n                    classifyUrl,\r\n                    classifybody,\r\n                   \r\n                  );\r\n                  console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n                } catch (error) {\r\n                  console.error(\"Error in Classify API Call:\", error);\r\n                }\r\n              }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./CompanionWidget\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","onConfirm","CustomModal","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","getAllPlants","async","allCollabSpaces","headers","objectId","ENOVIA_BASE_URL","process","UserGroupClasses","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","concat","collabSpace","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","filter","plant","some","userClass","all","updateClasses","allPlants","sLatestID","identifier","revurl","ret","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","getLatestRevision","warn","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","ClassificationAttributes","classItem","Attributes","attr","name","value","updatedAttributes","String","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","acc","secondUrl","secondResponse","arguments","undefined","body","axios","ClassDetails","getPlantTitleByClassID","totalItems","getAssignedPlants","mfgIdentifier","classIDs","plantAssignmentAttr","getPlantClassIDs","plantTitles","existing","classid","getMFGChilders","expandDepth","withPath","assignedPlants","child","AssignedPlants","prepareDataOutput","droppedMfgID","engItemId","identifiers","getManufacturingItems","detailsArray","createdFrom","getMfgItemDetails","items","createdFromSet","Set","Boolean","cf","result","isParent","has","currentObject","fetchCsrfToken","securityContext1","window","widget","getValue","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","useCompanionWidget","showErrorToast","dispatch","useDispatch","email","handleCompanion","setParentDetailsLoading","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","_response$output$resu","ancestor","mfgDetails","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","itemResponse","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","allPlantsRemovedAttr","classification","plantName","erpStatus","isPlantClass","flowDownCA","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","setCAItemDetails","setIsMFGCA","setCAHeaders","scopeLinekdData","_itemResponse$output$3","classExtensions","_attributes$find","getClassTitleById","getPlantClasses","prepareData","setProductChildren","plantLists","preparedDataOutput","engItemPlants","currentMfgItem","mfg","AvailablePlants","otherPlants","mfgItem","availablePlants","preparePlantLists","setCompanionObjectData","initialAssignedPlants","uniquePlants","getCaDetails","objectID","resObejct","proposedChangesArray","CADetails","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","lang","ghostMode","url2","bd","responseMode","ids","_objectSpread","response2","pattern","objectsByPatterns","itm","url3","response3","proposedChange","action","whats","what","operations","toLowerCase","success","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","ScopeEngItem","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_MFG_TYPES","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","marginRight","display","alignItems","color","fontWeight","AiOutlineClose","cursor","marginLeft","getTableData","tableData","mappedData","ItemName","Plant","Change","localeCompare","uniqueColumns","header","extractIdsFromTitles","newClasses","itemTitle","replace","matchedPlant","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","declassifyResponse","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","Seq","Status","CAStatus","MBom","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","callManufacturingCAApi","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","CAHeaders","credentials","credentialsParts","companyName","allPlantsData","manufacturingCABody","excelData","uniquePlantTitles","itemName","toString","trim","plantsList","add","parentPlants","plantTitle","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","event","stopPropagation","navigator","clipboard","writeText","background","border","FaRegCopy","CompanionWidget","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","initialTableData","setInitialTableData","confirmedRemove","_droppedObjectData$in5","_droppedObjectData$in6","selectedTitles","selectedTableRows","updatedTableData","prevKey","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","fetchDataWithUrl","_classResponse$member","_classResponse$member2","_classResponse$member3","noClassChild","Classid","noPlants","setPlantObjectData","plantObjectData","plantId","extractPlantData","plantData","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","uniquePlant","CompanionObjectData","asignedPlant","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","updateTableData","updatedData","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classitem","MBOM","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","_allPlants$find4","initialAssignedClasses","AllClasses","productChilds","fetchOOTBData","NotPropagableChilds","prodChild","ErrorObj","prodchilds","notPropagableChild","childId","childName","childs","Finalmessage","every","childTitles","errorItem","updateBody","propagateClasses","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","saveData","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","right","top","fontSize","formattedFinalMessage","autoClose","finalobj","errorObj","processErrorObj","prev","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","parse","tableColumns","plantList","tooltipText","ConfirmationModal","flexDirection","justifyContent","DragAndDropComponent","files","validExtensions","from","file","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","parentDetails","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","missingIn","Childs","classTitle","filteredNewClasses","handleAddData","erroredPlants","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","originalPlant","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}