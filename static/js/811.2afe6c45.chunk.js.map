{"version":3,"file":"static/js/811.2afe6c45.chunk.js","mappings":"iUAEO,MCAMA,EAAeC,MAAOC,EAAiBC,EAASC,KAC3D,IACE,MAAMC,EAAkBC,4DACxB,IAAIC,EAAmB,GACvBC,QAAQC,IAAI,qCAAsCP,GAClDM,QAAQC,IAAI,gCAAiCN,GAC7C,MAAMO,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYX,SACT,IAAIY,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRf,UACAgB,KAAM,OACNC,WAAaC,IACXb,QAAQC,IAAI,qBAAsBY,GAClCP,EAAQO,EAAS,EAEnBC,UAAYC,IACVf,QAAQe,MAAM,kBAAmBA,GACjCR,EAAOQ,EAAM,GAEf,IAKAC,EAAoBtB,EAAgBuB,KAAIxB,UAC5C,IAAK,IAADyB,EAAAC,EACF,MAAMC,EAAc,GAAAC,OAAMxB,EAAe,gEAAAwB,OAA+DC,GAGlGC,EAAsC,QAA7BL,SADmBd,EAAUgB,IACNI,cAAM,IAAAN,GAE3C,QAF2CC,EAA1BD,EAA4BO,MAC3CC,GAASA,EAAKC,QAAUL,WAC1B,IAAAH,OAF2C,EAA1BA,EAEfS,GAIH,GAFA5B,QAAQC,IAAI,qCAAsCsB,GAE9CA,EAAW,CACb,MAAMM,EAAc,GAAAR,OAAMxB,EAAe,8CAAAwB,OAA6CE,EAAS,8CAEzFO,QAAsB1B,EAAUyB,IAEhC,OAAEL,GAAWM,EAEnB,GAAIN,GAAUA,EAAOO,OAAS,EAAG,CAAC,IAADC,EAAAC,EAC/BjC,QAAQC,IAAI,uCAAwCuB,GAEpD,MAAMU,EAAyB,QAAZF,EAAGR,EAAO,UAAE,IAAAQ,OAAA,EAATA,EAAWG,aAEjC,IAAiB,OAAbD,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAeV,cAAM,IAAAS,OAAR,EAAbA,EAAuBF,QAAS,EAAG,CAAC,IAADK,EACrC,MAAMC,EAAiD,QAAvCD,EAAGF,EAAcV,OAAO,GAAGW,oBAAY,IAAAC,OAAA,EAApCA,EAAsCZ,OAEzD,GAAIa,GAAcA,EAAWN,OAAS,EAAG,CAEvC,MAAMO,EAAmBD,EAAWE,QACjCC,IACEzC,EAAiB0C,MACfC,GAAcA,EAAUd,KAAOY,EAAMZ,OAK5C7B,EAAmB,IAAIA,KAAqBuC,EAC9C,CACF,CACF,CACF,CACF,CAAE,MAAOvB,GAEP,MADAf,QAAQe,MAAM,0BAA2BO,EAAaP,GAChDA,CACR,KAIF,aADMV,QAAQsC,IAAI3B,GACXjB,CACT,CAAE,MAAOgB,GAEP,MADAf,QAAQe,MAAM,sCAAuCA,GAC/CA,CACR,GC/EW6B,EAAuBnD,MAAOoD,EAAYlD,KACrD,IAAImD,EAAY,CAAEC,MAAO,IACzB/C,QAAQC,IAAI,iCACZ,MAAMJ,EAAkBC,4DAExB,IACE,MAAMI,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYX,SACT,IAAIY,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRf,UACAgB,KAAM,OACNC,WAAaC,IACXb,QAAQC,IAAI,qBAAsBY,GAElCP,EAAQO,EAAS,EAEnBC,UAAYC,IACVf,QAAQe,MAAM,kBAAmBA,GACjCR,EAAOQ,EAAM,GAEf,IAKN,IAAIiC,EAAS,GAAA3B,OAAMxB,EAAe,uDAAAwB,OAAsDwB,GACxF,MAAMI,QAAuB7C,EAAU4C,GACjCE,IAA2B,OAAdD,QAAc,IAAdA,OAAc,EAAdA,EAAgBE,OAAQ,IAAI1B,MAAKC,GAAsB,UAAdA,EAAKf,OAEjE,GAAIuC,EAAW,CACX,MAAME,EAAUF,EAAUG,WACpBC,EAAcJ,EAAUK,MACxBC,EAAQ,GAAAnC,OAAMxB,EAAe,sCAAAwB,OAAqC+B,GAClEK,QAAqBrD,EAAUoD,GAC/BE,IAA0B,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcN,OAAQ,IAAI1B,MAAKC,GAAsB,kBAAdA,EAAKf,OAChE,GAAG+C,EAAW,CACV,MAAMC,EAAUD,EAAWL,WACrBO,EAAK,GAAAvC,OAAMxB,EAAe,4CAAAwB,OAA2CsC,EAAO,qCAC5EE,QAAmBzD,EAAUwD,GACnC,GAAIC,EACA,IAAK,MAAMnC,KAAQmC,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdpC,EAAKf,KAA0B,CACjC,MAAMoD,EAAQ,GAAA1C,OAAMxB,EAAe,4CAAAwB,OAA2CK,EAAK2B,YAC7EW,QAAsB5D,EAAU2D,GAClCC,GACAlB,EAAUC,MAAMkB,KAAK,CACnBC,QAASF,EAAcrC,MACvBwC,QAASH,EAAcT,OAG/B,CAGV,CACAT,EAAoB,SAAIQ,EACxBR,EAAoB,SAAID,CAC5B,KAAQ,CAAC,IAADuB,EACN,MAAMC,EAASxB,EAAWyB,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,KAEvD,IAAIC,EAAW,GAAApD,OAAMxB,EAAe,mEAAAwB,OAAkEgD,GACtG,MACMV,EAA0C,QAAnCS,SADkBhE,EAAUqE,IACRC,aAAa,UAAE,IAAAN,OAAA,EAAhCA,EAAkCf,WAC3CO,EAAK,GAAAvC,OAAMxB,EAAe,4CAAAwB,OAA2CsC,EAAO,qCAC5EE,QAAmBzD,EAAUwD,GACjC,GAAIC,EACF,IAAK,MAAMnC,KAAQmC,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdpC,EAAKf,KAA0B,CACjC,MAAMoD,EAAQ,GAAA1C,OAAMxB,EAAe,4CAAAwB,OAA2CK,EAAK2B,YAC7EW,QAAsB5D,EAAU2D,GAClCC,GACAlB,EAAUC,MAAMkB,KAAK,CACnBC,QAASF,EAAcrC,MACvBwC,QAASH,EAAcT,OAG/B,CAGJT,EAAoB,SAAI,WACxBA,EAAoB,SAAID,CAC5B,CAEA,OADA7C,QAAQC,IAAI,mBAAoB6C,GACzBA,CACT,CAAE,MAAO/B,GAEP,MADAf,QAAQe,MAAM,qBAAsBA,GAC9BA,CACR,G,cCxFK,MAAM4D,EAAgBlF,MACzBE,EACAiF,EACAhF,EACA2D,EACA5C,KAEA,IACE,MAAMd,EAAkBC,4DAClB+E,QAsIZpF,eAAiC4D,EAAY1C,EAAMhB,GAC/C,MAAME,EAAkBC,4DAClBgF,EAAM,GAAAzD,OAAMxB,EAAe,+CACjC,IAAIkF,EAAM,GACV,IACE,MAKMC,EAAO,CACX7B,KAAM,CACJ,CACEvB,GAAIyB,EACJA,WAAYA,EACZ1C,KAAMA,EACNsE,OAAQpF,EACRqF,aAXK,iBAATvE,EAAuB,+CAAAU,OAC4BgC,GAAU,6CAAAhC,OACZgC,MAe7CxC,QAAiBsE,EAAAA,EAAAA,IACrB,OACAL,EAEAE,EACArF,GAIF,GAAIkB,EAASuE,QAAUvE,EAASwE,OAAQ,CAItC,MAAMC,EAAWzE,EAASwE,OAAOE,QAAQ,GAAGD,SAE5C,IAAK,MAAME,KAAWF,EAClB,GAAIE,EAAQnC,aAAeA,IACvBrD,QAAQC,IAAI,iCAAkCoD,GAC1CoC,MAAMC,QAAQF,EAAQG,YAAcH,EAAQG,UAAU5D,OAAS,GAAG,CAClEgD,EAAMS,EAAQG,UAAU,GAAG/D,GAC3B5B,QAAQC,IAAI,eAAgB8E,GAC5B,KACJ,CAGR,OAAOA,CACT,CAIE,OAHA/E,QAAQe,MACN,qEAEKgE,CAEX,CAAE,MAAOhE,GAEP,OADAf,QAAQe,MAAM,wCAADM,OAAyCgC,EAAU,KAAKtC,GAC9DgE,CACT,CACF,CAjM4Ba,CAAkBhG,EAAUe,EAAMhB,GAG1D,GAFAK,QAAQC,IAAI,oCAAqC4E,GAE/B,KAAdA,EAyHF,OAFA7E,QAAQ6F,KAAK,gCAEN,GAzHa,CACpB,MAAMC,EAAiB,GAAAzE,OAAMxB,EAAe,mEAAAwB,OAAkEwD,EAAS,6CAEjHkB,QAAsBZ,EAAAA,EAAAA,IAAqB,MAAOW,EAAmB,GAAInG,GAE/E,IAAIoG,EAAcX,SAAUW,EAAcV,OA+GxC,OAFArF,QAAQe,MAAM,gDAEP,GA/GyC,CAAC,IAADiF,EAAAC,EAChD,MAIMV,IAH0B,QAA9BS,EAAAD,EAAcV,OAAO7D,OAAO,UAAE,IAAAwE,GAA0B,QAA1BC,EAA9BD,EAAgCE,gCAAwB,IAAAD,OAA1B,EAA9BA,EAA0DzE,SAAU,IAI/De,QAAO4D,GACJA,EAAUC,WAAW3D,MACrB4D,GAAsB,yBAAdA,EAAKC,OAAkD,IAAfD,EAAKE,UAGxDtF,KAAIkF,IAED,MAAMK,EAAoBL,EAAUC,WAAWnF,KAAIoF,GAC7B,QAAdA,EAAKC,KACA,CACLA,KAAMD,EAAKC,KACXC,MAAOE,OAAOC,OAAOL,EAAKE,OAAS,IAEd,gBAAdF,EAAKC,KACP,CACLA,KAAMD,EAAKC,KACXC,MAAO,WAEa,WAAdF,EAAKC,MAAmC,yBAAdD,EAAKC,KAChC,CACLA,KAAMD,EAAKC,KACXC,MAAOF,EAAKE,OAGP,CACLD,KAAMD,EAAKC,KACXC,MAAO,MAKf,MAAO,CACPI,QAASR,EAAUQ,QACnBP,WAAYI,EACX,IAMX,GAHAxG,QAAQC,IAAI,4BAA6BsF,KAGrCA,EAAQxD,OAAS,GA4DnB,OAFA/B,QAAQ6F,KAAK,wDAEN,GA5De,CACtB,MAAMe,EAAW,+FAEXC,EAAe,CACnBjF,GAAIhC,EACJe,KAAMA,EACNmG,QAASvB,EAAQtE,KAAIS,GAAQA,EAAKiF,UAClCI,KAAM,kBAGR,IACE,MAAMC,QAAyB5G,EAAU,OAAQwG,EAAaC,GAC9D7G,QAAQC,IAAI,oBAAqBgH,KAAKC,UAAUF,IAGhD,MAAMG,EAAmB,CACvBlC,OAAQpF,EACRc,KAAM,qCACN0C,WAAYzD,EACZsF,aAAa,iEAAD7D,OAAmEzB,IAW3EwH,EAAU,CACd,CACED,mBACAE,yBAX6B9B,EAAQtE,KAAIqG,IAAG,CAC9CC,QAASD,EAAIX,QACba,WAAYF,EAAIlB,WAAWqB,QAAO,CAACC,EAAKrB,KACtCqB,EAAIrB,EAAKC,MAAQD,EAAKE,MACfmB,IACN,CAAC,SAUN1H,QAAQC,IAAI,wCAAyCgH,KAAKC,UAAUE,IAGpE,MAAMO,EAAS,0GAAAtG,OAA6GzB,GACtHgI,QAAuBxH,EAAU,QAASuH,EAAWP,GAI3D,OAFApH,QAAQC,IAAI,4BAA6BgH,KAAKC,UAAUU,IAEjDrC,CAOT,CAAE,MAAOxE,GAGP,OAFAf,QAAQe,MAAM,4CAA6CA,GAEpD,EACT,CACF,CAKF,CAKF,CAKF,CAAE,MAAOA,GAGP,OAFAf,QAAQe,MAAM,qCAAsCA,GAE7C,EACT,GAiEK,MAAMX,EAAYX,iBAMnB,IALJiB,EAAMmH,UAAA9F,OAAA,QAAA+F,IAAAD,UAAA,GAAAA,UAAA,GAAG,MACTpH,EAAGoH,UAAA9F,OAAA,EAAA8F,UAAA,QAAAC,EACHC,EAAIF,UAAA9F,OAAA,QAAA+F,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAIP7H,QAAQC,IAAI,gBAAiBQ,GAC7BT,QAAQC,IAAI,cACZD,QAAQC,IAAI,gBAAiBgH,KAAKC,UAAUa,EAAM,KAAM,IAExD,IACE,MAAMlH,QAAiBmH,EAAAA,EAAAA,GAAM,CAC3BvH,MACAC,SAKAyC,KAAM4E,IAIR,OADA/H,QAAQC,IAAI,qBAAsBY,EAASsC,MACpCtC,CACT,CAAE,MAAOE,GAEP,MADAf,QAAQe,MAAM,kBAAmBA,GAC3BA,CACR,CACF,EC7MIlB,EAAkBC,4DAgOxB,EA/N2BmI,KACzB,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,KACrBC,GAAWC,EAAAA,EAAAA,MAGjB,IAAIC,EAAQC,OAAOC,OAAOC,SAAS,SACnCzI,QAAQC,IAAI,+BAAgCqI,GAsN5C,MAAO,CAAEI,gBApNejJ,MAAO6B,EAAaiC,EAAO3D,EAAUe,KAC3D,IACEyH,GAASO,EAAAA,EAAAA,KAAwB,IAGjC,MAAMhJ,OC1CkBF,WAC5B,IACE,IAAImJ,EAAmBL,OAAOC,OAAOC,SAAS,eAC9C,MAAMvI,QAAgBC,EAAAA,EAAAA,MACtBH,QAAQC,IAAI,uBAAwB2I,GACpC,MAAMC,EAAU/I,6GAEVe,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBqI,EAAS,CACpCnI,OAAQ,MACRC,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGEuI,EAAYjI,EAASkI,KAAKzC,KAC1B0C,EAAYnI,EAASkI,KAAKxC,MAC1B0C,EAAwB,kBACxBC,EAAuBN,EAM7B,MAJgB,CACd,CAACE,GAAYE,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAOnI,GAEP,YADAf,QAAQe,MAAM,gCAAiCA,EAEjD,GDa0BoI,GACtB,IAAKxJ,EAEH,YADAuI,EAAekB,EAAAA,IAGjBpJ,QAAQC,IAAI,gCAAiCN,GAE7C,IAAI0J,EAAc,GAGlB,GAAa,kBAAT1I,EAA0B,CAC5B,MAAM2I,EAAkB7J,UAEtB,MAAMmF,QAAkBpF,EACtB,CAAC8B,GACD3B,GAKF,OAFAK,QAAQC,IAAI,yBAA0B2E,GACtCwD,GAASmB,EAAAA,EAAAA,IAAe3E,IACjBA,CAAS,EAElB,IAAI4E,GAAU,EACdxJ,QAAQC,IAAI,oCACZ,MAAMwJ,EAAwBhK,UAC5B,MAAMiK,EAAK,GAAArI,OAAMxB,EAAe,4CAAAwB,OAA2CzB,EAAQ,8CAC7EiB,QAAiBsE,EAAAA,EAAAA,IACrB,MACAuE,EACA,GACA/J,GAIF,GAFAK,QAAQC,IAAI,mCAAoCY,GAE5CA,EAASuE,QAAUvE,EAASwE,OAAQ,CACtC,MAAMsE,EAAkB9I,EAASwE,OAAOsE,gBAAgB1I,KACrD2I,GAAmBA,EAAeC,MAAMxG,aAErCyG,EACJjJ,EAASwE,OAAO0E,gBAAgB9I,KAAIxB,UAClC,IAAIuK,EAASC,EAAOJ,MAAMxG,WACtB6G,EAAWD,EAAOJ,MAAMlJ,KAC5B,GACc,gBAAZuJ,GACY,gBAAZA,GACY,kBAAZA,GACY,WAAZA,GACY,kBAAZA,EACA,CACF,GAAsB,eAAlBD,EAAOE,OAAyB,CAClC,MAAMtF,QAgRxBpF,eAAiC4D,EAAY1C,EAAMhB,GACjD,MAAMmF,EAAM,GAAAzD,OAAMxB,EAAe,+CAC3BkF,EAAM,GACZ,IACE,MAAMG,EACK,iBAATvE,EAAuB,+CAAAU,OAC4BgC,GAAU,6CAAAhC,OACZgC,GAE7C2B,EAAO,CACX7B,KAAM,CACJ,CACEvB,GAAIyB,EACJA,WAAYA,EACZ1C,KAAMA,EACNsE,OAAQpF,EACRqF,aAAcA,KAMdrE,QAAiBsE,EAAAA,EAAAA,IACrB,OACAL,EAEAE,EACArF,GAIF,IAAIkB,EAASuE,SAAUvE,EAASwE,OAiB9B,OAHArF,QAAQe,MACN,qEAEKgE,EAjB+B,CAAC,IAADqF,EACtC,MAAM9E,GAAqC,QAA1B8E,EAAAvJ,EAASwE,OAAOE,QAAQ,UAAE,IAAA6E,OAAA,EAA1BA,EAA4B9E,WAAY,GAEzD,IAAK,MAAMjB,KAAUiB,EACnB,GACEjB,EAAOsB,WACPtB,EAAOsB,UAAUlD,MACd4H,GAAaA,EAAShH,aAAeA,IAGxC,OAAOgB,EAAOzC,EAGpB,CAMF,CAAE,MAAOb,GAEP,OADAf,QAAQe,MAAM,wCAADM,OAAyCgC,EAAU,KAAKtC,GAC9DgE,CACT,CACF,CAtU0Ca,CACtBoE,EACAE,EACAvK,GAEEgK,EAAgBW,SAASzF,KAC3BmF,EAASnF,EAEb,CACA,GACe,iBAAbqF,GACa,iBAAbA,EACA,CACAV,GAAU,EACV,MAAMe,QAyTxB9K,eAA6B4D,EAAY1D,GACvC,IAAIc,EAAM,GAEVA,EAAG,GAAAY,OAAMxB,EAAe,8CAAAwB,OAA6CgC,EAAU,uBAE/E,IACE,MAAMmH,QAAqBrF,EAAAA,EAAAA,IAAqB,MAAO1E,EAAK,GAAId,GAEhE,OAAI6K,EAAapF,QAAUoF,EAAanF,OAC/B,CACLhC,WAAYmH,EAAanF,OAAO7D,OAAO,GAAGiJ,aAAapH,WACvD1C,KAAM6J,EAAanF,OAAO7D,OAAO,GAAGiJ,aAAa9J,OAGnDX,QAAQC,IAAI,oCAADoB,OAAqCgC,IACzC,CAAC,EAEZ,CAAE,MAAOtC,GAEP,OADAf,QAAQe,MAAM,mCAADM,OAAoCgC,EAAU,KAAKtC,GACzD,CAAC,CACV,CACF,CA9U2C2J,CAAcV,EAAQrK,GAC/CK,QAAQC,IAAI,mBAAoBsK,GAChCP,EAASO,EAAWlH,WACpB6G,EAAWK,EAAW5J,IACxB,CACA,QAAemH,IAAXkC,QAAqClC,IAAboC,EAC1B,IAAK,IAADS,EAAAC,EAAAC,EAAAC,EAKF,MAAMC,QA6N1BtL,eAA8B4D,EAAY6G,EAAUvK,GAClD,IAAIc,EAAM,GAIRA,EADe,iBAAbyJ,EACC,GAAA7I,OAAMxB,EAAe,gDAAAwB,OAA+CgC,GAGpE,GAAAhC,OAAMxB,EAAe,8CAAAwB,OAA6CgC,EAAU,qCAGjF,IACE,MAAMmH,QAAqBrF,EAAAA,EAAAA,IAAqB,MAAO1E,EAAK,GAAId,GAEhE,OAAI6K,EAAapF,QAAUoF,EAAanF,OAC/BmF,EAAanF,QAEpBrF,QAAQC,IAAI,oCAADoB,OAAqCgC,IACzC,CAAC,EAEZ,CAAE,MAAOtC,GAEP,OADAf,QAAQe,MAAM,mCAADM,OAAoCgC,EAAU,KAAKtC,GACzD,CAAC,CACV,CACF,CArP2CiK,CAAehB,EAAQE,EAAUvK,GAElDsL,GADgB,OAARF,QAAQ,IAARA,GAAgB,QAARJ,EAARI,EAAUvJ,cAAM,IAAAmJ,GAAK,QAALC,EAAhBD,EAAmB,UAAE,IAAAC,GAArBA,EAAuBrH,YAyIzD9D,eAAkC4D,EAAY1D,EAAQiF,EAAUrB,EAAO5C,GACrE,MAAMuK,EAAc,GACpB,IAAIC,GAAa,EACjB,MAAM1K,EAAG,GAAAY,OAAMxB,EAAe,mEAAAwB,OAAkEgC,EAAU,6CAE1G,IAAK,IAAD+H,EAAAC,EACF,MAAMb,QAAqBrF,EAAAA,EAAAA,IAAqB,MAAO1E,EAAK,GAAId,GAChEK,QAAQC,IAAI,2BAADoB,OAA4BgC,EAAU,KAAKmH,GAEtD,IAAIc,GAA+C,QAA7BF,EAAAZ,EAAanF,OAAO7D,OAAO,UAAE,IAAA4J,GAA0B,QAA1BC,EAA7BD,EAA+BlF,gCAAwB,IAAAmF,OAA1B,EAA7BA,EAAyD7J,SAAU,GAEzF8J,EAAkBA,EAAgB/I,QAAOgJ,IACvC,MAAMC,EAAsBD,EAAInF,WAAW3E,MAAKgK,GAAgB,yBAAXA,EAAEnF,OACjDoF,EAAuBH,EAAInF,WAAW3E,MAAKgK,GAAgB,qBAAXA,EAAEnF,OACxD,OAAsC,KAAZ,OAAnBkF,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBjF,SAAkD,KAAZ,OAApBmF,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBnF,MAAc,IAIvD,IAAzB+E,EAAgBvJ,SAClBuJ,QAAyB3G,EACvBhF,EACAiF,EACAvB,EACAE,EACA5C,IAIJwK,EAAYG,EAAgB7I,MAAK8I,IAC/B,MAAMlF,EAAOkF,EAAInF,WAAW3E,MAAKgK,GAAgB,qBAAXA,EAAEnF,OACxC,OAAuB,KAAZ,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,MAAc,IAI3B+E,EAAgBvJ,OAAO,EAEvBuJ,EAAgBK,SACbC,IACC,MAAMrE,EAAUqE,EAAejF,QAC/B,IAAIkF,EAAY,KACZC,EAAY,KACZC,GAAe,EACflJ,EAAa,GAcE,IAADmJ,GAZlBJ,EAAexF,WAAWuF,SAASM,IAC7BA,EAAU3F,KAAKgE,SAAS,0BAC1ByB,EAAeE,EAAU1F,OAEvB0F,EAAU3F,KAAKgE,SAAS,iBAC1BwB,EAAYG,EAAU1F,OAEpB0F,EAAU3F,KAAKgE,SAAS,gBAC1BzH,EAAaoJ,EAAU1F,MACzB,IAGEwF,KACFF,EAAkD,QAAzCG,EAAIpH,EAAUnD,MAAKyK,GAAKA,EAAEtK,KAAO2F,WAAQ,IAAAyE,OAAA,EAArCA,EAAuCrK,MACjDkK,GAECX,EAAYjH,KAAK,CACfkI,UAAWN,EACXO,QAAS7E,EACT8E,eAAgBP,GAAa,UAC7BQ,gBAAkBzJ,IAG5B,IAIF7C,QAAQC,IAAI,+CAADoB,OAAgDgC,GAE/D,CAAE,MAAOtC,GACPf,QAAQe,MAAM,uCAADM,OAAwCgC,EAAU,KAAKtC,EACtE,CAEA,MAAO,CACL,WAAemK,EACf,YAAeC,EAEnB,CAzNoDoB,CAAmBvC,EAAQrK,EAASiF,EAAWrB,EAAM5C,IAC/E6L,EAAavB,EAAkBuB,WAC/BC,EAAcxB,EAAkBwB,YACtCzM,QAAQC,IAAI,mBAAoBuM,GAChCxM,QAAQC,IAAI,qBAAsBwM,GAClCzM,QAAQC,IAAI,qBAAsBgL,GAIlC5B,EAAYpF,KAAK,CACf+F,SACAE,WACAwC,WAAmB,OAAR3B,QAAQ,IAARA,OAAQ,EAARA,EAAUvJ,OAAO,GAAG+B,QAAS,MACxCoJ,WAAmB,OAAR5B,QAAQ,IAARA,OAAQ,EAARA,EAAUvJ,OAAO,GAAGG,QAAS,MACxCiL,UAAmB,OAAR7B,QAAQ,IAARA,GAAmB,QAAXF,EAARE,EAAUvJ,OAAO,UAAE,IAAAqJ,GAAgC,QAAhCC,EAAnBD,EAAsB,qCAA6B,IAAAC,OAA3C,EAARA,EAAqD+B,cAAe,MAC/EL,aACAC,eAEJ,CAAE,MAAOK,GACP9M,QAAQe,MAAM,oCAADM,OACyB2I,EAAM,KAC1C8C,EAEJ,CAEJ,WAGIzM,QAAQsC,IAAImH,EACpB,MACE9J,QAAQe,MAAM,qDAChB,EAKI6D,QAAkB0E,UAClBG,EAAsB7E,GAE5BwD,GAASO,EAAAA,EAAAA,KAAwB,IACjCP,GAAS2E,EAAAA,EAAAA,IAAiB1D,IAC1BjB,GAAS4E,EAAAA,EAAAA,IAAWxD,IACpBpB,GAAS6E,EAAAA,EAAAA,IAAatN,GACxB,KAAO,CAEL,MAAMuN,OJpKoBzN,OAAOE,EAASC,EAAU0I,KAC1D,IACE,MAAMzI,EAAkBC,4DACxBE,QAAQC,IAAI,iCAAkCL,GAC9C,MAAMM,QAAgBC,EAAAA,EAAAA,MACtB,IAAI6C,EAAS,GAAA3B,OACRxB,EAAe,iDACpB,MAAMgB,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBwC,EAAW,CACtCtC,OAAQ,OACRf,SAAOwN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFxN,GAAO,IACV,eAAgB,qBAElBwD,KAAM8D,KAAKC,UAAU,CAAE/D,KAAM,CAAC,CAAEiK,SAAUxN,MAE1Ce,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJP,QAAQC,IAAI,0CAA2CY,GAEvD,IAAIwM,EAAY,GAEZC,EAAgB,CAAEC,OAAQ,IAC9B,GAAI1M,IACFA,EAAS0E,QAAQoG,SAAStH,IACxBA,EAAOmJ,SAASC,WAAW9B,SAAS+B,IAEb,aAAjBA,EAAMC,QACRL,EAAcC,OAAOtJ,KAAK,CACxB2J,IAAKF,EAAMG,YAAYC,QAAQ,QAAS,KAE5C,GACA,IAEAR,EAAcC,OAAOxL,OAAS,GAAG,CACnC,IAAIgM,EACF,+HACF,MAAMC,QAAoB,IAAI3N,SAAQ,CAACC,EAASC,KAC9CL,EAAQM,qBAAqBuN,EAAQ,CACnCrN,OAAQ,OACRf,QAAS,CAEP,eAAgB,oBAElBwD,KAAM8D,KAAKC,UAAUoG,GACrB3M,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAEJP,QAAQC,IAAI,qBAAsB+N,GAE9BA,IACFX,EAAYW,EAAYT,OACrBhL,QAAQmL,GAAUA,EAAMO,QAAQ3D,SAAShC,KACzCrH,KAAKyM,GAAUA,EAAM/L,QAE5B,CAKF,OAFA3B,QAAQC,IAAI,kCAAmCoN,GAExCA,CACT,CAAE,MAAOtM,GAEP,MADAf,QAAQe,MAAM,qCAAsCA,GAC9CA,CACR,GI8FoCmN,CAC5BvO,EACAC,EACA0I,GAEFtI,QAAQC,IAAI,kCAAmCiN,GAE/C,IAAIxN,EAAkB,IAAIwN,EAAiB5L,GAC3CtB,QAAQC,IACN,2CACAP,GAIF,IAAIkF,EAAY,GAShB,GARIlF,EAAgBqC,OAAS,GAC3B6C,QAAkBpF,EAAaE,EAAiBC,GAChDK,QAAQC,IAAI,qCAAsC2E,IAElD5E,QAAQ6F,KAAK,iDAIXjB,EAAU7C,OAAS,EAAG,CACxB,MAAMoM,OEzLmB1O,OACjCmF,EACAjF,EACAC,EACA2D,EACA5C,KAEA,IAAK,IAADyN,EACF,MAAMvO,EAAkBC,4DACxBE,QAAQC,IAAI,0CAA2C2E,GAEvD,MAAM/C,EAAc,GAAAR,OAAMxB,EAAe,mEAAAwB,OAAkEzB,EAAQ,6CAE7GM,QAAgBC,EAAAA,EAAAA,MAEhBU,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBqB,EAAgB,CAC3CnB,OAAQ,MACRf,UACAgB,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJP,QAAQC,IAAI,0CAA2CY,GAEvD,IAAIwN,EAAyB,GACzBC,EAAqB,GAGrBhD,GAA6D,QAA3C8C,EAAAvN,EAASW,OAAO,GAAG0E,gCAAwB,IAAAkI,OAAA,EAA3CA,EAA6C5M,SAAU,GAE7E8J,EAAkBA,EAAgB/I,QAAOgJ,IACvC,MAAMC,EAAsBD,EAAInF,WAAW3E,MAAKgK,GAAgB,yBAAXA,EAAEnF,OACjDoF,EAAuBH,EAAInF,WAAW3E,MAAKgK,GAAgB,qBAAXA,EAAEnF,OACxD,OAAsC,KAAZ,OAAnBkF,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBjF,SAAkD,KAAZ,OAApBmF,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBnF,MAAc,IAEpF,MAAM4E,EAAYG,EAAgB7I,MAAK8I,IACrC,MAAMlF,EAAOkF,EAAInF,WAAW3E,MAAKgK,GAAgB,qBAAXA,EAAEnF,OACxC,OAAuB,KAAZ,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,MAAc,IA8E7B,OA3E6B,IAAzB+E,EAAgBvJ,SAClBuJ,QAAyB3G,EACvBhF,EACAiF,EACAhF,EACA2D,EACA5C,UAKEN,QAAQsC,IACZ2I,EAAgBrK,KAAIxB,UAClBO,QAAQC,IAAI,iBAAkBkG,GAC9B,IAAK,IAAIoI,KAAe3J,EACtB,GAAIuB,EAAUQ,UAAY4H,EAAY3M,GAAI,CACxC,IAAIuK,EAAYoC,EAAY5M,MAC5BwK,EAAYA,EAAU2B,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAC3D,IAAIU,EAAM,CAAE5M,GAAIuE,EAAUQ,QAAShF,MAAO4M,EAAY5M,OAEtD,MAAM8M,EAAetI,EAAUC,WAAWnF,KAAKyN,GAE3CA,EAAcpI,KAAKgE,SAAS,eAC5BoE,EAAcnI,MAEP3D,EAAqB8L,EAAcnI,MAAO5G,GAASgP,MACvDC,IACC,GAAIA,EAAmB,CACrB5O,QAAQC,IAAI2O,GACZJ,EAAe,UAAqB,OAAjBI,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBC,SACtCL,EAAe,UAAqB,OAAjBI,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,SAEtC,IAAI5K,EAAU,GACZC,EAAU,GAEZyK,EAAkB7L,MAAM4I,SAASoD,IAC/B7K,GAAW,IAAM6K,EAAG7K,QACpBC,GAAW,IAAM4K,EAAG5K,OAAO,IAG7BqK,EAAY,OAAItK,EAAQK,MAAM,GAC9BiK,EAAkB,aAAIrK,EAAQI,MAAM,EACtC,MAKJiK,EAAIE,EAAcpI,KAAKwH,QAAQ3B,EAAW,IAAI6C,QAC5CN,EAAcnI,MACTlG,QAAQC,mBAKbD,QAAQsC,IAAI8L,GAClBJ,EAAyB,IAAIA,EAAwBG,GACrDxO,QAAQC,IAAI,2BAA4BoO,GACxCrO,QAAQC,IAAI,oBAAqBuO,EACnC,CACF,KAIJxO,QAAQC,IACN,qDACAoO,GAEFC,EAAqB1J,EAAUrC,QAC5B0M,IACEZ,EAAuB5L,MAAMyM,GAAaA,EAAStN,KAAOqN,EAASrN,OAExE5B,QAAQC,IAAI,wBAAyBqO,GAI9B,CACLa,SAAS,EACThM,KAAM,CACJiM,UAAW,CACTxK,UAAWA,EACXyK,sBAAuBhB,EACvBiB,aAAchB,EACdnD,WAAYA,IAIpB,CAAE,MAAOpK,GAEP,OADAf,QAAQe,MAAM,yCAA0CA,GACjD,CAAEoO,SAAS,EAAOpO,QAC3B,GFqD6BwO,CACnB3K,EACAjF,EACAC,EACA2D,EACA5C,GAEFX,QAAQC,IAAI,2BAA4BkO,GAEpCA,EAAOgB,SACT/G,GAASoH,EAAAA,EAAAA,IAAmBrB,EAAOhL,KAAKiM,YACxChH,GAASqH,EAAAA,EAAAA,IAAW9P,KAEpBK,QAAQe,MAAM,8BAElB,MACEf,QAAQ6F,KAAK,2CAIf,IAAI6J,EAAqB,CAAC,EAExBA,EADW,iBAAT/O,EACmB,CAAEwO,SAAS,EAAMhM,KAAM,SGnNlB1D,OAAOE,EAASC,KAClD,MAAMC,EAAkBC,4DAExB,IAAIkD,EAAS,GAAA3B,OACRxB,EAAe,8CACpBmD,GAAapD,EACboD,GAAa,UACb,IAAI+E,EAAO,CACT4H,YAAa,EACbC,eAAgB,CAAC,gBACjBC,gBAAiB,CAAC,gBAGpB,IACE7P,QAAQC,IAAI,kCAAmCL,GAC/C,MAAMM,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYA,CAACK,EAAKqP,EAAQjJ,IACvB,IAAIxG,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQoP,EACRnQ,SAAOwN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFxN,GAAO,IACV,eAAgB,qBAElBwD,KAAM8D,KAAKC,UAAUL,GACrBlG,KAAM,OACNC,WAAaC,IACXb,QAAQC,IAAI,qBAAsBY,GAClCP,EAAQO,EAAS,EAEnBC,UAAYC,IACVf,QAAQe,MAAM,kBAAmBA,GACjCR,EAAOQ,EAAM,GAEf,IAIAF,QAAiBT,EAAU4C,EAAW,OAAQ+E,GACpD/H,QAAQC,IAAI,0CAA2CY,GACvD,MAAM,OAAEW,GAAWX,EAEnB,GAAIW,EAAQ,CACV,IAAIuO,EAASlP,EAASW,OACnBe,QACEf,IACkB,iBAAhBA,EAAOb,MACU,iBAAhBa,EAAOb,OACTa,EAAOI,KAAOhC,IAEjBqB,KAAKO,IAAM,CACVI,GAAIJ,EAAOI,GACXjB,KAAMa,EAAOb,KACb2F,KAAM9E,EAAOG,MACb4B,MAAO/B,EAAO+B,UA2BlB,OAvBIwM,EAAOhO,OAAS,SAEZ1B,QAAQsC,IACZoN,EAAO9O,KAAIxB,UACT,GAAkC,aAA9BuQ,EAAMzM,MAAM0M,cAA8B,CAC5C,IAAIC,EAAU,GAAA7O,OAAMxB,EAAe,mEAAAwB,OAAkE2O,EAAMpO,GAAE,6CAC7G,MAAME,QAAsB1B,EAAU8P,EAAY,MAAO,IACzDlQ,QAAQC,IAAI,kBAAmB6B,GAE/B,MAAMqO,EAAWrO,EAAcN,OAAO4O,SAAS5O,IAAY,IAAD6O,EACxD,OAAmC,QAAnCA,EAAI7O,EAAO0E,gCAAwB,IAAAmK,GAA/BA,EAAiC7O,OAC5BA,EAAO0E,yBAAyB1E,OAAOP,KAC3C2K,GAAmBA,EAAejF,UAGhC,EAAE,IAEXqJ,EAAMlJ,QAAUqJ,CAClB,MAKC,CACLhB,SAAS,EACThM,KAAM4M,EAEV,CACF,CAAE,MAAOhP,GAEP,OADAf,QAAQe,MAAM,uBAAwBA,GAC/B,CAAEoO,SAAS,EAAOhM,KAAM,GAAIpC,QACrC,GH2HmCuP,CACzB3Q,EACAC,GAKJI,QAAQC,IAAI,cAAeU,GAC3BX,QAAQC,IACN,2CACAyP,GAGEA,EAAmBP,SACrB/G,GAASmI,EAAAA,EAAAA,IAAmBb,EAAmBvM,OAIjD,MAAMqN,OIvOgB/Q,OAAOE,EAASyN,EAAU7J,KACtD,MAAM1D,EAAkBC,4DACxB,IAAI2Q,GAAY,EACZC,EAAuB,GACvB5N,EAAY,CAAC,OAAS,GAAI,SAAW,IACzC,MAAM6N,EAAkB,CAAC,uBAAwB,wBAC3CC,EAAY,GAAAvP,OACbxB,EAAe,mDAEpB,IAAIkI,EAAO,CACT8I,SAAU,+CACVC,UAAW,CAAC,uBAAwB,wBACpCC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,kBAAkB,cAClEC,MAAO,mCACPC,KAAM,KACNC,WAAW,GAETC,EAAI,GAAAjQ,OACHxB,EAAe,iDAChB0R,EAAK,CACPV,SAAU,+CACVW,aAAc,oBACdL,MAAO,mCACPM,IAAK,CAACrE,IAGR,IACEpN,QAAQC,IAAI,+BAAgCmN,GAE5C,MAAMlN,QAAgBC,EAAAA,EAAAA,MAEhBU,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBoQ,EAAc,CACzClQ,OAAQ,OACRf,SAAOwN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFxN,GAAO,IACV,eAAgB,qBAElBwD,KAAM8D,KAAKC,UAAUa,GACrBpH,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAKJ,GAFAP,QAAQC,IAAI,0CAA2CY,GAE/B,OAApBA,EAASuE,OAAiB,CAC5B,MAAMsM,QAAkB,IAAIrR,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqB8Q,EAAM,CACjC5Q,OAAQ,OACRf,SAAOwN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFxN,GAAO,IACV,eAAgB,qBAElBwD,KAAM8D,KAAKC,UAAUqK,GACrB5Q,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJP,QAAQC,IAAI,0CAA2CyR,GACvD,IAAK,MAAMC,KAAWhB,EAChBe,EAAUE,kBAAkBD,UACxBtR,QAAQsC,IACZ+O,EAAUE,kBAAkBD,GAAS1Q,KAAIxB,UACvC,MAAM2F,EAASyM,EAAI,eAAetN,MAAM,IAClCuN,EAASD,EAAI,cAEnB,GAAe,aAAXzM,EAAuB,CACzB,MAAM2M,EAAI,GAAA1Q,OAAMxB,EAAe,4CAAAwB,OAA2CwQ,EAAIjQ,GAAE,qDAE1EoQ,QAAkB,IAAI3R,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqBuR,EAAM,CACjCrR,OAAQ,MACRf,UACAgB,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAEJP,QAAQC,IAAI,8BAA+B+R,GAE3B,yBAAZL,EACElM,MAAMC,QAAQsM,EAAUjI,kBAC1BiI,EAAUjI,gBAAgB4B,SAASsG,IACjCvB,EAAqBzM,KAAK,CACxBZ,WAAY4O,EAAepI,MAAMxG,WACjC6O,OAAQD,EAAeE,MAAM,GAAGC,MAChC,IAIF3M,MAAMC,QAAQsM,EAAUrI,kBACxBqI,EAAUrI,gBAAgBgC,SAAS/B,IACjC8G,EAAqBzM,KAAK,CACxBZ,WAAYuG,EAAeC,MAAMxG,WACjC6O,OAAQtI,EAAeyI,WAAW,IAClC,IAMN5B,EAD0B,aAAxBlN,EAAM0M,eACIS,EAAqBjO,MAC9BwH,GACCA,EAAO5G,aAAe+J,GACJ,WAAlBnD,EAAOiI,SAKXzB,IACF3N,EAAkB,OAAIgP,EACtBhP,EAAoB,SAAIsC,EAE5B,KAKV,MACEpF,QAAQe,MAAM,wBAKhB,OAHAf,QAAQC,IAAI,6BACZD,QAAQC,IAAI,sBAAuBwQ,GAE5B,CACLtB,SAAS,EACThM,KAAMsN,EACN6B,OAASxP,EACTiH,gBAAiB2G,EAErB,CAAE,MAAO3P,GAQP,MAPAf,QAAQe,MAAM,kBAAmB,CAC/BN,IAAKmQ,EACLjR,UACAoI,OACAhH,UAGIA,CACR,GJqFiCwR,CAAe5S,EAASC,EAAU2D,GAC7DvD,QAAQC,IAAI,qCAAsCuQ,GAE9CA,EAAarB,UACf/G,GAASoK,EAAAA,EAAAA,IAAUhC,EAAarN,OAChCiF,GAASqK,EAAAA,EAAAA,IAAmBjC,EAAazG,kBACzC3B,GAASsK,EAAAA,EAAAA,IAAUlC,EAAa8B,UAGlCtS,QAAQC,IAAI,yDACd,CACF,CAAE,MAAOc,GACPf,QAAQe,MAAM,4BAA6BA,GAC3CmH,EAAe,0DACjB,CAAC,QACCE,GAASO,EAAAA,EAAAA,KAAwB,GACnC,GAGwB,E,aK9N5B,MAuKA,EAvKiCgK,KAC/B,MAAM,eAAEzK,IAAmBC,EAAAA,EAAAA,MACrB,gBAAEO,GAAoBT,IACtB2K,GAAYC,EAAAA,EAAAA,KAAatP,GAAUA,EAAMuP,cAAcF,YACvDG,GAAUF,EAAAA,EAAAA,KAAatP,GAAUA,EAAMuP,cAAcC,UACrD3K,GAAWC,EAAAA,EAAAA,MAEX2K,GAAqBC,EAAAA,EAAAA,cACzBxT,UACE,IACE,MAAMyT,QAA4BC,EAAAA,EAAAA,IAAwB,CACxDC,cAkCF,GAAIF,EAAoB/D,QAAS,CAO/B/G,GACEiL,EAAAA,EAAAA,IAAqB,CACnBC,SAAUJ,EAAoB/P,KAAKmQ,YAIvC,MAAMC,EAAoBL,EAAoB/P,KAAKmQ,SAMzB,IAADE,EAAAC,EAAzB,GALAzT,QAAQC,IAAI,sBAAuBsT,GAEnCnL,GAASsL,EAAAA,EAAAA,KAAmB,IAGxBR,QACIxK,EACJ6K,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnCJ,EAAU,UAAE,IAAAI,OAAA,EAAZA,EAAc5T,SACF,QADU6T,EACtBL,EAAU,UAAE,IAAAK,OAAA,EAAZA,EAAcE,WAGpB,MACEzL,EAAe0L,EAAAA,GAEnB,CAAE,MAAO7S,GACPf,QAAQe,MAAM,+CAAgDA,GAC9DmH,EAAe0L,EAAAA,GACjB,CAAC,QACCxL,GAASyL,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAACzL,EAAUM,IAGPoL,GAAab,EAAAA,EAAAA,cACjBxT,UACEO,QAAQC,IAAI,iDAAkDmT,GAE9D,IACE,GAAIA,GAAaA,EAAUrR,OAAS,EAAG,CAAC,IAADgS,EAErC,MAAMJ,EAAyB,QAAfI,EAAGX,EAAU,UAAE,IAAAW,OAAA,EAAZA,EAAcJ,WAWjC,IAVmB,CACjB,eACA,eACA,gBACA,YACA,iBACA,iBACA,UACA,4BAEcrJ,SAASqJ,GAEvB,YADAzL,EAAe8L,EAAAA,IAGjB5L,GAASsL,EAAAA,EAAAA,KAAmB,IAE5B1T,QAAQC,IAAI,+DACZmI,GAASyL,EAAAA,EAAAA,KAAW,IACpBI,YAAW,IAAM7L,GAASyL,EAAAA,EAAAA,KAAW,KAAQ,SACvCb,EAAmBI,EAC3B,MACEpT,QAAQ6F,KAAK,yCAEjB,CAAE,MAAO9E,GACPf,QAAQe,MAAM,8BAA+BA,GAC7CqH,GAASyL,EAAAA,EAAAA,KAAW,IACpB7T,QAAQC,IACN,8DAEFiI,EAAegM,EAAAA,GACjB,IAWF,CAAClB,EAAoB9K,IA0BvB,MAAO,CACLiM,yBAxB8BlB,EAAAA,EAAAA,cAAY,KAErCL,EAMH5S,QAAQC,IACN,gFANFD,QAAQC,IACN,0EAEFmI,GAASsL,EAAAA,EAAAA,KAAmB,KAM9B,MAAMU,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoBR,EAAY1L,EAAUF,GAC1D,GACC,KAEH,MAAO,IAAMuM,cAAcL,EAAS,GACnC,CAACN,EAAY1L,IAId2K,UACAe,aACD,E,aCzLH,MA8EA,EA9EwBa,KACtB,MAAM,WAAEb,GAAenB,KACjB,iBAAEiC,EAAgB,eAAE1M,IAAmBC,EAAAA,EAAAA,MACtC4K,EAASc,IAAcgB,EAAAA,EAAAA,WAAS,GAEvC7U,QAAQC,IAAI,kCAsEZ,OA7DA6U,EAAAA,EAAAA,YAAU,KACR,IAAKvM,OAAOC,OAAQ,OAqDpBxI,QAAQ+U,MAAM,+DACdxM,OAAOC,OAAOwM,SAAS,aAlDLvV,UAAa,IAADwV,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAM9Q,MAAM,MAGhC+Q,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BR,IACvBA,EAAMtS,MACV+S,GACCA,EAAKlL,SAAS,uBAAyBkL,EAAKlL,SAAS,mBAenDmL,CAAuBV,KAAWM,EAIpC,YAHArV,QAAQ6F,KACN,kFAOJyP,eAAeI,WAAW,sBAM1B7B,GAAW,GAEX,MACM8B,EADcC,EAAAA,EAAMC,WAEZ/C,cAAcgD,kBAAkBC,mBAE9C,GAAsB,OAAjBJ,QAAiB,IAAjBA,GAAuB,QAANV,EAAjBU,EAAmBxS,YAAI,IAAA8R,GAAO,QAAPC,EAAvBD,EAAyBe,aAAK,IAAAd,IAA9BA,EAAgCnT,OAMnC,OALA/B,QAAQe,MACN,6EACA4U,QAEF9B,GAAW,GAIb,UAIQoC,EAAAA,EAAAA,GAAkBN,EAAkBxS,KAAK6S,MAAOlC,EACxD,CAAE,MAAO/S,GACPf,QAAQe,MAAM,iDAA6CA,GAC3DmH,EAAegO,EAAAA,GACjB,CAAC,QACCrC,GAAW,GACXe,EAAiBuB,EAAAA,GACnB,IAG4C,GAI7C,IAEIpD,GAAUqD,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAAK,IAAI,E,+EChFnC,MAEaC,EAAgBC,IAMtB,IANuB,OAC5BpI,EAAS,GAAE,OACXqI,EAAM,aACNC,EAAY,kBACZC,EAAiB,QACjBlN,GACD+M,EAEC,OADAvW,QAAQC,IAAI,iCAAkCkO,GACnC,OAANA,QAAM,IAANA,GAAAA,EAAQpM,QAGXqU,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAC,SACGzI,EAAOlN,KAAKuB,IACXqU,EAAAA,EAAAA,MAAA,QAEEC,MAAO,CACLC,YAAa,MACbC,QAAS,cACTC,WAAY,SACZC,MAAO1U,EAAM0U,OAAS,QACtBC,WAAY,QACZP,SAAA,CAEDpU,EAAM2J,UACU,UAAhB3J,EAAM0U,OAAqB,SACX,QAAhB1U,EAAM0U,QAAoB1N,EAAU,aAAe,cACnDiN,GAAyC,YAAzBjU,EAAM6J,iBACrB+J,EAAAA,EAAAA,KAACgB,EAAAA,IAAc,CACbC,KAAM,GACNP,MAAO,CAAEQ,OAAQ,UAAWJ,MAAO,MAAOK,WAAY,OACtDC,QAASA,IAAMd,EAAkBF,EAAQhU,EAAM4J,aAhB9C5J,EAAM4J,aANS,KA2BvB,EAiCMqL,EAAeA,CAACC,EAAW/W,EAAM2R,KAG5C,GAFAtS,QAAQC,IAAI,qBAAqBqS,IAE5BoF,EAAW,MAAO,GAGvB,IAAIC,EAAaD,EAAUzW,KAAKkC,GACjB,kBAATxC,EACK,CACLiX,UAAc,OAAJzU,QAAI,IAAJA,OAAI,EAAJA,EAAMwJ,YAAa,MAC7BkL,OAAW,OAAJ1U,QAAI,IAAJA,OAAI,EAAJA,EAAMqJ,aAAc,GAC3BxC,QAAY,OAAJ7G,QAAI,IAAJA,OAAI,EAAJA,EAAM6G,SAAU,QAG1BhK,QAAQC,IAAI,0BAA8B,OAAJkD,QAAI,IAAJA,OAAI,EAAJA,EAAM2U,SAAUxF,EAAOR,QAAS,OAE/D,CACL+F,OAAW,OAAJ1U,QAAI,IAAJA,OAAI,EAAJA,EAAMxB,QAAS,MACtBoW,KAAS,OAAJ5U,QAAI,IAAJA,OAAI,EAAJA,EAAM4U,MAAO,IAClBC,QAAY,OAAJ7U,QAAI,IAAJA,OAAI,EAAJA,EAAM8U,cAAe,UAC7B,cAAkB,OAAJ9U,QAAI,IAAJA,OAAI,EAAJA,EAAM+U,YAAa,MACjC,cAAkB,OAAJ/U,QAAI,IAAJA,OAAI,EAAJA,EAAMgV,YAAa,MACjCL,QAAY,OAAJ3U,QAAI,IAAJA,OAAI,EAAJA,EAAM2U,SAAUxF,EAAOR,QAAS,MACxC,iBAAqB,OAAJ3O,QAAI,IAAJA,OAAI,EAAJA,EAAMiV,eAAgB9F,EAAO+F,UAAW,MACzD,kBAAmBlV,EAAKmV,gBAAkB,MAC1C,aAAc,SACd,aAAc,MACd,cAAc,EACdC,KAAMpV,EAAKqV,KAAO,OAAS,MAC3B,aAAc,OAapB,MAPa,kBAAT7X,EACFgX,EAAWc,MAAK,CAAChN,EAAGiN,IAAMjN,EAAEmM,SAASe,cAAcD,EAAEd,YAErDD,EAAWc,MAAK,CAAChN,EAAGiN,IAAMjN,EAAEoM,MAAMc,cAAcD,EAAEb,SAI7CF,CAAU,EA8DNiB,EAAgB,CAC3B,CAAEC,YAAa,kBAAmBC,OAAQ,oB,0CCnK5C,MA8LA,EA9LkCvC,IAe3B,IAf4B,WACjCwC,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZtH,EAAM,MACNvO,EAAK,KACL5C,EAAI,QACJ6I,EAAO,OACP8I,EAAM,WACN+G,EAAU,SACVC,EAAQ,cACRC,GACDhD,EACC,MAAM,iBAAEiD,EAAgB,iBAAE5E,IAAqBzM,EAAAA,EAAAA,KACzCsR,EAAkBC,GACE,aAAjBA,GAAgD,gBAAjBA,GAAmD,cAAjBA,GAEnEC,EAAeC,IAAoB/E,EAAAA,EAAAA,WAAS,GAC7CgF,GAAoBC,EAAAA,EAAAA,UA6B1B9Z,QAAQC,IAAI,uBAAwBkZ,GAmCpC,OACEtC,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAKkD,UAAU,sBAAqBnD,SAAA,EAChCpN,IACA4M,EAAAA,EAAAA,KAAA,UACE2D,UAAU,qCACVvC,QAASA,KACHiC,EAAelW,GACjBiW,EAAiBQ,EAAAA,IAIN,kBAATrZ,GAEOmR,EADT8H,GAAiB,GAIjBJ,EADmB,aAAVjW,EACQ0W,EAAAA,GAEAC,EAAAA,GACnB,EACAtD,SACH,cAIFpN,IACC4M,EAAAA,EAAAA,KAAA,UACE2D,UAAU,qCACVvC,QAASA,KACO,aAAVjU,GAAkC,gBAAVA,GAAqC,cAAVA,EACrDiW,EAAiBQ,EAAAA,IAEjBJ,GAAiB,EACnB,EACAhD,SACH,sBAKO,kBAATjW,IACCyV,EAAAA,EAAAA,KAAA,UACE2D,UAAU,qCACVvC,QA1Gc2C,KAClBV,EAAelW,GACjBiW,EAAiBQ,EAAAA,IAIff,IAAoB,kBAATtY,GAA4BmR,GACzCmH,IAEAO,EADmB,aAAVjW,EACQ6W,EAAAA,GAEAC,EAAAA,GACnB,EA8FiCzD,SAC1B,UAIS,IAAZpN,IACA4M,EAAAA,EAAAA,KAAA,UACE2D,UAAU,oCACVvC,QAjGa8C,KACfb,EAAelW,GACjBiW,EAAiBQ,EAAAA,IAGfd,GACFA,GACF,EA0F4BtC,SACvB,WAKJyC,IACCjD,EAAAA,EAAAA,KAAA,UACE2D,UAAU,uCACVvC,QAAS8B,EAAS1C,SACnB,eAQDR,EAAAA,EAAAA,KAACmE,EAAAA,EAAW,CACVC,KAAMb,EACNc,OAAQA,IAAMb,GAAiB,GAC/BjY,MAAM,kBACN+Y,cAAe,CACb,CACEvJ,MAAO,MACPwJ,QAAS,UACTnD,QAASA,KAAO,IAADoD,EACY,QAAzBA,EAAAf,EAAkBgB,eAAO,IAAAD,GAAzBA,EAA2BE,WAC3BlB,GAAiB,EAAM,GAG3B,CACEzI,MAAO,QACPwJ,QAAS,SACTnD,QAASA,IAAMoC,GAAiB,KAElChD,UAEFR,EAAAA,EAAAA,KAAA,OAAK2D,UAAU,aAAYnD,UACzBR,EAAAA,EAAAA,KAAC2E,EAAAA,EAAc,CACbC,IAAKnB,EACL1W,KAAMgW,EACN8B,QAAS7B,EACTtH,OAAQA,EACRoJ,UAjIU/X,IAElB,GADAnD,QAAQC,IAAIkD,GACC,kBAATxC,EACEwC,EAAKpB,OAAS,IAChBgX,EAAW5V,GACX6V,EAAW7V,GACPoW,GAAeA,GAAc,SAGnC,GAAIpW,EAAKpB,OAAS,EAAG,CACnB,MAAMoZ,EAAWhY,EAAKlC,KAAKU,IAAK,CAC9BA,MAAOA,EACPoW,IAAK,IACLC,OAAQ,UACR,aAAc,MACd,aAAc,MACdF,OAAQxF,EAAOR,OACf,gBAAiBQ,EAAO+F,SACxB,kBAAmB,MACnB,aAAc,SACd,aAAc,MACd,aAAc,QACdE,KAAM,MACN,aAAc,OAEhBQ,EAAWoC,GAEXnC,EAAW7V,GACPoW,GAAeA,GAAc,EACnC,CACF,EAoGQhW,MAAOA,UAIZ,E,wCC/LP,MAuEA,EAvE6BgT,IAOtB,IAPuB,sBAC5B6E,EAAqB,aACrBC,EAAY,oBACZC,EAAmB,aACnBC,EAAY,uBACZC,EAAsB,YACtBC,GACDlF,EACC,MAAM,WAAEzC,GAAenB,KACjB,cAAE+I,IAAkBC,EAAAA,EAAAA,KAyC1B,OACEvF,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKkD,UAAU,2BAA0BnD,SAAA,EACvCR,EAAAA,EAAAA,KAACwF,EAAAA,EAAK,CACJ9E,MAAO,CAAE+E,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJjC,UAAU,iBAEZ3D,EAAAA,EAAAA,KAAA,QAAM2D,UAAU,qBAAoBnD,SAAC,mBACrCC,EAAAA,EAAAA,MAAA,OAAKkD,UAAU,oBAAmBnD,SAAA,EAChCR,EAAAA,EAAAA,KAAA,MAAI2D,UAAU,aACd3D,EAAAA,EAAAA,KAAA,QAAM2D,UAAU,eAAcnD,SAAC,QAC/BR,EAAAA,EAAAA,KAAA,MAAI2D,UAAU,gBAEhB3D,EAAAA,EAAAA,KAAC6F,EAAAA,EAAW,CAACC,SArDGC,IAmCpBT,EAAcS,EAlCK,CACjBxa,MAAO,SACPya,KAAM,GACNrV,KAAM,UACNsV,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAC3B7c,QAAQC,IAAI,oBAAqB4c,GACjC7c,QAAQC,IAAI,kCAAmC4c,EAAgB,GAAGjb,IAEhEib,GACAA,EAAgB9a,OAAS,GACzB8a,EAAgB,GAAGjb,GAEnBkS,EAAW,CACT,CACElU,SAAUid,EAAgB,GAAGjb,GAC7B+R,WAAYkJ,EAAgB,GAAG,sBAInC7c,QAAQ6F,KAAK,wCACf,GAGwD,QAoBvD,E,oFCupCP,EAtqCwBiX,KACtB,MAAM,6BAAEC,EAA4B,2BAAEC,IACpCC,EAAAA,EAAAA,MACKC,EAAmBC,IAAwBtI,EAAAA,EAAAA,WAAS,IACpDuI,EAAqBC,IAA0BxI,EAAAA,EAAAA,WAAS,IACxDyI,EAAeC,IAAoB1I,EAAAA,EAAAA,WAAS,IAC5C2I,EAAeC,IAAoB5I,EAAAA,EAAAA,UAAS,OAC5C6I,EAAiBC,IAAsB9I,EAAAA,EAAAA,WAAS,IAChD+I,EAAkBC,IAAuBhJ,EAAAA,EAAAA,UAAS,KACnD,wBAAEV,EAAuB,QAAEpB,GAAYJ,KACtCmL,EAAUC,IAAelJ,EAAAA,EAAAA,UAAS,IAClC6C,EAAWsG,IAAgBnJ,EAAAA,EAAAA,UAAS,KACpCoJ,EAAeC,IAAoBrJ,EAAAA,EAAAA,UAAS,KAC5CsJ,EAAeC,IAAoBvJ,EAAAA,EAAAA,UAAS,OAC5CwJ,GAAYC,KAAiBzJ,EAAAA,EAAAA,UAAS,KACtC0J,GAAoBC,KAAyB3J,EAAAA,EAAAA,UAAS,KACtDyG,GAAqBmD,KAA0B5J,EAAAA,EAAAA,WAAS,IACxD2G,GAAwBkD,KAA6B7J,EAAAA,EAAAA,WAAS,IAC/D,WAAEf,IAAenB,KAGhBgM,GAAgBC,KAAqB/J,EAAAA,EAAAA,WAAS,IAC9CgK,GAAcC,KAAmBjK,EAAAA,EAAAA,WAAS,IAC1CkK,GAAqBC,KAA0BnK,EAAAA,EAAAA,WAAS,IACxD4B,GAAcwI,KAAmBpK,EAAAA,EAAAA,WAAS,GAC3CzM,IAAWC,EAAAA,EAAAA,OACX,iBAAEuM,GAAgB,eAAE1M,KAAmBC,EAAAA,EAAAA,MACtC+W,GAAkBC,KAAuBtK,EAAAA,EAAAA,UAAS,KAClDwE,GAAYE,KAAiB1E,EAAAA,EAAAA,WAAS,GAC7C,IAAIjM,GAAmBL,OAAOC,OAAOC,SAAS,eAC9CzI,QAAQC,IAAI,wBAAyB2I,IAErC,MAAMyS,IAAevB,EAAAA,EAAAA,QAAO,MAyNtBpD,IAAoBzD,EAAAA,EAAAA,cACxB,CAACuD,EAAQ4I,KACPZ,IAAuB9G,GACrBA,EAAUzW,KAAKS,GACbA,EAAKsI,SAAWwM,GAAMrJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEbzL,GAAI,IACP8K,WAAY9K,EAAK8K,WAAWvL,KAAKuB,GAC/BA,EAAM4J,UAAYgT,GAAOjS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEhB3K,GAAK,IACR0U,MAAuB,QAAhB1U,EAAM0U,MAAkB,QAAU,QAE3C1U,MAGRd,MAGR6X,IAAc,EAAK,GAErB,CAACiF,KA0KGa,GAAoB3H,IACxB,MAAMtI,EAAYsI,EAAUzW,KAAKqe,IAAG,CAClCC,SAAUD,EAAI1H,SACd/L,UAAWyT,EAAIzH,UAGjB,OADA7X,QAAQC,IAAI,wBAAyBmP,GAC9BA,CAAS,EAGlBpP,QAAQC,IAAI,2BAA4ByX,GACxC,MAAM8H,IAAoB3M,EAAAA,EAAAA,KACvBtP,GAAUA,EAAMuP,cAAc0M,qBAInC1K,EAAAA,EAAAA,YAAU,KACJ0K,GAAkBzd,OAAS,GAC7BwX,IAAc,EAChB,GACC,CAACiG,KAGF,MAAM1J,IAAoBjD,EAAAA,EAAAA,KACvBtP,GAAUA,EAAMuP,cAAcgD,oBAEjC9V,QAAQC,IAAI,oBAAqB6V,IAIjC,MAAM2J,IAAgB5M,EAAAA,EAAAA,KACnBtP,GAAUA,EAAMuP,cAAc4M,oBAAoBD,gBAErDzf,QAAQC,IAAI,2BAA4Bwf,IAExC,MAAME,IAAc9M,EAAAA,EAAAA,KACjBtP,GAAUA,EAAMuP,cAAc4M,oBAAoBE,cAErD5f,QAAQC,IAAI,0BAA2B0f,IACvC,MAAME,IAAYhN,EAAAA,EAAAA,KACftP,GAAUA,EAAMuP,cAAc4M,oBAAoBI,YAErD9f,QAAQC,IAAI,yBAA0B4f,IAEtC,MAAMrW,IAAUqJ,EAAAA,EAAAA,KACbtP,GAAUA,EAAMuP,cAAc4M,oBAAoBK,YAErD/f,QAAQC,IAAI,oBAAqBuJ,IACjC,MAAMwW,IAAuBnN,EAAAA,EAAAA,KAC1BtP,GAAUA,EAAMuP,cAAckN,uBAEjChgB,QAAQC,IAAI,yBAA0B+f,IACtC,MAAMjW,IAAkB8I,EAAAA,EAAAA,KACrBtP,GAAUA,EAAMuP,cAAcmN,gBAAgBlW,kBAEjD/J,QAAQC,IAAI,wBAAyB8J,IAErC,MAAM6I,IAAYC,EAAAA,EAAAA,KAAatP,GAAUA,EAAMuP,cAAcF,YAEvDhO,IAAYiO,EAAAA,EAAAA,KACftP,GAAUA,EAAMuP,cAAcmN,gBAAgBrb,YAEjD5E,QAAQC,IAAI,wCAAyC2E,IAMrD,MAAMsb,IAAcrN,EAAAA,EAAAA,KACjBtP,GAAUA,EAAMuP,cAAcmN,gBAAgB3Q,eAEjDtP,QAAQC,IAAI,oCAAqCigB,IAEjD,MAAMC,IAAetN,EAAAA,EAAAA,KAClBtP,GAAUA,EAAMuP,cAAcmN,gBAAgB5Q,wBAEjDrP,QAAQC,IAAI,2BAA4BkgB,IAExC,MAAMhV,IAAa0H,EAAAA,EAAAA,KAChBtP,GAAUA,EAAMuP,cAAcmN,gBAAgB9U,aAGjDnL,QAAQC,IAAI,qBAAsBkL,IAElC,MAAMmH,IAASO,EAAAA,EAAAA,KACZtP,GAAUA,EAAMuP,cAAcmN,gBAAgB3N,SAEjDtS,QAAQC,IAAI,qBAAsBqS,IAElC,MAAM8N,IAAkBvN,EAAAA,EAAAA,KACrBtP,GAAUA,EAAMuP,cAAcmN,gBAAgBG,kBAEjDpgB,QAAQC,IAAI,uCAAwCmgB,IACpD,MAAMtO,IAASe,EAAAA,EAAAA,KACZtP,GAAUA,EAAMuP,cAAcmN,gBAAgBnO,SAEjD9R,QAAQC,IAAI,6BAA8B6R,IAE1C,MAAMnS,IAAUkT,EAAAA,EAAAA,KACbtP,GAAUA,EAAMuP,cAAcmN,gBAAgBtgB,UAEjDK,QAAQC,IAAI,mCAAoCN,IAEhD,MAAM0gB,IAAiBpN,EAAAA,EAAAA,cAAY,KACjC,IAAIrO,EAAY+a,GAAY1e,KAAKS,GAC/BA,EAAKC,MAAMmM,QAAQ,UAAW,MAGhC,MAAMwS,EACyB,IAA7Bd,GAAkBzd,OAAe2V,EAAY8H,GAE/C,IAAIe,EAAsB,IACrB,IAAIC,IACLF,EAAWlQ,SAAS1O,IAAI,IAAA+e,EAAA,OAAe,QAAVA,EAAA/e,EAAKmW,aAAK,IAAA4I,OAAA,EAAVA,EAAYxf,KAAKiL,GAAMA,EAAEC,cAAc,EAAE,MAItEuU,EAAoB9b,EACrBrC,QAAQC,IAAW+d,EAAoBjW,SAAS9H,KAChDvB,KAAKuB,IAAK,CAAQb,MAAOa,MAK5B,OAHAxC,QAAQC,IAAI,4BAA6BygB,GAGlC9b,EAAU3D,KAAKuB,IAAK,CAAQb,MAAOa,KAAS,GAClD,CAACmd,GAAajI,EAAW8H,GAAmBhW,KAGzCmX,GAAmBC,IACvB5C,EAAa4C,EAAY,EAU3B,GAPA5gB,QAAQC,IAAI,kBAAmByX,IAE/B5C,EAAAA,EAAAA,YAAU,KACJ4C,EAAU3V,QAAU,GACtBgc,GAAa8C,GAAYA,EAAU,GACrC,GACC,CAACnJ,IACA5B,GAAkBxC,UAAYwC,GAAkBC,mBAAqB,IAAD+K,GAAAC,GAClExd,GAAQuS,GAAkBxC,SAAS,kBACnC0N,GAAUlL,GAAkBxC,SAAkB,QAC9C3S,GAA2C,QAAvCmgB,GAAGhL,GAAkBC,0BAAkB,IAAA+K,IAAM,QAANC,GAApCD,GAAsC3d,YAAI,IAAA4d,QAAN,EAApCA,GAA4C/K,MAAM,GAAGrC,WAGlE,MAAOsN,GAA2BC,KAChCrM,EAAAA,EAAAA,UAASsL,IACXngB,QAAQC,IACN,0CACAghB,KAEFnM,EAAAA,EAAAA,YAAU,KACRoM,GAA6Bf,IAChB,kBAATxf,GACF6d,GAAsBiB,IAEtBvB,EAAiBiC,GACnB,GACC,CAACA,GAAcxf,GAAM8e,MAExB3K,EAAAA,EAAAA,YAAU,KACK,kBAATnU,IACF2d,GAAc+B,KAChB,GACC,CAACA,GAAgB1f,MAoBpBmU,EAAAA,EAAAA,YAAU,KACK,kBAATnU,IACF2d,GAAc4B,GAChB,GACC,CAACA,GAAavf,KACjB,MAAMsY,GAASxZ,UAAsB,IAAD0hB,EAAAC,EAClC,IAAIC,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BthB,QAAQC,IAAI,aAAcyX,GAC1B1X,QAAQC,IAAI,oCAAqCghB,IACjD,IAAIM,EAAa,GAEbC,EAAyBP,GAA0BhgB,KAAKwgB,IAC1D,IAAIC,GAAYvU,EAAAA,EAAAA,GAAA,GAAQsU,GAsCxB,OApCA/J,EAAU/L,SAASgW,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAMhW,EAAY8V,EAAU9J,MAAM/J,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGIgU,EAEL,QAFYF,EAAGhd,GAAUnD,MACvBsgB,GAAcA,EAAUpgB,QAAUggB,EAAU9J,eAC9C,IAAA+J,OAAA,EAFeA,EAEbhgB,GAEH,GAAI8f,EAAa/f,QAAUggB,EAAU9J,MAAO,EACxB6J,EAAalJ,KAAO,OAAS,SAG7BmJ,EAAUpJ,OACtB,MAAMyJ,KAAKnW,IACbwV,EAAa,OAADhgB,OAAQwK,IAAkC,SAAnB8V,EAAUpJ,KAC7CsJ,EAASI,SAAQ,OAAA5gB,OAAUwK,GAC3BgW,EAASK,UAA+B,SAAnBP,EAAUpJ,OAE/B8I,EAAa,GAADhgB,OAAIwK,EAAS,SAA6B,SAAnB8V,EAAUpJ,KAC7CsJ,EAASI,SAAQ,GAAA5gB,OAAMwK,EAAS,QAChCgW,EAASK,UAA+B,SAAnBP,EAAUpJ,MAEjCmJ,EAAalJ,KAA0B,SAAnBmJ,EAAUpJ,KAC9BsJ,GAAQ1U,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACH0U,GAAQ,IACXjgB,GAAIkgB,EACJngB,MAAOggB,EAAU9J,MACjBsK,KAAM,WAERZ,EAAWtd,KAAK4d,GAEpB,KAEKH,CAAY,IAIrBhK,EAAU/L,SAASgW,IAKjB,IAJqBV,GAA0Bxf,MAC5C2gB,GAAiBA,EAAazgB,QAAUggB,EAAU9J,QAGlC,CAAC,IAADwK,EACjB,MAAMxW,EAAY8V,EAAU9J,MAAM/J,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEIgU,EAEL,QAFYO,EAAGzd,GAAUnD,MACvBsgB,GAAcA,EAAUpgB,QAAUggB,EAAU9J,eAC9C,IAAAwK,OAAA,EAFeA,EAEbzgB,GAEH,GAAIkgB,EAAS,CACX,IAAIQ,EAAc,CAAE1gB,GAAIkgB,EAASngB,MAAOggB,EAAU9J,OAC9CgK,EAAW,CAAC,EAChBP,EAAsBrd,KAAK6d,GAEJ,SAAnBH,EAAUpJ,MACR,MAAMyJ,KAAKnW,IACbwV,EAAa,OAADhgB,OAAQwK,KAAe,EACnCgW,EAASI,SAAQ,OAAA5gB,OAAUwK,KAE3BwV,EAAa,GAADhgB,OAAIwK,EAAS,UAAU,EACnCgW,EAASI,SAAQ,GAAA5gB,OAAMwK,EAAS,SAElCyW,EAAY9J,MAAO,EACnBqJ,EAASK,WAAY,IAErBI,EAAY9J,MAAO,EACnBqJ,EAASK,WAAY,GAGvBV,EAAuBvd,KAAKqe,GAC5BT,GAAQ1U,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACH0U,GAAQ,IACXjgB,GAAIkgB,EACJngB,MAAOggB,EAAU9J,MACjBsK,KAAM,QAERZ,EAAWtd,KAAK4d,EAClB,CACF,KAGF,IAAIU,EAAe,GACnBtB,GAA0BtV,SAASyW,IAIjC,IAH0B1K,EAAUjV,MACjCkf,GAAcA,EAAU9J,QAAUuK,EAAazgB,QAE5B,CAAC,IAAD6gB,EACpB,MAAMV,EAEL,QAFYU,EAAG5d,GAAUnD,MACvB0E,GAAcA,EAAUxE,QAAUygB,EAAazgB,eACjD,IAAA6gB,OAAA,EAFeA,EAEb5gB,GACCkgB,GACFS,EAAate,KAAK6d,EAEtB,KAGFN,EAAyBA,EAAuBjf,QAC7C4D,IAAeoc,EAAajY,SAASnE,EAAUvE,MAGlD5B,QAAQC,IAAI,qCAAsCsiB,GAIlDviB,QAAQC,IAAI,mCAAoCuhB,GAChDxhB,QAAQC,IAAI,4BAA6BqhB,GACzCthB,QAAQC,IAAI,iBAAkBohB,GAC9BrhB,QAAQC,MAGR,MAAMoE,QAAeoe,EAAAA,EAAAA,IACnBpB,EACAC,EACAE,EACA7hB,GACoC,QAD7BwhB,EACPrL,GAAkBC,0BAAkB,IAAAoL,GAAM,QAANC,EAApCD,EAAsChe,YAAI,IAAAie,OAAN,EAApCA,EAA4CpL,MAAM,GAAGpW,SACrDgF,GACAwb,GACAzf,GACA4hB,EACAhB,EACAxX,IAGF,GAAI1F,EAAO8K,QAAS,CAClB2P,IAAgB,GAChB9e,QAAQC,IAAI,eAAgBoE,GACA,KAAxBA,EAAOqe,cAA8C,MAAvBre,EAAOqe,aACvC9N,GAAiB+N,EAAAA,IAGjBza,GH/kB8B0a,KACpC,IAAKA,EAAc,MAAO,qBAE1B,MAAMC,EAAcD,EACjBte,MAAM,MACN/B,QAAQugB,GAAuB,KAAfA,EAAI9T,SAOvB,OACE6H,EAAAA,EAAAA,MAAA,OACEC,MAAO,CACLiM,WAAY,OACZzL,OAAQ,OACR0L,SAAU,WACVC,aAAc,QACdrM,SAAA,EAEFR,EAAAA,EAAAA,KAAA,UAAAQ,SAAQ,aACRR,EAAAA,EAAAA,KAAA,UACEoB,QAhBa0L,KACjB,MAAMC,EAAaN,EAAY5hB,KAAK6hB,GAAG,KAAAzhB,OAAUyhB,KAAOte,KAAK,MAC7D4e,UAAUC,UAAUC,UAAUH,EAAW,EAerCrM,MAAO,CACLkM,SAAU,WACVO,MAAO,OACPC,IAAK,QACLC,WAAY,OACZC,OAAQ,OACRpM,OAAQ,UACRqM,SAAU,OACVzM,MAAO,QACPN,UAEFR,EAAAA,EAAAA,KAACwN,EAAAA,IAAS,CAACvM,KAAM,QAEnBjB,EAAAA,EAAAA,KAAA,MAAAQ,SACGiM,EAAY5hB,KAAI,CAAC6hB,EAAKe,KACrBzN,EAAAA,EAAAA,KAAA,MAAAQ,SAAiBkM,GAARe,SAGT,EGqiBaC,CAAsBzf,EAAOqe,cAAe,CACzDqB,WAAW,IAGf,IAAIC,EAAW,GACf,GAAI3f,EAAO4f,UAAYC,OAAOC,KAAK9f,EAAO4f,UAAUliB,OAAS,EAAG,CAC9D,IAAIlB,EHtnBL,SACLujB,EACAnG,EACAuD,EACAtB,GA0BA,OAxBAlgB,QAAQC,IAAI,uBAAwBge,GACpCje,QAAQC,IAAI,qBAAsBigB,GAClCkE,EAASzY,SAASjK,IACE,QAAdA,EAAKf,MAGP6gB,EAAyBA,EAAuBjf,QAC7CC,GAAUA,EAAMb,QAAUD,EAAKC,QAI7Bue,EAAYzd,MAAMD,GAAUA,EAAMb,QAAUD,EAAKC,SACpDue,EAAYjc,KAAKvC,IAEI,WAAdA,EAAKf,OAEd6gB,EAAyBA,EAAuBvgB,KAAKuB,GACnDA,EAAMb,QAAUD,EAAKC,OAAKwL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ3K,GAAK,IAAEgW,KAAM,UAAYhW,IAE/D,IAKK,CAAEgf,yBAAwBtB,cACnC,CGulBuBmE,CACbhgB,EAAO4f,SACPhG,EACAuD,EACAtB,IAEFlgB,QAAQC,IAAI,eAAgBY,GACxBA,IACFyd,GAAczd,EAASqf,aAEvB8D,EAAWnjB,EAAS2gB,uBAExB,MACEwC,EAAWxC,EAGTwC,IAEF9F,EAAiB8F,GACjB9C,GAA6B8C,IAI7BxF,IAAuB8F,GACrBA,EAAKrjB,KAAKS,IAAIyL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTzL,GAAI,IACP8K,WAAY9K,EAAK8K,WAAWvL,KAAKuB,IAAK2K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjC3K,GAAK,IACR0U,WAAOpP,WAKjB,MACEgX,IAAgB,GAChB5W,GAAeqc,EAAAA,GACjB,GAOFzP,EAAAA,EAAAA,YAAU,KACHlC,IACHuB,GACF,GACC,CAACvB,GAAWuB,KAGfW,EAAAA,EAAAA,YAAU,KACR8J,GAAkBoB,GAAqB,GACtC,CAACA,KAGJ,MAAMwE,IAAeC,EAAAA,EAAAA,UAAQ,IAEvBhN,EADY,kBAAT9W,GACU4d,GACAN,EADoBtd,GAAM2R,KAE1C,CAACiM,GAAoBN,EAAetd,GAAM2R,KAEvCoS,IAAkBD,EAAAA,EAAAA,UACtB,IHnxB+BpG,IAC5BA,EACEA,EAAWpd,KAAKuB,IAAK,CAC1B,mBAAwB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOb,QAAS,UAFb,GGkxBhBgjB,CAAmBtG,KACzB,CAACA,KAEHre,QAAQC,IAAI,wCAAyCykB,IAGrD,MAAMpR,IAAWmR,EAAAA,EAAAA,UACf,IHr2BwB3O,KAC1B,IAAKA,IAAsBA,EAAkBxC,SAC3C,OAAO,KAGT,MAAM5R,EAAOoU,EAAkBxC,SAE/B,IAAIA,EAAW,CACb3R,MAAOD,EAAKkjB,OAAS,MACrBjkB,KAAMe,EAAKygB,MAAQ,MACnB,iBAAkBzgB,EAAK,mBAAqB,MAC5CmjB,MAAOnjB,EAAKojB,OAAS,MACrB,4BAA6BpjB,EAAK,8BAAgC,MAClEqjB,YAAarjB,EAAKqjB,aAAe,MACjC,mBAAoBrjB,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCsjB,SACEtjB,EAAKsjB,UAAQ,GAAA3jB,OA3DKvB,4DA4DA,+DAOtB,MAJkB,aAAd4B,EAAKygB,OACP7O,EAAS2R,IAAMvjB,EAAKujB,KAAO,MAC3B3R,EAAS,cAAgB5R,EAAK,eAAiB,OAE1C4R,CAAQ,EG20BP4R,CAAYpP,KAClB,CAACA,KAEH9V,QAAQC,IAAIqT,KAEZwB,EAAAA,EAAAA,YAAU,KAEK,kBAATnU,IAA4B6I,IAC9ByV,IAAgB,EAClB,GACC,CAAC3L,GAAUoE,EAAWlO,GAAS7I,MAGlCmU,EAAAA,EAAAA,YAAU,KACJ0P,GAAaziB,QAAU,IACzB/B,QAAQC,IAAI,kBAAmBukB,IAC/BxG,EAAawG,IACbrF,GAAoBlY,KAAKke,MAAMle,KAAKC,UAAUsd,MAC9CzG,GAAa8C,GAAYA,EAAU,IACrC,GACC,CAAC2D,MAEJ1P,EAAAA,EAAAA,YAAU,KACRkK,KAAyB1L,GAAS,GACjC,CAACA,KAGJ,MAAM2H,IAAUwJ,EAAAA,EAAAA,UACd,IH/yBwBW,EAACtT,EAAQnR,EAAM8V,EAAcC,EAAkBlN,KACzExJ,QAAQC,IAAI,iBAAkBU,GACjB,kBAATA,EACK,CACL,CAAEkY,YAAa,WAAYC,OAAQ,aACnC,CACED,YAAa,QACbC,OAAQ,QACRuM,KAAMC,IAAc,IAAb,IAAEhG,GAAKgG,EACZ,MAAMC,EAAYjG,EAAIkG,SAAS3N,MACzB4N,EAAchgB,MAAMC,QAAQ6f,GAC9BA,EAAUtkB,KAAIiL,GAAKA,EAAEC,WAAaD,EAAEvK,OAAS,KAAI6C,KAAK,MACtD,MAEJ,OACE4R,EAAAA,EAAAA,KAAA,QAAMzU,MAAO8jB,EAAY7O,UACvBR,EAAAA,EAAAA,KAACE,EAAa,CACZnI,OAAQoX,EACR/O,OAAQ8I,EAAIkG,SAASxb,OACrByM,aAAcA,EACdC,kBAAmBA,EACnBlN,QAASA,KAEN,IAOV,CACL,CAAEqP,YAAa,QAASC,OAAQ,SAChC,CAAED,YAAa,MAAOC,OAAQ,OAC9B,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,gBAAiBC,OAAQ,iBACxC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,kBAAmBC,OAAQ,UAC1C,CACED,YAAa,OACbC,OAAQ,QAGV,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,gBGgwB/BsM,CAAatT,EAAQnR,GAAM8V,GAAcC,GAAkBlN,KACjE,CAACsI,GAAQnR,GAAM8V,GAAcC,GAAkBlN,KAG3C4P,IAAeqL,EAAAA,EAAAA,UAAQ,IAAM7L,GAAe,KAuClD9D,EAAAA,EAAAA,YAAU,KACR9U,QAAQC,IAAI,mCAAoC,CAC9C8S,UACAiN,wBACApN,cACA,GACD,CAACG,EAASiN,GAAsBpN,KA4EnC,OAFA5S,QAAQC,IAAI,eAAgBoZ,KAG1BxC,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CAIGiI,KAAgBzI,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAExBD,EAAAA,EAAAA,KAACsP,EAAAA,EAAiB,CAChBlL,KAAM0C,EACNzC,OAAQA,IAAM0C,GAAqB,GACnCwI,UAAWlmB,UACT0d,GAAqB,QAjzBL1d,WAAa,IAADmmB,EAAAC,EAClC,MAAMC,QAAyB3c,EAAAA,EAAAA,KACzB0W,GAAS1S,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACb2Y,GAGL9lB,QAAQC,IAAI,qCAEZ,MAAM8lB,EAAiBvG,GAAkBve,KAAKqe,GAAQA,EAAIzH,QACpDmO,EAAgBD,EAAe9kB,KAAKU,IAAK,CAAQA,YAEjDskB,EAAmBvO,EAAUnV,QAChC+c,IAASyG,EAAezb,SAASgV,EAAIzH,SAGpCoO,IACFjI,EAAaiI,GACblI,GAAa8C,GAAYA,EAAU,KAGrCvC,IAAe4H,GAAqB,IAC/BA,KACAF,KAGLjJ,EAA6B,gCAE7B,MAAMoJ,EAA+C,IAA5BF,EAAiBlkB,OAGxC,GAFF/B,QAAQC,IAAI,mBAAoBkmB,GAChCnmB,QAAQC,IAAI,iBAAkBkL,IACxBgb,IAAqBhb,GAAY,CAAC,IAADib,EAAAC,QACPC,EAAAA,EAAAA,GAASzG,EAAWlf,GAA0C,QAAtCylB,EAAEtQ,GAAkBC,0BAAkB,IAAAqQ,GAAM,QAANC,EAApCD,EAAsCjjB,YAAI,IAAAkjB,OAAN,EAApCA,EAA4CrQ,MAAM,GAAGpW,UAC1GwI,IAASoH,EAAAA,EAAAA,KAAkBrC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACzByI,EAAAA,EAAMC,WAAW/C,cAAcmN,iBAAe,IACjD9U,YAAY,KAEhB,OAGIob,EAAAA,EAAAA,IACJ3hB,GACAohB,EACoC,QADvBJ,EACb9P,GAAkBC,0BAAkB,IAAA6P,GAAM,QAANC,EAApCD,EAAsCziB,YAAI,IAAA0iB,OAAN,EAApCA,EAA4C7P,MAAM,GAAGpW,SACrDe,GACD,EAqwBW6lB,EAAiB,KAKzB5T,KAAcG,IAAY4L,KAC1BvI,EAAAA,EAAAA,KAAA,OACEU,MAAO,CACLgF,OAAQ,OACR9E,QAAS,OACTyP,cAAe,SACfC,eAAgB,gBAChB1D,SAAU,YACVpM,UAEFR,EAAAA,EAAAA,KAACuQ,EAAoB,CACnBvL,sBAt+BsBwL,KAC7BC,EAAAA,EAAAA,IACCD,EACA/I,EACAF,EACAzV,GACA0M,GACA6I,EACAW,EACAM,GACAD,IACAqI,SAAQ,KACRhI,IAAgB,EAAM,GACtB,EA09BMzD,aAAcA,GACdC,oBAAqBA,GACrBC,aA9EW9b,UACnB,GAAK+d,EAAL,CAKAsB,IAAgB,GAGhB,UACQiI,EAAAA,EAAAA,IACJvJ,EACAT,EACAC,EAEJ,CAAE,MAAOjc,GACPf,QAAQe,MAAM,yBAA0BA,EAC1C,CAAC,QACC+d,IAAgB,EAClB,CAGAJ,IAA0B,EAlB1B,MAFExW,GAAe,uDAoBc,EAyDvBsT,uBAAwBA,GACxBC,YA3GUA,KAElBgC,EAAiB,MACjBW,EAAiB,MACjBP,EAAoB,IACpBF,GAAmB,GACnBK,EAAa,IACbM,GAAc,IACdE,GAAsB,IACtBN,EAAiB,IACjBgD,GAA6B,IAC7BnD,EAAY,GAEZU,IAAuB,GAGnBpD,GAAaR,UACfQ,GAAaR,QAAQtU,MAAQ,IAI/BmY,IAA0B,EAAK,MAqK5B9L,KACCiE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CAEG7D,IAAWqD,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACnBD,EAAAA,EAAAA,KAAA,OAAK2D,UAAU,qCAAoCnD,UACjDC,EAAAA,EAAAA,MAAA,OAAKkD,UAAU,UAASnD,SAAA,EACtBR,EAAAA,EAAAA,KAAA,OAAK2D,UAAU,YAAWnD,UACxBR,EAAAA,EAAAA,KAACwF,EAAAA,EAAK,CACJG,IAAI,+DACJC,IAAI,YACJjC,UAAU,YACVvC,QAlPQwP,KACtB7S,IAEA/L,IAAS6e,EAAAA,EAAAA,KAAa,IACtB7e,IACEiL,EAAAA,EAAAA,IAAqB,CACnBC,SAAU,CAAC,EACX4T,cAAe,GACf5hB,SAAU,GACVyQ,mBAAoB,MAGxB3N,IACEoH,EAAAA,EAAAA,IAAmB,CACjB5K,UAAW,GACXyK,sBAAuB,GACvBC,aAAc,GACd8Q,gBAAiB,GACjBtO,QAAQ,EACRnS,QAAS,CAAC,EACVoK,gBAAiB,GACjBuI,OAAQ,CAAC,KAGblK,IACE+e,EAAAA,EAAAA,IAAuB,CACrB1H,cAAe,GACfG,YAAa,GACbG,WAAW,EACXD,UAAW,CAAC,KAIhB9B,EAAa,IACbgB,IAAuB,EAAM,MAoNlB1L,KACC8C,EAAAA,EAAAA,KAACgR,EAAAA,EAAmB,CAClBjkB,KAAMmQ,GACN+T,WAAW,yBAOlB1I,IACCvI,EAAAA,EAAAA,KAAA,OAAK2D,UAAU,yBAAwBnD,UACrCR,EAAAA,EAAAA,KAACC,EAAAA,EAAM,OAGTD,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKkD,UAAU,cAAanD,SAAA,EAC1BR,EAAAA,EAAAA,KAACkR,EAAyB,CACxBnO,WAAYuL,GACZtL,aAAcA,GACdtH,OAAQA,GACRiH,WA/2BItZ,UASlB,GARA8d,GAAiB,GACjBvd,QAAQC,IAAI,gBAAiBkD,GAC7BnD,QAAQC,IAAI,gCAAiCyX,GAC7C1X,QAAQC,IAAI,0BAA2BkD,GACvCnD,QAAQC,IAAI,mBAAoBwf,IAEhC1B,GAAa8C,GAAYA,EAAU,IAEtB,kBAATlgB,GACFX,QAAQC,IAAI,gCAEZue,IAAuB8F,GACdA,EAAKrjB,KAAKqe,IAKf,KAH+B,IAA7BE,GAAkBzd,QAClByd,GAAkB/c,MAAM8kB,GAAMA,EAAEvd,SAAWsV,EAAItV,UAE9B,OAAOsV,EAE1B,MAAMkI,EAAW/H,GAAche,MAAM8lB,GAAMA,EAAEvd,SAAWsV,EAAItV,SACtDyd,GAAsB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUhb,aAAc,GACtCkb,EAAiBpI,EAAI9S,YAAc,GAEnCmb,EAAwBD,EAAezmB,KAAK2mB,GAE9Cpe,IACArG,EAAKmH,SAASsd,EAAGzb,UAAU6C,SAC3ByY,EAAYhlB,MACTolB,GAAOA,EAAG1b,UAAU6C,SAAW4Y,EAAGzb,UAAU6C,UAGzB7B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQya,GAAE,IAAE1Q,MAAO,QAAU0Q,IAGjDE,EAAiB,GA+BvB,OA7BA3kB,EAAKwI,SAASE,IACZ,MAAMkc,EAAepI,GAAYle,MAAMe,GACdA,EAAMb,MAC1BmM,QAAQ,YAAa,IACrBkB,SACuBnD,EAAUmD,SAGtC,IAAK+Y,EAAc,OAEnB,MAAMC,EAAgBP,EAAYhlB,MAC/BolB,GAAOA,EAAG1b,UAAU6C,SAAWnD,EAAUmD,SAGtB0Y,EAAejlB,MAClCmlB,GAAOA,EAAGzb,UAAU6C,SAAWnD,EAAUmD,UAI1C8Y,EAAe7jB,MAAIkJ,EAAAA,EAAAA,GAAC,CAClBhB,UAAWN,EACXO,QAAS2b,EAAanmB,GACtByK,eAAgB,WAEZ2b,EAAgB,CAAE9Q,MAAO,OAAU,CAAEA,MAAO,UAEpD,KAGF/J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKmS,GAAG,IACN9S,WAAY,IAAImb,KAA0BG,IAAe,UAI1D,CACLhJ,IAAgB,GAChB9e,QAAQC,IAAI,yCAIZ,IAAK,IAADgoB,EAAAC,EACF,MAAM,YAAEC,EAAW,aAAEzF,SAAuB0F,EAAAA,EAAAA,IAC1CjlB,EACAyB,GACoC,QAD3BqjB,EACTnS,GAAkBC,0BAAkB,IAAAkS,GAAM,QAANC,EAApCD,EAAsC9kB,YAAI,IAAA+kB,OAAN,EAApCA,EAA4ClS,MAAM,GAAGpW,SACrDe,GACAoJ,GACAqW,GACAY,IAEFhhB,QAAQC,IAAI,kCAAmCkoB,GAC/CnoB,QAAQC,IAAI,mCAAoCyiB,GAGhD,MAAM2F,EAAgBF,EAAYlnB,KAC/BS,IAAI,IAAAsK,EAAA,OAAyD,QAAzDA,EAAKpH,GAAUnD,MAAMe,GAAUA,EAAMZ,KAAOF,EAAKiF,iBAAQ,IAAAqF,OAAA,EAApDA,EAAsDrK,KAAK,IAEvE3B,QAAQC,IAAI,kBAAmBooB,GAG/B,MAAMC,EAAcnlB,EAAKZ,QACtBC,IAAW6lB,EAAc/d,SAAS9H,EAAMb,SAErC4mB,EAAgBplB,EAAKZ,QAAQC,GACjC6lB,EAAc/d,SAAS9H,EAAMb,SAE/B3B,QAAQC,IAAI,gBAAiBqoB,GAC7BtoB,QAAQC,IAAI,kBAAmBsoB,GAG3BA,EAAcxmB,OAAS,IAErB2gB,GACF1F,EAA2B0F,EAAc,CAEvC,GAIJ1iB,QAAQC,IAAI,mCAAoCyiB,IAIlDpE,IAAekK,GAAmB,IAC7BA,KACAD,EAActnB,KAAKuB,IAAK,CAAQb,MAAOa,EAAMb,aAI9C2mB,EAAYvmB,OAAS,IACvBic,GAAcsG,GAAS,IAClBgE,EAAYrnB,KAAIwnB,IAAA,IAAC,MAAE9mB,GAAgB8mB,EAANC,GAAIC,EAAAA,EAAAA,GAAAF,EAAAG,GAAA,OAAAzb,EAAAA,EAAAA,GAAA,CAClC0K,MAAOlW,GACJ+mB,EAAI,OAENpE,KAELvG,GAAa8C,GAAYA,EAAU,IACnC9D,EAA6B,8BAC7BxD,IAAc,GAElB,CAAE,MAAOxY,GACPf,QAAQe,MAAM,6BAA8BA,GAC5Cic,EAA2B,0CAC7B,CAAC,QAEC8B,IAAgB,EAClB,CACF,GA8tBc9F,WA3tBM7V,IACpBnD,QAAQC,IAAI,mCAAoCkD,GAChD,MAAM8iB,EAAmBvB,GAAgBniB,QACtC+c,IACEnc,EAAK1B,MAAMonB,GAAgBA,IAAgBvJ,EAAI,uBAGpD,GADAtf,QAAQC,IAAI,mCAAoCgmB,GAC5CA,EAAkB,CACpB,MAAM6C,EAAkB7C,EAAiBhlB,KAAKS,IAAI,CAChDC,MAAOD,EAAK,uBAGd1B,QAAQC,IAAI6oB,GACZxK,GAAcwK,EAChB,GA8sBc7P,OA3kCGxZ,UAMjB,GALAO,QAAQC,IAAI,sCAAuCyX,GAEnD2H,GAAiB3H,GACjBoH,IAAgB,GAEH,kBAATne,GACF,IAAgB,IAAZ6I,GAAkB,CACpBxJ,QAAQC,IAAI,gCACZ,MAAMY,QAAiBkoB,EACrBrR,EACA5B,GACA2J,IAIF,GADAzf,QAAQC,IAAI,8BAA+BY,GACvCA,EAAU,CACZ,MAAMmoB,EAAmBtR,EAAUzW,KAAK0gB,IACtC,MAAMsH,EAAexJ,GAAche,MAChCC,GAASA,EAAKsI,SAAW2X,EAAU3X,SAGtC,MAAO,CACLA,OAAQ2X,EAAU3X,OAClBE,SAAsB,OAAZ+e,QAAY,IAAZA,OAAY,EAAZA,EAAc/e,SACxBwC,UAAuB,OAAZuc,QAAY,IAAZA,OAAY,EAAZA,EAAcvc,UACzBC,UAAWgV,EAAU/J,SACrBpL,WAAYmV,EAAU9J,MAAM5W,KAAIsV,IAAA,IAAC,UAAEpK,EAAS,QAAEC,GAASmK,EAAA,MAAM,CAC3DpK,YACAC,UACD,IACF,IAGHhE,IAAS2E,EAAAA,EAAAA,IAAiBic,IAE1BlK,IAAgB,EAClB,MACE9e,QAAQ6F,KAAK,2BACbiZ,IAAgB,EAEpB,KAAO,CACL9e,QAAQC,IAAI,8BAEZ,MAAMY,QAAiBqoB,EACrBxR,EACA5B,GACA2J,IAIF,GADAzf,QAAQC,IAAI,8BAA+BY,GACvCA,EAAU,CAAC,IAADsoB,EAAAC,EACZ,MAAMJ,EAAmBtR,EAAUzW,KAAK0gB,IACtC,MAAMsH,EAAexJ,GAAche,MAChCC,GAASA,EAAKsI,SAAW2X,EAAU3X,SAGtC,MAAO,CACLA,OAAQ2X,EAAU3X,OAClBE,SAAsB,OAAZ+e,QAAY,IAAZA,OAAY,EAAZA,EAAc/e,SACxBwC,UAAuB,OAAZuc,QAAY,IAAZA,OAAY,EAAZA,EAAcvc,UACzBC,UAAWgV,EAAU/J,SACrBpL,WAAYmV,EAAU9J,MAAM5W,KAAIqkB,IAAA,IAAC,UAAEnZ,EAAS,QAAEC,GAASkZ,EAAA,MAAM,CAC3DnZ,YACAC,UACD,IACF,IAGHhE,IAAS2E,EAAAA,EAAAA,IAAiBic,IAG1B,MAAMK,EAC+D,QADnDF,EAChBvT,EAAAA,EAAMC,WAAW/C,cAAcgD,kBAAkBC,0BAAkB,IAAAoT,GAC3D,QAD2DC,EAAnED,EACIhmB,YAAI,IAAAimB,OAD2D,EAAnEA,EACUpT,MACI,OAAZqT,QAAY,IAAZA,GAAAA,EAActnB,cACVkU,EAAAA,EAAAA,GAAkBoT,EAAcvV,IAGxCgL,IAAgB,EAClB,MACE9e,QAAQ6F,KAAK,2BACbiZ,IAAgB,EAEpB,YAEM7F,GAAOvB,EACf,EAq/BcwB,SAn/BKzZ,UAKnB,GAHAO,QAAQC,IAAI,iBAAkBU,IAC9BX,QAAQC,IAAI,0BAA2Bmd,GAE1B,kBAATzc,GAGF,OAFAX,QAAQC,IAAI,4CACZgf,IAAiBqF,IAAUA,IAO7B,GAF0B,CAAC,eAAgB,gBAErBha,SAAS3J,MAAUyc,EACvC,OAAKoC,IAAkD,IAA7BA,GAAkBzd,YAI5Cob,GAAqB,QAHnBH,EAA2B,6CAM/B,GAAIwC,GAAkBzd,OAAS,EAAG,CAAC,IAADunB,EAAAC,EAChCvpB,QAAQC,IAAI,uBAAwBuf,IACpCxf,QAAQC,IAAI,4CAA6CyX,GAEzD,MAAMqO,EAAiBvG,GAAkBve,KAAKqe,GAAQA,EAAIzH,QAC1D7X,QAAQC,IAAI,mBAAoB8lB,GAChC,MAAMC,EAAgBD,EAAe9kB,KAAKU,IAAK,CAC7CA,MAAOA,MAET3B,QAAQC,IAAI,kBAAmB+lB,GAC/B,MAAMC,EAAmBvO,EAAUnV,QAChC+c,IAASyG,EAAezb,SAASgV,EAAIzH,SAExC7X,QAAQC,IAAI,kBAAmB0gB,IAC3BA,KACF3C,EAAaiI,GACb1M,IAAc,GACdwE,GAAa8C,GAAYA,EAAU,KAKrCvC,IAAe4H,GAAqB,IAC/BA,KACAF,KAGLjJ,EAA6B,sCACvBwJ,EAAAA,EAAAA,IAAkB3hB,GAAWohB,EAAkD,QAArCsD,EAACxT,GAAkBC,0BAAkB,IAAAuT,GAAM,QAANC,EAApCD,EAAsCnmB,YAAI,IAAAomB,OAAN,EAApCA,EAA4CvT,MAAM,GAAGpW,SAASe,GACjH,GAi8Bc4C,MAAOA,GACP5C,KAAMA,GACN6I,QAASA,GACT8I,OAAQA,GACR+G,WAAYA,GACZC,SAnLKkQ,KACnBxL,EAAa/W,KAAKke,MAAMle,KAAKC,UAAUgY,MACvClB,EAAakB,IACb3F,IAAc,GACdiF,GAAsBiB,IACtBR,IAAgB,GAEH,kBAATte,IACF6d,IAAuB8F,GACrBA,EAAKrjB,KAAKS,IAAIyL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTzL,GAAI,IACP8K,WAAY9K,EAAK8K,WAAWvL,KAAKuB,IAAK2K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjC3K,GAAK,IACR0U,WAAOpP,WAIf,EAmKcyR,cAAeA,MAEjBnD,EAAAA,EAAAA,KAACqT,EAAAA,EAAa,CAEZtmB,KAAMuU,EACNuD,QAASA,GAEToM,WAAW,2BAJNvJ,YAgBjB1H,EAAAA,EAAAA,KAACsT,EAAAA,EAAkB,CACjBlP,KAAMkD,EACNjD,OAAQA,IAAMkD,GAAmB,GACjCgM,OAAQ/L,MAET,EAMMmL,EAAgCtpB,MAC3CiY,EACA5B,EACA2J,KACI,IAADmK,EAAAC,EAAAC,EACH,MAAMC,GACgC,QAApCH,EAAA9T,EAAkBC,0BAAkB,IAAA6T,GAAM,QAANC,EAApCD,EAAsCzmB,YAAI,IAAA0mB,GAAO,QAAPC,EAA1CD,EAA4C7T,aAAK,IAAA8T,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDxW,EAAWwC,EAAkBxC,UAAY,CAAC,EAE1ClM,EAAU,CACdlD,QAASoP,EAASsR,MAClBoF,KAAMD,EAAWnqB,SACjBqqB,eAAgB3W,EAAS4W,aACzBC,cAAe7W,EAAS,uBACxB8W,QAAS,WACTC,MAAO3S,EAAUzW,KAAKS,IACpB,MAAM4oB,EAAY7K,EAAche,MAAM8oB,GAAOA,EAAGvgB,SAAWtI,EAAKsI,SAEhE,MAAO,CACLA,OAAQtI,EAAKsI,OACbE,UAAmB,OAATogB,QAAS,IAATA,OAAS,EAATA,EAAWpgB,WAAY,eACjCwC,WAAoB,OAAT4d,QAAS,IAATA,OAAS,EAATA,EAAW5d,YAAa,UACnCC,UAAWjL,EAAKkW,SAChBpL,WAAY9K,EAAKmW,MAAMtV,QAAQC,GAAUA,EAAM0U,QAC5CjW,KAAKuB,IACJ,MAAM,MAAE0U,GAAmB1U,EAATkmB,GAAIC,EAAAA,EAAAA,GAAKnmB,EAAKgoB,GAChC,OAAArd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKub,GAAI,IACP+B,UAAqB,UAAVvT,EAAoB,MAAQ,OAAK,IAGnD,KAGLlX,QAAQC,IAAI,4BAA6BmH,GAIzC,IAEE,aADuBhH,EAAAA,EAAAA,IAAU,OAHjC,gFAGkDgH,EAEpD,CAAE,MAAOrG,GAEP,MADAf,QAAQe,MAAM,+BAAgCA,GACxCA,CACR,GAGWmoB,EAAmBzpB,MAC9BiY,EACA5B,EACA2J,KACI,IAADiL,EAAAC,EAAAC,EACH,MAAMb,GACgC,QAApCW,EAAA5U,EAAkBC,0BAAkB,IAAA2U,GAAM,QAANC,EAApCD,EAAsCvnB,YAAI,IAAAwnB,GAAO,QAAPC,EAA1CD,EAA4C3U,aAAK,IAAA4U,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDtX,EAAWwC,EAAkBxC,UAAY,CAAC,EAE1ClM,EAAU,CACdlD,QAASoP,EAASsR,MAClBoF,KAAMD,EAAWnqB,SACjBqqB,eAAgB3W,EAAS4W,aACzBC,cAAe7W,EAAS,uBACxB8W,QAAS,WACTC,MAAO3S,EAAUzW,KAAKS,IAAU,IAADmpB,EAC7B,MAAMP,EAAY7K,EAAche,MAAM8oB,GAAOA,EAAGvgB,SAAWtI,EAAKsI,SAIxDif,EAAexJ,EAAche,MAAMqpB,GAAOA,EAAG9gB,SAAWtI,EAAKsI,SAG/Dmc,GACQ,OAAZ8C,QAAY,IAAZA,GAAwB,QAAZ4B,EAAZ5B,EAAczc,kBAAU,IAAAqe,OAAZ,EAAZA,EAA0B9oB,QAAS,GACnCknB,EAAazc,WAAWue,OAAOC,GAC7BtpB,EAAKmW,MAAMpV,MACRD,GACCA,EAAM4J,UAAY4e,EAAc5e,SAChB,QAAhB5J,EAAM0U,UAGNzK,EAAuB,OAAT6d,QAAS,IAATA,OAAS,EAATA,EAAW7d,YACjC,MAAO,CACLzC,OAAQtI,EAAKsI,OACbE,UAAmB,OAATogB,QAAS,IAATA,OAAS,EAATA,EAAWpgB,WAAY,eACjCwC,WAAoB,OAAT4d,QAAS,IAATA,OAAS,EAATA,EAAW5d,YAAa,UACnCC,UAAWjL,EAAKkW,SAChBhL,UAAmB,OAAT0d,QAAS,IAATA,OAAS,EAATA,EAAW1d,WAAY,MACjCqe,mBAAmBxe,IAAe0Z,GAClC3Z,WAAY9K,EAAKmW,MAAM5W,KAAKuB,IAAW,IAAD0oB,EACpC,MAAMjC,EAAexJ,EAAche,MAChCqpB,GAAOA,EAAG9gB,SAAWtI,EAAKsI,SAEvBmhB,EAA4B,OAAZlC,QAAY,IAAZA,GAAwB,QAAZiC,EAAZjC,EAAczc,kBAAU,IAAA0e,OAAZ,EAAZA,EAA0BzoB,MAC7CyJ,GAAMA,EAAEE,UAAY5J,EAAM4J,UAGvBgf,EAA8B,UAAhB5oB,EAAM0U,MACpBmU,EAAiC,QAAhB7oB,EAAM0U,MAG7B,OAAIiU,GAAiBE,EACZ,CACLlf,UAAW3J,EAAM2J,UACjBC,QAAS5J,EAAM4J,QACfqe,UAAW,UAKXU,IAAkBE,EACb,CACLlf,UAAW3J,EAAM2J,UACjBC,QAAS5J,EAAM4J,QACfqe,UAAW,KAKVU,GAAiBE,EACb,MAIJF,GAAiBC,EACb,CACLjf,UAAW3J,EAAM2J,UACjBC,QAAS5J,EAAM4J,QACfqe,UAAW,OAIR,IAAI,IACVloB,OAAO+oB,SACX,KAILtrB,QAAQC,IAAI,sCAAuCmH,GAKnD,IAEE,aADuBhH,EAAAA,EAAAA,IAAU,OAHjC,qFAGkDgH,EAEpD,CAAE,MAAOrG,GAEP,MADAf,QAAQe,MAAM,+BAAgCA,GACxCA,CACR,GC12CF,IAAIwqB,EAAO,KAuFI,SAAS,IAGtB,GAAIhjB,OAAOC,OAAQ,CAGjB,IAAIgjB,GAAe,EAEnBjjB,OAAOC,OAAOwM,SAAS,UAAU,KAC3BwW,EACFxrB,QAAQ6F,KACN,+EAIJ2lB,GAAe,EArGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzCrjB,OAAOqjB,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbJ,EAAAljB,OAAOC,cAAM,IAAAijB,GAAM,QAANC,EAAbD,EAAe1jB,YAAI,IAAA2jB,OAAN,EAAbA,EAAqBlX,cAAc,WACnCD,SAASuX,eAAe,QAGrBD,IACHA,EAActX,SAASwX,cAAc,OACrCF,EAAYjqB,GAAK,OACb2G,OAAOC,QAAUD,OAAOC,OAAOT,KACjCQ,OAAOC,OAAOT,KAAKikB,YAAYH,GAG/BtX,SAASxM,KAAKikB,YAAYH,IAOzBN,IAEHA,EAAOU,EAAAA,WAAoBJ,IAK7BN,EAAKW,QACHrV,EAAAA,EAAAA,MAACsV,EAAAA,GAAQ,CAACvW,MAAOA,EAAAA,EAAMgB,SAAA,EACrBR,EAAAA,EAAAA,KAACzB,EAAe,KAChByB,EAAAA,EAAAA,KAAC0G,EAAe,KAChB1G,EAAAA,EAAAA,KAACgW,EAAAA,GAAc,OAMrB,CAiEMC,GAAO,GAEX,MACErsB,QAAQe,MACN,sEAGN,EArEA,WA2BE,GAAIwH,OAAO+jB,QAAU/jB,OAAO+jB,OAAO/X,SAAU,CAC3C,IAAIgY,EAAiBhkB,OAAO+jB,OAAO/X,SAASwX,cAAc,UAC1DQ,EAAeC,YA1BE,y1BA2BjBjkB,OAAO+jB,OAAO/X,SAASxM,KAAKikB,YAAYO,EAE1C,MACEvsB,QAAQ6F,KAAK,qFAEjB,CAGA4mB,E","sources":["services/api/companion/userGroupService.js","services/api/companion/allPlantSevice.js","services/api/companion/getRouteDetails.js","services/api/companion/updateClasses.js","hooks/useCompanionWidget.js","services/api/companion/fetchCsrfService.js","services/api/companion/assignedPlantService.js","services/api/companion/plantChildrenService.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/comapnaiondataHelpers.js","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/DragAndDrop.jsx","pages/companionWidget/CompanionWidget.jsx","pages/companionWidget/companionIndex.js"],"sourcesContent":["import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/companion/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/companion/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/companion/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handleCompanion = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handleCompanion };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n    const hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        objectId,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: hasNoClass\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanion } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanion(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanion]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n            \"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\"\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanionDropableArea;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./companionWidget.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./comapnaiondataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/PlantAssignment/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useCompanionDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useCompanionDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"Raw_Material\", \"VPMReference\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./CompanionWidget\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["getAllPlants","async","allCollabSpaces","headers","objectId","ENOVIA_BASE_URL","process","UserGroupClasses","console","log","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","type","onComplete","response","onFailure","error","plantDataPromises","map","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","concat","collabSpace","libraryId","member","find","item","title","id","libraryDataURL","classResponse","length","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","filter","plant","some","userClass","all","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","urlObjWAF","searchResponse","routeData","data","RouteID","identifier","RouteStatus","state","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","push","CATitle","CAState","_CASearchResponse$cha","result","split","slice","join","CAurlObjWAF","changeAction","updateClasses","allPlants","sLatestID","revurl","ret","Body","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","getLatestRevision","warn","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","ClassificationAttributes","classItem","Attributes","attr","name","value","updatedAttributes","String","Number","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","reduce","acc","secondUrl","secondResponse","arguments","undefined","body","axios","useCompanionWidget","showErrorToast","useToast","dispatch","useDispatch","email","window","widget","getValue","handleCompanion","setParentDetailsLoading","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","_response$output$resu","ancestor","includes","mfgDetails","itemResponse","ScopeEngItem","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","plantAssignmentAttr","a","allPlantsRemovedAttr","forEach","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","_objectSpread","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","members","getUserGroupCollab","plants","_response$member$0$Cl","initialAssignedClasses","uniqueInAllclasses","parentClass","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","CAName","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","PlantRenderer","_ref","itemId","isRemoveMode","handleRemovePlant","_Fragment","children","_jsxs","style","marginRight","display","alignItems","color","fontWeight","AiOutlineClose","size","cursor","marginLeft","onClick","getTableData","tableData","mappedData","ItemName","Plant","Change","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","sort","b","localeCompare","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","className","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","variant","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","CompanionWidget","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","initialTableData","setInitialTableData","plantId","extractPlantData","row","itemName","selectedTableRows","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","plantObjectData","uniquePlant","asignedPlant","productChildren","getUniquePlant","sourceData","assignedTablePlants","Set","_item$Plant","uniqueTablePlants","updateTableData","updatedData","prevKey","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","errorObj","processErrorObj","prev","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","parse","tableColumns","cell","_ref2","plantList","original","tooltipText","ConfirmationModal","onConfirm","_droppedObjectData$in5","_droppedObjectData$in6","csrfTokenHeaders","selectedTitles","removedTitles","updatedTableData","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","noPlants","handleRemoveData","confirmedRemove","flexDirection","justifyContent","DragAndDropComponent","event","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","parentDetails","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","handleAddData","erroredPlants","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","every","originalPlant","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}