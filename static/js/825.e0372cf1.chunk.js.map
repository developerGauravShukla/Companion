{"version":3,"file":"static/js/825.e0372cf1.chunk.js","mappings":"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","sources":["hooks/useCompanion.js","hooks/useCompanianDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/dataHelpers.js","pages/companionWidget/companionToolbarNativeCta.jsx","pages/companionWidget/DragAndDrop.jsx","pages/companionWidget/companion.jsx","pages/companionWidget/companionIndex.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/PlantAssignment/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./useCompanion\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"./useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanianDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            // \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanianDropableArea;","import React, { useEffect, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanianDropableArea from \"../../hooks/useCompanianDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanianDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const CompanionRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"CompanionRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <CompanionRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // NEW\r\n  onCancel,         // NEW\r\n  setHasChanges     // NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  const handleData = (data) => {\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title,\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true);\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR);\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR);\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {isMFGCA === false && (\r\n          <button\r\n            className=\"btn btn-outline-danger btn-lg m-2\"\r\n            onClick={handleRemove}\r\n          >\r\n            Remove\r\n          </button>\r\n        )}\r\n        {hasChanges && (\r\n          <button\r\n            className=\"btn btn-outline-secondary btn-lg m-2\"\r\n            onClick={onCancel}\r\n          >\r\n            Cancel\r\n          </button>\r\n        )}\r\n      </div>\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant();\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef}\r\n            data={uniquedata}\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","// Copy of plantAssignment/DragAndDrop.jsx for companionWidget\r\nimport React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./companionWidget.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div className=\"mt-3\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\";\r\n                  link.download = \"plant_assignment_template.xlsx\";\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef}\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\",\r\n                }}\r\n              >\r\n                <Button\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled}\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanianDropableArea from \"../../hooks/useCompanianDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/PlantAssignment/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useCompanianDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useCompanianDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"Raw_Material\", \"VPMReference\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport Companion from \"./companion\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nexport function start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <Companion />\r\n      <ToastContainer />\r\n    </Provider>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n// Export a default function for dynamic import compatibility\r\nexport default function () {\r\n  if (window.widget) {\r\n    start();\r\n  }\r\n}\r\n"],"names":["ENOVIA_BASE_URL","process","usePlantAssignment","showErrorToast","useToast","dispatch","useDispatch","email","window","widget","getValue","console","log","handlePlantAssignment","async","collabSpace","state","objectId","type","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","concat","response","callEnoviaWebService","status","output","realizedChanges","map","realizedChange","where","identifier","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","sLatestID","revurl","ret","relativePath","Body","data","id","source","error","_response$output$resu","versions","results","result","ancestors","some","ancestor","getLatestRevision","includes","mfgDetails","url","itemResponse","member","ScopeEngItem","getScopedItms","undefined","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ClassificationAttributes","filter","ext","plantAssignmentAttr","Attributes","find","a","name","allPlantsRemovedAttr","value","length","updateClasses","attr","forEach","classification","classId","ClassID","plantName","erpStatus","isPlantClass","flowDownCA","_allPlants$find","attribute","p","title","push","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","Promise","all","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","warn","plants","fetchAssignedPlants","success","setPlantObjectData","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","useCompanianDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","CompanionRenderer","_ref","itemId","isRemoveMode","handleRemovePlant","_Fragment","children","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","AiOutlineClose","size","cursor","marginLeft","onClick","getTableData","tableData","mappedData","ItemName","Plant","Change","CAName","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","sort","b","localeCompare","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","className","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","variant","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","usePlantDropableArea","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","Button","link","createElement","href","download","click","Form","Group","controlId","Control","multiple","onChange","disabled","FontAwesomeIcon","icon","faRotateLeft","CompanionWidget","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","initialTableData","setInitialTableData","securityContext1","plantId","item","_objectSpread","extractPlantData","row","itemName","selectedTableRows","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","plantObjectData","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","uniqueTablePlants","updateTableData","updatedData","prevKey","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","errorObj","processErrorObj","prev","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","JSON","parse","stringify","tableColumns","cell","_ref2","plantList","original","tooltipText","Array","isArray","ConfirmationModal","onConfirm","_droppedObjectData$in5","_droppedObjectData$in6","csrfTokenHeaders","selectedTitles","removedTitles","updatedTableData","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","noPlants","handleRemoveData","confirmedRemove","flexDirection","justifyContent","DragAndDropComponent","event","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","parentDetails","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","handleAddData","erroredPlants","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","every","originalPlant","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","start","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","appendChild","ReactDOM","render","Provider","Companion","ToastContainer","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}