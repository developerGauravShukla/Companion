{"version":3,"file":"static/js/298.b862a3f7.chunk.js","mappings":"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","sources":["pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/PlantAssignment/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"Raw_Material\", \"VPMReference\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","useState","console","log","useEffect","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","data","items","length","error","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","PlantRenderer","_ref","plants","itemId","isRemoveMode","handleRemovePlant","isMFGCA","_Fragment","children","map","plant","_jsxs","style","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","onClick","PlantID","getTableData","tableData","type","CAData","mappedData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","sort","a","b","localeCompare","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","state","hasChanges","onCancel","setHasChanges","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","className","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","variant","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","objectId","objectType","class","Button","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","onChange","disabled","FontAwesomeIcon","icon","faRotateLeft","PlantAssignment","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","initialTableData","setInitialTableData","securityContext1","getValue","useCallback","plantId","item","_objectSpread","extractPlantData","plantData","row","itemName","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","hasNoClass","productChildren","headers","getUniquePlant","replace","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","forEach","tableItem","_allPlants$find2","finalObj","classid","find","classitem","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","prev","undefined","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","process","EIN","getCardData","JSON","parse","stringify","tableColumns","cell","_ref2","plantList","original","tooltipText","Array","isArray","ConfirmationModal","onConfirm","_droppedObjectData$in5","_droppedObjectData$in6","csrfTokenHeaders","fetchCsrfToken","selectedTitles","removedTitles","updatedTableData","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","noPlants","setPlantObjectData","handleRemoveData","confirmedRemove","flexDirection","justifyContent","DragAndDropComponent","event","handleFileChange","finally","processManufacturingCA","value","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","every","originalPlant","hasNoPlants","ItemMBOM","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}