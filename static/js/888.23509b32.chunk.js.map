{"version":3,"file":"static/js/888.23509b32.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useToast.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","isDragging","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","ref","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","getValue","color","fontWeight","getWidgetStorageKey","widgetType","console","log","warn","data","editable","meta","latestRevision","droppedRevision","onSelectableRowsChange","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","_Fragment","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","useToast","showToast","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","progress","otherOptions","toast","showSuccessToast","options","arguments","undefined","showErrorToast","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","refreshWidgetData","async","dataItems","handleDrop","Error"],"sourceRoot":""}