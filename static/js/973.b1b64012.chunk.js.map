{"version":3,"file":"static/js/973.b1b64012.chunk.js","mappings":"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","sources":["components/List/List.jsx","components/Card/Card.jsx","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/SearchInput/SearchInput.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useDroppableArea.js","hooks/useInterComSearch.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/getRouteDetails.js","services/api/PlantAssignment/updateClasses.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","hooks/useRevisions.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea();\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/PlantAssignment/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n    const hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        objectId,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: hasNoClass\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            // \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","data","isColumn","onDragStart","onDragEnd","titleRef","useRef","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","useEffect","current","makeDraggable","_jsxs","className","concat","children","_jsx","ref","title","style","border","type","owner","paddingLeft","_Fragment","EIN","Description","setIsColumn","useState","Card","width","Img","src","imageURL","alt","CardBody","List","onClick","toggleFlexDirection","Image","widgetType","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","initializeDroppableArea","hasInitializedDroppable","height","isDragging","setIsDragging","DragAndDropStandAlone","CardComponent","handleDragStart","handleDragEnd","onSearch","disabled","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","focus","useBOSWidget","showErrorToast","useToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","console","log","handleBOSWidget","async","collabSpace","objectId","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","length","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","map","sSpec","id","dataelements","secondaryTitle","revision","stateNLS","name","revisionBody","forEach","child","body","identifier","source","relativePath","push","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","i","charCodeAt","results","item","latestVersion","versions","reduce","latest","doc","some","version","_objectSpread","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","warn","setSpecDocument","error","isDropped","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","fetchRevisionsAndParents","useRevisions","revisionParentData","Promise","all","parentDetails","_dataItems$3","includes","MSG_INVALID_OBJECT_TYPE","setTimeout","useInterComSearch","socket","setSocket","InterCom","setInterCom","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","WAFData","loadWAFData","resolve","reject","authenticatedRequest","url","method","onComplete","onFailure","searchResponse","routeData","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","_CASearchResponse$cha","result","split","slice","join","CAurlObjWAF","changeAction","updateClasses","allPlants","sLatestID","revurl","ret","Body","Array","isArray","ancestors","getLatestRevision","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","member","ClassificationAttributes","filter","classItem","Attributes","attr","updatedAttributes","String","Number","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","acc","secondUrl","secondResponse","arguments","undefined","axios","usePlantAssignment","handlePlantAssignment","ItemDetails","CAAllPlantsData","getAllPlants","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","_response$output$resu","ancestor","mfgDetails","itemResponse","ScopeEngItem","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","plantAssignmentAttr","a","allPlantsRemovedAttr","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","getUserGroupCollab","allCollabSpaces","plants","_response$member$0$Cl","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","parentClass","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","CAName","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","showSuccessToast","api","post","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}