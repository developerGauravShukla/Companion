{"version":3,"file":"static/js/357.26f4f68d.chunk.js","mappings":"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","sources":["components/Modal/customModal.jsx","components/Popup/Popup.jsx","services/api/companion/plantChildrenService.js","services/api/companion/getRouteDetails.js","services/api/companion/updateClasses.js","services/api/companion/processPlantsService.js","services/api/companion/fetchCsrfService.js","hooks/useCompanionWidget.js","services/api/companion/allPlantSevice.js","services/api/companion/assignedPlantService.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/CompanionWidget.jsx","pages/companionWidget/companionIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { callEnoviaWebService } from \"../../../utils/helpers\";\r\nconst ENOVIA_BASE_URL = \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\";\r\n\r\nconst ClassDetails = [];\r\n/**\r\n * Generic helper to call Enovia Web Service\r\n * @param {string} method - HTTP method (GET, POST)\r\n * @param {string} url - Full URL for the API call\r\n * @param {string|object} body - Request body as string or object\r\n * @param {object} headers - Headers object\r\n * @returns {Promise<object>} - Parsed JSON response\r\n */\r\n// async function callEnoviaWebService(method, url, body, headers) {\r\n//   const options = {\r\n//     method,\r\n//     headers: {\r\n//       ...headers,\r\n//       \"Content-Type\": \"application/json\"\r\n//     }\r\n//   };\r\n \r\n//   if (body) {\r\n//     options.body = typeof body === \"string\" ? body : JSON.stringify(body);\r\n//   }\r\n \r\n//   const response = await fetch(url, options);\r\n//   if (!response.ok) {\r\n//     throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\r\n//   }\r\n//   return response.json();\r\n// }\r\n \r\n/**\r\n * Get Manufacturing Item identifiers from an engineering item ID\r\n * @param {object} headers\r\n * @param {string} engItemId\r\n * @returns {Promise<string[]>} - Array of manufacturing item identifiers\r\n */\r\nasync function getManufacturingItems(headers, engItemId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/invoke/dsmfg:getMfgItemsFromEngItem`;\r\n  const body = [engItemId];\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n    if (response.output.totalItems > 0 && Array.isArray(response.output.member)) {\r\n        return response.output.member.map(item => item.identifier);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching manufacturing items:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get detailed info for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object|null>} - Details with name, title, type, createdFrom, identifier\r\n */\r\nasync function getMfgItemDetails(headers, identifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}?$mask=dsmfg:MfgItemMask.Details`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Manufacturing Item URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    console.log(\"Response member:\", response.output.member);\r\n    if ( response &&\r\n        response.output &&\r\n        response.output.totalItems > 0 &&\r\n        Array.isArray(response.output.member) &&\r\n        response.output.member.length > 0) {\r\n      const item = response.output.member[0];\r\n      console.log(\"item:\", item);\r\n      return {\r\n        identifier: item.id,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        createdFrom: item.createdFrom || null\r\n      };\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching details for identifier ${identifier}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get plant class IDs assigned to a manufacturing item (filtering where PlantAssignmentClass is true)\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant ClassIDs\r\n */\r\nasync function getPlantClassIDs(headers, mfgIdentifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${mfgIdentifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Plant Class IDs URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0 &&\r\n      response.output.member[0].ClassificationAttributes &&\r\n      Array.isArray(response.output.member[0].ClassificationAttributes.member)\r\n    ) {\r\n      const classMembers = response.output.member[0].ClassificationAttributes.member;\r\n      return classMembers\r\n        .filter(classItem => {\r\n          const plantAssignmentAttr = (classItem.Attributes || []).find(attr => attr.name === \"PlantAssignmentClass\");\r\n          return plantAssignmentAttr && plantAssignmentAttr.value === true;\r\n        })\r\n        .map(classItem => classItem.ClassID);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(`Error fetching plant class IDs for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get Plant title by ClassID\r\n * @param {object} headers\r\n * @param {string} classId\r\n * @returns {Promise<string|null>} - Plant title or null if not found\r\n */\r\nasync function getPlantTitleByClassID(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0\r\n    ) {\r\n      return response.output.member[0].title || null;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching plant title for class ID ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get all assigned plant titles for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant titles\r\n */\r\nasync function getAssignedPlants(headers, mfgIdentifier) {\r\n  try {\r\n    const classIDs = await getPlantClassIDs(headers, mfgIdentifier);\r\n    if (classIDs.length === 0) return [];\r\n \r\n    const plantTitles = [];\r\n    for (const classId of classIDs) {\r\n        const existing = ClassDetails.find(item => item.classid === classId);\r\n        \r\n        if (existing) {\r\n            // If classId is already in ClassDetails, push its title to plantTitles\r\n            plantTitles.push(existing.title);\r\n        } else {\r\n            // If not, fetch title, then push to both ClassDetails and plantTitles\r\n            const title = await getPlantTitleByClassID(headers, classId);\r\n            if (title) {\r\n            ClassDetails.push({ classid: classId, title });\r\n            plantTitles.push(title);\r\n            }\r\n        }\r\n        }\r\n    return plantTitles;\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned plants for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Expand children manufacturing items for a given identifier\r\n * Exclude those of type \"DELFmiFunctionIdentifiedInstance\"\r\n * Add assigned plants info for each child\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object[]>} - Array of child objects with id, name, type, title, and AssignedPlants\r\n */\r\nasync function getMFGChilders(headers, identifier) {\r\n    const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/expand`;\r\n    const body = {\r\n      expandDepth: 1,\r\n      withPath: true\r\n    };\r\n     \r\n \r\n    try {\r\n      const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n \r\n      if (\r\n        response.status &&\r\n        response.output &&\r\n        Array.isArray(response.output.member)\r\n      ) {\r\n        // Filter children (exclude DELFmiFunctionIdentifiedInstance)\r\n        const children = response.output.member.filter(\r\n          item => item.type && item.type !== \"DELFmiFunctionIdentifiedInstance\"\r\n        );\r\n \r\n        // Enrich each child with AssignedPlants\r\n        const enrichedChildren = await Promise.all(\r\n          children.map(async child => {\r\n            const assignedPlants = await getAssignedPlants(headers, child.id);\r\n            return {\r\n              id: child.id,\r\n              type: child.type,\r\n              name: child.name,\r\n              title: child.title || null,\r\n              AssignedPlants: assignedPlants\r\n            };\r\n          })\r\n        );\r\n \r\n        return enrichedChildren;\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching children for identifier ${identifier}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n \r\n \r\n/**\r\n * Main method that prepares the output data\r\n * @param {object} headers\r\n * @param {string} engItemId - Engineering Item ID\r\n * @param {string} droppedMfgID - Manufacturing Item ID to flag as currentObject\r\n * @returns {Promise<object[]>} - Array of objects with manufacturing details and assigned plants and children\r\n */\r\nexport async function prepareDataOutput(headers, droppedMfgID, engItemId) {\r\n  try {\r\n    const identifiers = await getManufacturingItems(headers, engItemId);\r\n    console.log(\"Manufacturing Identifiers:\", identifiers);\r\n    if (identifiers.length === 0) return [];\r\n \r\n    const detailsArray = await Promise.all(\r\n      identifiers.map(id => getMfgItemDetails(headers, id))\r\n    );\r\n\r\n    console.log(\"Manufacturing Details:\", detailsArray);\r\n \r\n    const items = detailsArray.filter(item => item !== null);\r\n \r\n    // Determine which items are parents (no createdFrom reference from others)\r\n    const createdFromSet = new Set(\r\n      items\r\n        .map(item => item.createdFrom)\r\n        .filter(Boolean)\r\n        .map(cf => cf.split(\" \")[0])\r\n    );\r\n\r\n    console.log(\"Created From Set:\", createdFromSet);\r\n \r\n    const result = [];\r\n \r\n    for (const item of items) {\r\n      const isParent = createdFromSet.has(item.name);\r\n      const currentObject = item.identifier === droppedMfgID;\r\n      console.log(`Processing item: ${item.name}, isParent: ${isParent}, currentObject: ${currentObject}`);\r\n \r\n      // Get assigned plants for each manufacturing item\r\n      const assignedPlants = await getAssignedPlants(headers, item.identifier);\r\n      console.log(`Assigned Plants for Hello:`, assignedPlants);\r\n \r\n      // Expand children if parent or currentObject\r\n      let children = [];\r\n      if (isParent || currentObject) {\r\n        children = await getMFGChilders(headers, item.identifier);\r\n      }\r\n \r\n      result.push({\r\n        identifier: item.identifier,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        isParent,\r\n        currentObject,\r\n        AssignedPlants: assignedPlants,\r\n        children\r\n      });\r\n    }\r\n\r\n    console.log(\"Prepared Data Output:\", result);\r\n \r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Error in prepareDataOutput:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n \r\n//Plants for popup\r\nexport async function preparePlantLists(preparedDataOutput, engItemId) {\r\n    // 1. Get plants assigned to the engineering item\r\n    const engItemPlants = await getAssignedPlants(engItemId);\r\n \r\n    // 2. Find the current MFG item (where currentObject === true)\r\n    const currentMfgItem = preparedDataOutput.find(mfg => mfg.currentObject === true);\r\n \r\n    if (!currentMfgItem) {\r\n      console.warn(\"Current MFG item not found in prepared data output.\");\r\n      return {\r\n        AssignedPlants: [],\r\n        AvailablePlants: engItemPlants\r\n      };\r\n    }\r\n \r\n    // Assigned plants of current MFG\r\n    const assignedPlants = currentMfgItem.AssignedPlants || [];\r\n \r\n    // 3. Collect plants assigned to all other MFG items except the parent MFG item\r\n    const otherPlants = [];\r\n \r\n    preparedDataOutput.forEach(mfgItem => {\r\n      if (!mfgItem.isParent) {  // exclude parent MFG plants\r\n        const plants = mfgItem.AssignedPlants || [];\r\n        plants.forEach(plant => {\r\n          if (!otherPlants.includes(plant)) {\r\n            otherPlants.push(plant);\r\n          }\r\n        });\r\n      }\r\n    });\r\n \r\n    // 4. Calculate available plants: engItemPlants - otherPlants\r\n    const availablePlants = engItemPlants.filter(plant => !otherPlants.includes(plant));\r\n\r\n    console.log(\"Assigned Plants:\", assignedPlants);\r\n    console.log(\"Available Plants:\", availablePlants);\r\n\r\n\r\n    return {\r\n      AssignedPlants: assignedPlants,\r\n      AvailablePlants: availablePlants\r\n    };\r\n  }","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/companion/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/companion/updateClasses\";\r\nimport {prepareDataOutput, preparePlantLists} from \"../services/api/companion/processPlantsService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/companion/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handleCompanion = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // // Step 1: Fetch user group collaboration spaces\r\n        // const userGroupCollab = await getUserGroupCollab(\r\n        //   headers,\r\n        //   objectId,\r\n        //   email\r\n        // );\r\n        // console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        // let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] All CollabSpaces:\",\r\n        //   allCollabSpaces\r\n        // );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        // let allPlants = [];\r\n        // if (allCollabSpaces.length > 0) {\r\n        //   allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        //   console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        // }\r\n\r\n        //here we have to get from ScopeLined EngineeringItem. for companion widget---->\r\n        let allPlants = [];\r\n        const scopeLinekdData = await getScopedItms(objectId,headers);\r\n        console.log(\"[Use Companion] Scope Linked Data:\", scopeLinekdData);\r\n        if(scopeLinekdData.identifier){\r\n          allPlants = await getPlantClasses(headers, scopeLinekdData.identifier);\r\n\r\n          const prepareData = await prepareDataOutput(headers, objectId, scopeLinekdData.identifier);\r\n\r\n          console.log(\"[Use Companion] Prepare Data Output:\", prepareData);\r\n          // Store the prepared product/plant hierarchy in Redux so it can be accessed by any component that needs the product children structure\r\n          dispatch(setProductChildren(prepareData)); //\r\n          \r\n          const plantLists = await preparePlantLists(prepareData, headers);\r\n          console.log(\"[Use Companion] Plant Lists:\", plantLists);\r\n          // Store AssignedPlants and AvailablePlants in Redux for use in table and popup\r\n          dispatch(setPlantObjectData(plantLists));\r\n        }\r\n\r\n        console.log(\"[Companion] All Plants:\", allPlants);\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            console.log(\"[Use Plant Assignment] Plant Object Data:\", plants.data.plantData);\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        // TODO : Need Update for companion widget\r\n\r\n          const typeList = [\"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\",\r\n            \"Raw_Material\"];\r\n        if (typeList.includes(type)) {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handleCompanion };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getPlantClasses(headers, objectId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (itemResponse.status && itemResponse.output) {\r\n      const classExtensions = itemResponse.output.member[0].ClassificationAttributes?.member || [];\r\n \r\n      const result = [];\r\n \r\n      for (const classItem of classExtensions) {\r\n        const id = classItem.ClassID;\r\n        const attributes = classItem.Attributes || [];\r\n \r\n        const plantAssignmentClass = attributes.find(attr => attr.name === 'PlantAssignmentClass')?.value;\r\n \r\n        if (plantAssignmentClass) {\r\n          const title = await getClassTitleById(headers, id);\r\n          result.push({\r\n            id,\r\n            title\r\n          });\r\n        }\r\n      }\r\n \r\n      return result;\r\n    } else {\r\n      console.log(`No valid response for object ID ${objectId}`);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${objectId}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\nasync function getClassTitleById(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (response.status && response.output && response.output.member && response.output.member.length > 0) {\r\n      const classInfo = response.output.member[0];\r\n      return classInfo.title || null;\r\n    } else {\r\n      console.log(`No class found for classId ${classId}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching class title for classId ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    // ClassExtensions = ClassExtensions.filter(ext => {\r\n    //   const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n    //   const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n    //   return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    // });\r\n    // const hasNoClass= ClassExtensions.some(ext => {\r\n    //   const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n    //   return attr?.value === true;\r\n    // });\r\n \r\n    // if (ClassExtensions.length===0){\r\n    //   ClassExtensions =  await updateClasses(\r\n    //     headers,\r\n    //     allPlants,\r\n    //     objectId,\r\n    //     state,\r\n    //     type\r\n    //     );\r\n    // }\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: false\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n  MSG_INVALID_MFG_TYPES,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanion } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanion(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanion]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            // \"VPMReference\",\r\n            // \"Raw_Material\",\r\n            // \"Change Action\",\r\n            \"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\"\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_MFG_TYPES);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanionDropableArea;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\n\r\n// --- Only popup logic & data for \"Add Plants\", plus the table display ---\r\n\r\nconst CompanionWidget = () => {\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n\r\n  // Redux selectors for popup and add-plant logic\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  const type = useSelector(\r\n    (state) =>\r\n      state.droppedObject.droppedObjectData?.initialDraggedData?.data?.items?.[0]\r\n        ?.objectType\r\n  );\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n\r\n  // Calculate plants shown in popup\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) => item.title.replace(/^Plant /, \"\"));\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map?.((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    // For MFGCA, show all plants; else only unique\r\n    return isMFGCA\r\n      ? allPlants.map((plant) => ({ title: plant }))\r\n      : uniqueTablePlants;\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]);\r\n\r\n  // Update uniqueData for popup\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n\r\n  // Memoized table data for the popup\r\n  const uniqueTableData = useMemo(() => {\r\n    return uniqueData.map((d) => ({ ...d }));\r\n  }, [uniqueData]);\r\n\r\n  // For demo, simple columns for table\r\n  const columns = useMemo(\r\n    () => [\r\n      { Header: \"Plant Name\", accessor: \"PlantName\" },\r\n      { Header: \"Plant ID\", accessor: \"PlantID\" },\r\n      { Header: \"PlantERPStatus\", accessor: \"PlantERPStatus\" },\r\n      { Header: \"Color\", accessor: \"color\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // Handle adding plants from popup\r\n  const handleAdded = useCallback(\r\n    (data) => {\r\n      setTableKey((prevKey) => prevKey + 1);\r\n      if (type === \"Change Action\") {\r\n        setCAItemDetailsTable((prev) => {\r\n          return prev.map((row) => {\r\n            const shouldUpdate =\r\n              selectedTableRows.length === 0 ||\r\n              selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n            if (!shouldUpdate) return row;\r\n\r\n            const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n            const reduxPlants = reduxRow?.ItemPlants || [];\r\n            const existingPlants = row.ItemPlants || [];\r\n\r\n            const updatedExistingPlants = existingPlants.map((ep) => {\r\n              const shouldUpdateColor =\r\n                isMFGCA &&\r\n                data.includes(ep.PlantName.trim()) &&\r\n                reduxPlants.some(\r\n                  (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n                );\r\n              return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n            });\r\n\r\n            const newPlantsToAdd = [];\r\n            data.forEach((plantName) => {\r\n              const matchedPlant = CAAllPlants.find((plant) => {\r\n                const formattedTitle = plant.title.replace(/^Plant\\s+/, \"\").trim();\r\n                return formattedTitle === plantName.trim();\r\n              });\r\n              if (!matchedPlant) return;\r\n\r\n              const existsInRedux = reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === plantName.trim()\r\n              );\r\n              const existsInTable = existingPlants.some(\r\n                (ep) => ep.PlantName.trim() === plantName.trim()\r\n              );\r\n              if (!existsInTable) {\r\n                newPlantsToAdd.push({\r\n                  PlantName: plantName,\r\n                  PlantID: matchedPlant.id,\r\n                  PlantERPStatus: \"Pending\",\r\n                  ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n                });\r\n              }\r\n            });\r\n\r\n            // Update the tableData for rendering\r\n            setTableData((prevTable) => [\r\n              ...prevTable,\r\n              ...newPlantsToAdd\r\n            ]);\r\n            return {\r\n              ...row,\r\n              ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n            };\r\n          });\r\n        });\r\n      }\r\n      setHasChanges(true);\r\n    },\r\n    [\r\n      CAAllPlants,\r\n      CAItemDetails,\r\n      isMFGCA,\r\n      selectedTableRows,\r\n      type,\r\n      setCAItemDetailsTable,\r\n      setTableData,\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <CompanionToolbarNativeCta\r\n        uniquedata={uniqueTableData}\r\n        onAddPlant={handleAdded}\r\n        hasChanges={hasChanges}\r\n        setHasChanges={setHasChanges}\r\n      />\r\n      <div style={{ marginTop: \"2rem\" }}>\r\n        <ReusableTable\r\n          key={tableKey}\r\n          data={tableData}\r\n          columns={columns}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./CompanionWidget\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","show","onHide","title","children","footerButtons","_jsxs","Modal","size","centered","_jsx","Header","closeButton","Title","Body","Footer","map","btn","index","Button","variant","onClick","label","forwardRef","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_Fragment","getRowModel","forEach","toggleSelected","style","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","GetFlowDownCADetails","async","flowDownCA","headers","CADetails","CAAtt","console","log","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","error","urlObjWAF","concat","searchResponse","routeData","find","RouteID","identifier","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","push","CATitle","CAState","_CASearchResponse$cha","result","split","slice","join","CAurlObjWAF","changeAction","updateClasses","allPlants","objectId","sLatestID","revurl","ret","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","getLatestRevision","warn","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","member","ClassificationAttributes","filter","classItem","Attributes","some","attr","name","value","updatedAttributes","String","Number","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","reduce","acc","secondUrl","secondResponse","arguments","undefined","body","axios","ClassDetails","getPlantTitleByClassID","totalItems","getAssignedPlants","mfgIdentifier","classIDs","plantAssignmentAttr","getPlantClassIDs","plantTitles","existing","classid","getMFGChilders","expandDepth","withPath","all","assignedPlants","child","AssignedPlants","prepareDataOutput","droppedMfgID","engItemId","identifiers","getManufacturingItems","detailsArray","createdFrom","getMfgItemDetails","items","createdFromSet","Set","Boolean","cf","isParent","has","currentObject","useCompanionWidget","showErrorToast","dispatch","useDispatch","email","window","widget","getValue","handleCompanion","collabSpace","setParentDetailsLoading","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","allCollabSpaces","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","getAllPlants","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","_response$output$resu","ancestor","includes","mfgDetails","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","itemResponse","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","a","allPlantsRemovedAttr","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","setCAItemDetails","setIsMFGCA","setCAHeaders","scopeLinekdData","_itemResponse$output$3","classExtensions","_attributes$find","getClassTitleById","getPlantClasses","prepareData","setProductChildren","plantLists","preparedDataOutput","engItemPlants","currentMfgItem","mfg","AvailablePlants","otherPlants","mfgItem","availablePlants","preparePlantLists","setPlantObjectData","plants","_response$member$0$Cl","initialAssignedClasses","uniqueInAllclasses","parentClass","replace","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setHeaders","getProductChildren","type_filter_bo","type_filter_rel","Method","_objectSpread","childs","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","fetchProductChildren","getCaDetails","objectID","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","ScopeEngItem","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_MFG_TYPES","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","_availablePlantRef$cu","current","AvailablePlant","newItems","Seq","Status","Change","CAStatus","MBom","CompanionWidget","uniqueData","setUniqueData","tableKey","setTableKey","CAItemDetailsTable","setCAItemDetailsTable","tableData","setTableData","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAisMFGCA","selectedTableRows","_state$droppedObject$","_state$droppedObject$2","_state$droppedObject$3","_state$droppedObject$4","_state$droppedObject$5","uniquePlant","plantObjectData","getUniquePlant","sourceData","assignedTablePlants","_item$Plant","_item$Plant$map","Plant","call","uniqueTablePlants","uniqueTableData","d","accessor","handleAdded","prevKey","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","color","newPlantsToAdd","matchedPlant","existsInRedux","prevTable","CompanionToolbarNativeCta","marginTop","ReusableTable","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}