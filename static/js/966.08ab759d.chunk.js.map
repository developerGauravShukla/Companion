{"version":3,"file":"static/js/966.08ab759d.chunk.js","mappings":"qNAQA,MAkEA,EAlE6BA,IAAiB,IAAhB,OAAEC,GAAQD,EACtC,MAAQE,WAAYC,IAAsBC,EAAAA,EAAAA,MACpC,cAAEC,IAAkBC,EAAAA,EAAAA,KACpBJ,EAAaD,GAAUE,EAwC7B,OACEI,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,2BAA0BF,SAAA,EAEpCF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJN,UAAU,iBAEZJ,EAAAA,EAAAA,KAAA,QAAMI,UAAU,qBAAoBF,SAAC,mBACrCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAII,UAAU,aACdJ,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,QAC/BF,EAAAA,EAAAA,KAAA,MAAII,UAAU,gBAEhBJ,EAAAA,EAAAA,KAACW,EAAAA,EAAW,CAACC,SAvDGC,IAmCpBf,EAAce,EAlCK,CACjBC,MAAO,SACPC,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAIzBA,GACAA,EAAgBC,OAAS,GACzBD,EAAgB,GAAGE,GAEnBhC,EAAW,CACT,CACEiC,SAAUH,EAAgB,GAAGE,GAC7BE,WAAYJ,EAAgB,GAAG,sBAInCK,QAAQC,KAAK,wCACf,GAGwD,QAsBvD,C,mRCpEA,MCAMC,EAAuBC,MAAOC,EAAYC,KACrD,IAAIC,EAAY,CAAEC,MAAO,IACzBP,QAAQQ,IAAI,iCACZ,MAAMC,EAAkBC,4DAExB,IACE,MAAMC,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYV,SACT,IAAIW,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRd,UACAe,KAAM,OACNC,WAAaC,IACXtB,QAAQQ,IAAI,qBAAsBc,GAElCP,EAAQO,EAAS,EAEnBC,UAAYC,IACVxB,QAAQwB,MAAM,kBAAmBA,GACjCR,EAAOQ,EAAM,GAEf,IAKN,IAAIC,EAAS,GAAAC,OAAMjB,EAAe,uDAAAiB,OAAsDtB,GACxF,MAAMuB,QAAuBd,EAAUY,GACjCG,IAA2B,OAAdD,QAAc,IAAdA,OAAc,EAAdA,EAAgBE,OAAQ,IAAIC,MAAKC,GAAsB,UAAdA,EAAKX,OAEjE,GAAIQ,EAAW,CACX,MAAMI,EAAUJ,EAAUK,WACpBC,EAAcN,EAAUO,MACxBC,EAAQ,GAAAV,OAAMjB,EAAe,sCAAAiB,OAAqCM,GAClEK,QAAqBxB,EAAUuB,GAC/BE,IAA0B,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcR,OAAQ,IAAIC,MAAKC,GAAsB,kBAAdA,EAAKX,OAChE,GAAGkB,EAAW,CACV,MAAMC,EAAUD,EAAWL,WACrBO,EAAK,GAAAd,OAAMjB,EAAe,4CAAAiB,OAA2Ca,EAAO,qCAC5EE,QAAmB5B,EAAU2B,GACnC,GAAIC,EACA,IAAK,MAAMV,KAAQU,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdX,EAAKX,KAA0B,CACjC,MAAMuB,EAAQ,GAAAjB,OAAMjB,EAAe,4CAAAiB,OAA2CK,EAAKE,YAC7EW,QAAsB/B,EAAU8B,GAClCC,GACAtC,EAAUC,MAAMsC,KAAK,CACnBC,QAASF,EAAc5D,MACvB+D,QAASH,EAAcT,OAG/B,CAGV,CACA7B,EAAoB,SAAI4B,EACxB5B,EAAoB,SAAIF,CAC5B,KAAQ,CAAC,IAAD4C,EACN,MAAMC,EAAS7C,EAAW8C,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,KAEvD,IAAIC,EAAW,GAAA3B,OAAMjB,EAAe,mEAAAiB,OAAkEuB,GACtG,MACMV,EAA0C,QAAnCS,SADkBnC,EAAUwC,IACRC,aAAa,UAAE,IAAAN,OAAA,EAAhCA,EAAkCf,WAC3CO,EAAK,GAAAd,OAAMjB,EAAe,4CAAAiB,OAA2Ca,EAAO,qCAC5EE,QAAmB5B,EAAU2B,GACjC,GAAIC,EACF,IAAK,MAAMV,KAAQU,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdX,EAAKX,KAA0B,CACjC,MAAMuB,EAAQ,GAAAjB,OAAMjB,EAAe,4CAAAiB,OAA2CK,EAAKE,YAC7EW,QAAsB/B,EAAU8B,GAClCC,GACAtC,EAAUC,MAAMsC,KAAK,CACnBC,QAASF,EAAc5D,MACvB+D,QAASH,EAAcT,OAG/B,CAGJ7B,EAAoB,SAAI,WACxBA,EAAoB,SAAIF,CAC5B,CAEA,OADAJ,QAAQQ,IAAI,mBAAoBF,GACzBA,CACT,CAAE,MAAOkB,GAEP,MADAxB,QAAQwB,MAAM,qBAAsBA,GAC9BA,CACR,G,cCxFK,MAAM+B,EAAgBpD,MACzBE,EACAmD,EACA1D,EACAqC,EACAf,KAEA,IACE,MAAMX,EAAkBC,4DAClB+C,QAsIZtD,eAAiC8B,EAAYb,EAAMf,GAC/C,MAAMI,EAAkBC,4DAClBgD,EAAM,GAAAhC,OAAMjB,EAAe,+CACjC,IAAIkD,EAAM,GACV,IACE,MAKMC,EAAO,CACX/B,KAAM,CACJ,CACEhC,GAAIoC,EACJA,WAAYA,EACZb,KAAMA,EACNyC,OAAQpD,EACRqD,aAXK,iBAAT1C,EAAuB,+CAAAM,OAC4BO,GAAU,6CAAAP,OACZO,MAe7CX,QAAiByC,EAAAA,EAAAA,IACrB,OACAL,EAEAE,EACAvD,GAIF,GAAIiB,EAAS0C,QAAU1C,EAAS2C,OAAQ,CAItC,MAAMC,EAAW5C,EAAS2C,OAAOE,QAAQ,GAAGD,SAE5C,IAAK,MAAME,KAAWF,EAClB,GAAIE,EAAQnC,aAAeA,IACvBjC,QAAQQ,IAAI,iCAAkCyB,GAC1CoC,MAAMC,QAAQF,EAAQG,YAAcH,EAAQG,UAAU3E,OAAS,GAAG,CAClE+D,EAAMS,EAAQG,UAAU,GAAG1E,GAC3BG,QAAQQ,IAAI,eAAgBmD,GAC5B,KACJ,CAGR,OAAOA,CACT,CAIE,OAHA3D,QAAQwB,MACN,qEAEKmC,CAEX,CAAE,MAAOnC,GAEP,OADAxB,QAAQwB,MAAM,wCAADE,OAAyCO,EAAU,KAAKT,GAC9DmC,CACT,CACF,CAjM4Ba,CAAkB1E,EAAUsB,EAAMf,GAG1D,GAFAL,QAAQQ,IAAI,oCAAqCiD,GAE/B,KAAdA,EAyHF,OAFAzD,QAAQC,KAAK,gCAEN,GAzHa,CACpB,MAAMwE,EAAiB,GAAA/C,OAAMjB,EAAe,mEAAAiB,OAAkE+B,EAAS,6CAEjHiB,QAAsBX,EAAAA,EAAAA,IAAqB,MAAOU,EAAmB,GAAIpE,GAE/E,IAAIqE,EAAcV,SAAUU,EAAcT,OA+GxC,OAFAjE,QAAQwB,MAAM,gDAEP,GA/GyC,CAAC,IAADmD,EAAAC,EAChD,MAIMT,IAH0B,QAA9BQ,EAAAD,EAAcT,OAAOY,OAAO,UAAE,IAAAF,GAA0B,QAA1BC,EAA9BD,EAAgCG,gCAAwB,IAAAF,OAA1B,EAA9BA,EAA0DC,SAAU,IAI/DE,QAAOC,GACJA,EAAUC,WAAWC,MACrBC,GAAsB,yBAAdA,EAAKC,OAAkD,IAAfD,EAAKE,UAGxDC,KAAIN,IAED,MAAMO,EAAoBP,EAAUC,WAAWK,KAAIH,GAC7B,QAAdA,EAAKC,KACA,CACLA,KAAMD,EAAKC,KACXC,MAAOG,OAAOC,OAAON,EAAKE,OAAS,IAEd,gBAAdF,EAAKC,KACP,CACLA,KAAMD,EAAKC,KACXC,MAAO,WAEa,WAAdF,EAAKC,MAAmC,yBAAdD,EAAKC,KAChC,CACLA,KAAMD,EAAKC,KACXC,MAAOF,EAAKE,OAGP,CACLD,KAAMD,EAAKC,KACXC,MAAO,MAKf,MAAO,CACPK,QAASV,EAAUU,QACnBT,WAAYM,EACX,IAMX,GAHAvF,QAAQQ,IAAI,4BAA6B2D,KAGrCA,EAAQvE,OAAS,GA4DnB,OAFAI,QAAQC,KAAK,wDAEN,GA5De,CACtB,MAAM0F,EAAW,+FAEXC,EAAe,CACnB/F,GAAIC,EACJsB,KAAMA,EACNyE,QAAS1B,EAAQmB,KAAIvD,GAAQA,EAAK2D,UAClCxG,KAAM,kBAGR,IACE,MAAM4G,QAAyBjF,EAAU,OAAQ8E,EAAaC,GAC9D5F,QAAQQ,IAAI,oBAAqBuF,KAAKC,UAAUF,IAGhD,MAAMG,EAAmB,CACvBpC,OAAQpD,EACRW,KAAM,qCACNa,WAAYnC,EACZgE,aAAa,iEAADpC,OAAmE5B,IAW3EoG,EAAU,CACd,CACED,mBACAE,yBAX6BhC,EAAQmB,KAAIc,IAAG,CAC9CC,QAASD,EAAIV,QACbY,WAAYF,EAAInB,WAAWsB,QAAO,CAACC,EAAKrB,KACtCqB,EAAIrB,EAAKC,MAAQD,EAAKE,MACfmB,IACN,CAAC,SAUNxG,QAAQQ,IAAI,wCAAyCuF,KAAKC,UAAUE,IAGpE,MAAMO,EAAS,0GAAA/E,OAA6G5B,GACtH4G,QAAuB7F,EAAU,QAAS4F,EAAWP,GAI3D,OAFAlG,QAAQQ,IAAI,4BAA6BuF,KAAKC,UAAUU,IAEjDvC,CAOT,CAAE,MAAO3C,GAGP,OAFAxB,QAAQwB,MAAM,4CAA6CA,GAEpD,EACT,CACF,CAKF,CAKF,CAKF,CAAE,MAAOA,GAGP,OAFAxB,QAAQwB,MAAM,qCAAsCA,GAE7C,EACT,GAiEK,MAAMX,EAAYV,iBAMnB,IALJgB,EAAMwF,UAAA/G,OAAA,QAAAgH,IAAAD,UAAA,GAAAA,UAAA,GAAG,MACTzF,EAAGyF,UAAA/G,OAAA,EAAA+G,UAAA,QAAAC,EACHC,EAAIF,UAAA/G,OAAA,QAAAgH,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAIP3G,QAAQQ,IAAI,gBAAiBU,GAC7BlB,QAAQQ,IAAI,cACZR,QAAQQ,IAAI,gBAAiBuF,KAAKC,UAAUa,EAAM,KAAM,IAExD,IACE,MAAMvF,QAAiBwF,EAAAA,EAAAA,GAAM,CAC3B5F,MACAC,SAKAU,KAAMgF,IAIR,OADA7G,QAAQQ,IAAI,qBAAsBc,EAASO,MACpCP,CACT,CAAE,MAAOE,GAEP,MADAxB,QAAQwB,MAAM,kBAAmBA,GAC3BA,CACR,CACF,EC9HF,EApF2BuF,KACzB,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,KACrBC,GAAWC,EAAAA,EAAAA,MAGhB,IAAIC,EAAQC,OAAOC,OAAOC,SAAS,SACpCvH,QAAQQ,IAAI,+BAAgC4G,GA2E5C,MAAO,CAAEI,sBAvEqBrH,MAAOsH,EAAatF,EAAOrC,EAAUsB,KACjE,IACE8F,GAASQ,EAAAA,EAAAA,KAAwB,IACjC,MAAMrH,QAAgBsH,EAAAA,EAAAA,KACtB,IAAKtH,EAEH,YADA2G,EAAeY,EAAAA,IAIjB,MAAMC,OH1CsB1H,OAAOE,EAASP,EAAUsH,KAC1D,IACE,MAAM3G,EAAkBC,4DACxBV,QAAQQ,IAAI,iCAAkCV,GAC9C,MAAMa,QAAgBC,EAAAA,EAAAA,MACtB,IAAIa,EAAS,GAAAC,OACRjB,EAAe,iDACpB,MAAMa,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBQ,EAAW,CACtCN,OAAQ,OACRd,SAAOyH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFzH,GAAO,IACV,eAAgB,qBAElBwB,KAAMkE,KAAKC,UAAU,CAAEnE,KAAM,CAAC,CAAEkG,SAAUjI,MAE1CsB,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJhB,QAAQQ,IAAI,0CAA2Cc,GAEvD,IAAI0G,EAAY,GAEZC,EAAgB,CAAEC,OAAQ,IAC9B,GAAI5G,IACFA,EAAS6C,QAAQgE,SAASlF,IACxBA,EAAOmF,SAASC,WAAWF,SAASG,IAEb,aAAjBA,EAAMC,QACRN,EAAcC,OAAOrF,KAAK,CACxB2F,IAAKF,EAAMG,YAAYC,QAAQ,QAAS,KAE5C,GACA,IAEAT,EAAcC,OAAOtI,OAAS,GAAG,CACnC,IAAI+I,EACF,+HACF,MAAMC,QAAoB,IAAI9H,SAAQ,CAACC,EAASC,KAC9CL,EAAQM,qBAAqB0H,EAAQ,CACnCxH,OAAQ,OACRd,QAAS,CAEP,eAAgB,oBAElBwB,KAAMkE,KAAKC,UAAUiC,GACrB7G,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAEJhB,QAAQQ,IAAI,qBAAsBoI,GAE9BA,IACFZ,EAAYY,EAAYV,OACrBnD,QAAQuD,GAAUA,EAAMO,QAAQC,SAAS1B,KACzC9B,KAAKgD,GAAUA,EAAMtJ,QAE5B,CAKF,OAFAgB,QAAQQ,IAAI,kCAAmCwH,GAExCA,CACT,CAAE,MAAOxG,GAEP,MADAxB,QAAQwB,MAAM,qCAAsCA,GAC9CA,CACR,GG5BkCuH,CAC5B1I,EACAP,EACAsH,GAEFpH,QAAQQ,IAAI,6BAA8BqH,GAE1C,IAAImB,EAAkB,IAAInB,EAAiBJ,GAC3CzH,QAAQQ,IACN,oCACAwI,GAIF,IAAIxF,EAAY,GAShB,GARIwF,EAAgBpJ,OAAS,GAC3B4D,OC1DoBrD,OAAO6I,EAAiB3I,KAClD,IACE,MAAMI,EAAkBC,4DACxB,IAAIuI,EAAmB,GACvBjJ,QAAQQ,IAAI,qCAAsCwI,GAClDhJ,QAAQQ,IAAI,gCAAiCH,GAC7C,MAAMM,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYV,SACT,IAAIW,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRd,UACAe,KAAM,OACNC,WAAaC,IACXtB,QAAQQ,IAAI,qBAAsBc,GAClCP,EAAQO,EAAS,EAEnBC,UAAYC,IACVxB,QAAQwB,MAAM,kBAAmBA,GACjCR,EAAOQ,EAAM,GAEf,IAKA0H,EAAoBF,EAAgB1D,KAAInF,UAC5C,IAAK,IAADgJ,EAAAC,EACF,MAAMC,EAAc,GAAA3H,OAAMjB,EAAe,gEAAAiB,OAA+D+F,GAGlG6B,EAAsC,QAA7BH,SADmBtI,EAAUwI,IACNxE,cAAM,IAAAsE,GAE3C,QAF2CC,EAA1BD,EAA4BrH,MAC3CC,GAASA,EAAK/C,QAAUyI,WAC1B,IAAA2B,OAF2C,EAA1BA,EAEfvJ,GAIH,GAFAG,QAAQQ,IAAI,qCAAsC8I,GAE9CA,EAAW,CACb,MAAMC,EAAc,GAAA7H,OAAMjB,EAAe,8CAAAiB,OAA6C4H,EAAS,8CAEzFE,QAAsB3I,EAAU0I,IAEhC,OAAE1E,GAAW2E,EAEnB,GAAI3E,GAAUA,EAAOjF,OAAS,EAAG,CAAC,IAAD6J,EAAAC,EAC/B1J,QAAQQ,IAAI,uCAAwCqE,GAEpD,MAAM8E,EAAyB,QAAZF,EAAG5E,EAAO,UAAE,IAAA4E,OAAA,EAATA,EAAWG,aAEjC,IAAiB,OAAbD,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAe9E,cAAM,IAAA6E,OAAR,EAAbA,EAAuB9J,QAAS,EAAG,CAAC,IAADiK,EACrC,MAAMC,EAAiD,QAAvCD,EAAGF,EAAc9E,OAAO,GAAG+E,oBAAY,IAAAC,OAAA,EAApCA,EAAsChF,OAEzD,GAAIiF,GAAcA,EAAWlK,OAAS,EAAG,CAEvC,MAAMmK,EAAmBD,EAAW/E,QACjCiF,IACEf,EAAiB/D,MACf+E,GAAcA,EAAUpK,KAAOmK,EAAMnK,OAK5CoJ,EAAmB,IAAIA,KAAqBc,EAC9C,CACF,CACF,CACF,CACF,CAAE,MAAOvI,GAEP,MADAxB,QAAQwB,MAAM,0BAA2BiG,EAAajG,GAChDA,CACR,KAIF,aADMV,QAAQoJ,IAAIhB,GACXD,CACT,CAAE,MAAOzH,GAEP,MADAxB,QAAQwB,MAAM,sCAAuCA,GAC/CA,CACR,GDrBwB2I,CAAanB,EAAiB3I,GAChDL,QAAQQ,IAAI,8BAA+BgD,IAE3CxD,QAAQC,KAAK,0CAIXuD,EAAU5D,OAAS,EAAG,CACxB,MAAMwK,OE/DqBjK,OACjCqD,EACAnD,EACAP,EACAqC,EACAf,KAEA,IAAK,IAADiJ,EACF,MAAM5J,EAAkBC,4DACxBV,QAAQQ,IAAI,0CAA2CgD,GAEvD,MAAM+F,EAAc,GAAA7H,OAAMjB,EAAe,mEAAAiB,OAAkE5B,EAAQ,6CAE7Ga,QAAgBC,EAAAA,EAAAA,MAEhBU,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBsI,EAAgB,CAC3CpI,OAAQ,MACRd,UACAe,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJhB,QAAQQ,IAAI,0CAA2Cc,GAEvD,IAAIgJ,EAAyB,GACzBC,EAAqB,GAGrBC,GAA6D,QAA3CH,EAAA/I,EAASuD,OAAO,GAAGC,gCAAwB,IAAAuF,OAAA,EAA3CA,EAA6CxF,SAAU,GAE7E2F,EAAkBA,EAAgBzF,QAAO0F,IACvC,MAAMC,EAAsBD,EAAIxF,WAAWnD,MAAK6I,GAAgB,yBAAXA,EAAEvF,OACjDwF,EAAuBH,EAAIxF,WAAWnD,MAAK6I,GAAgB,qBAAXA,EAAEvF,OACxD,OAAsC,KAAZ,OAAnBsF,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBrF,SAAkD,KAAZ,OAApBuF,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBvF,MAAc,IAEpF,MAAMwF,EAAYL,EAAgBtF,MAAKuF,IACrC,MAAMtF,EAAOsF,EAAIxF,WAAWnD,MAAK6I,GAAgB,qBAAXA,EAAEvF,OACxC,OAAuB,KAAZ,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,MAAc,IA8E7B,OA3E6B,IAAzBmF,EAAgB5K,SAClB4K,QAAyBjH,EACvBlD,EACAmD,EACA1D,EACAqC,EACAf,UAKEN,QAAQoJ,IACZM,EAAgBlF,KAAInF,UAClBH,QAAQQ,IAAI,iBAAkBwE,GAC9B,IAAK,IAAI8F,KAAetH,EACtB,GAAIwB,EAAUU,UAAYoF,EAAYjL,GAAI,CACxC,IAAIkL,EAAYD,EAAY9L,MAC5B+L,EAAYA,EAAUrC,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAC3D,IAAIsC,EAAM,CAAEnL,GAAImF,EAAUU,QAAS1G,MAAO8L,EAAY9L,OAEtD,MAAMiM,EAAejG,EAAUC,WAAWK,KAAK4F,GAE3CA,EAAc9F,KAAK0D,SAAS,eAC5BoC,EAAc7F,MAEPnF,EAAqBgL,EAAc7F,MAAOhF,GAAS8K,MACvDC,IACC,GAAIA,EAAmB,CACrBpL,QAAQQ,IAAI4K,GACZJ,EAAe,UAAqB,OAAjBI,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBC,SACtCL,EAAe,UAAqB,OAAjBI,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,SAEtC,IAAIxI,EAAU,GACZC,EAAU,GAEZqI,EAAkB7K,MAAM4H,SAASoD,IAC/BzI,GAAW,IAAMyI,EAAGzI,QACpBC,GAAW,IAAMwI,EAAGxI,OAAO,IAG7BiI,EAAY,OAAIlI,EAAQK,MAAM,GAC9B6H,EAAkB,aAAIjI,EAAQI,MAAM,EACtC,MAKJ6H,EAAIE,EAAc9F,KAAKsD,QAAQqC,EAAW,IAAIS,QAC5CN,EAAc7F,MACTvE,QAAQC,mBAKbD,QAAQoJ,IAAIe,GAClBX,EAAyB,IAAIA,EAAwBU,GACrDhL,QAAQQ,IAAI,2BAA4B8J,GACxCtK,QAAQQ,IAAI,oBAAqBwK,EACnC,CACF,KAIJhL,QAAQQ,IACN,qDACA8J,GAEFC,EAAqB/G,EAAUuB,QAC5B0G,IACEnB,EAAuBpF,MAAMwG,GAAaA,EAAS7L,KAAO4L,EAAS5L,OAExEG,QAAQQ,IAAI,wBAAyB+J,GAI9B,CACLoB,SAAS,EACT9J,KAAM,CACJ+J,UAAW,CACTpI,UAAWA,EACXqI,sBAAuBvB,EACvBwB,aAAcvB,EACdM,WAAYA,IAIpB,CAAE,MAAOrJ,GAEP,OADAxB,QAAQwB,MAAM,yCAA0CA,GACjD,CAAEmK,SAAS,EAAOnK,QAC3B,GFrE2BuK,CACnBvI,EACAnD,EACAP,EACAqC,EACAf,GAEFpB,QAAQQ,IAAI,oBAAqB4J,GAE7BA,EAAOuB,SACTzE,GAAS8E,EAAAA,EAAAA,IAAmB5B,EAAOvI,KAAK+J,YACxC1E,GAAS+E,EAAAA,EAAAA,IAAW5L,KAEpBL,QAAQwB,MAAM,8BAElB,MACExB,QAAQC,KAAK,oCAIf,MAAMiM,OGvFkB/L,OAAOE,EAAS0H,EAAU5F,KACtD,MAAM1B,EAAkBC,4DACxB,IAAIyL,GAAY,EACZC,EAAuB,GACvB9L,EAAY,CAAC,OAAS,GAAI,SAAW,IACzC,MAAM+L,EAAkB,CAAC,uBAAwB,wBAC3CC,EAAY,GAAA5K,OACbjB,EAAe,mDAEpB,IAAIoG,EAAO,CACT0F,SAAU,+CACVC,UAAW,CAAC,uBAAwB,wBACpCC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,kBAAkB,cAClEC,MAAO,mCACPC,KAAM,KACNC,WAAW,GAETC,EAAI,GAAAtL,OACHjB,EAAe,iDAChBwM,EAAK,CACPV,SAAU,+CACVW,aAAc,oBACdL,MAAO,mCACPM,IAAK,CAACpF,IAGR,IACE/H,QAAQQ,IAAI,+BAAgCuH,GAE5C,MAAMpH,QAAgBC,EAAAA,EAAAA,MAEhBU,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBqL,EAAc,CACzCnL,OAAQ,OACRd,SAAOyH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFzH,GAAO,IACV,eAAgB,qBAElBwB,KAAMkE,KAAKC,UAAUa,GACrBzF,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAKJ,GAFAhB,QAAQQ,IAAI,0CAA2Cc,GAE/B,OAApBA,EAAS0C,OAAiB,CAC5B,MAAMoJ,QAAkB,IAAItM,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqB+L,EAAM,CACjC7L,OAAQ,OACRd,SAAOyH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFzH,GAAO,IACV,eAAgB,qBAElBwB,KAAMkE,KAAKC,UAAUiH,GACrB7L,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJhB,QAAQQ,IAAI,0CAA2C4M,GACvD,IAAK,MAAMC,KAAWhB,EAChBe,EAAUE,kBAAkBD,UACxBvM,QAAQoJ,IACZkD,EAAUE,kBAAkBD,GAAS/H,KAAInF,UACvC,MAAM6D,EAASuJ,EAAI,eAAepK,MAAM,IAClCqK,EAASD,EAAI,cAEnB,GAAe,aAAXvJ,EAAuB,CACzB,MAAMyJ,EAAI,GAAA/L,OAAMjB,EAAe,4CAAAiB,OAA2C6L,EAAI1N,GAAE,qDAE1E6N,QAAkB,IAAI5M,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqBwM,EAAM,CACjCtM,OAAQ,MACRd,UACAe,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAEJhB,QAAQQ,IAAI,8BAA+BkN,GAE3B,yBAAZL,EACEhJ,MAAMC,QAAQoJ,EAAUC,kBAC1BD,EAAUC,gBAAgBxF,SAASyF,IACjCxB,EAAqBvJ,KAAK,CACxBZ,WAAY2L,EAAeC,MAAM5L,WACjC6L,OAAQF,EAAeG,MAAM,GAAGC,MAChC,IAIF3J,MAAMC,QAAQoJ,EAAUO,kBACxBP,EAAUO,gBAAgB9F,SAAS+F,IACjC9B,EAAqBvJ,KAAK,CACxBZ,WAAYiM,EAAeL,MAAM5L,WACjC6L,OAAQI,EAAeC,WAAW,IAClC,IAMNhC,EAD0B,aAAxBhK,EAAMiM,eACIhC,EAAqBlH,MAC9BmJ,GACCA,EAAOpM,aAAe8F,GACJ,WAAlBsG,EAAOP,SAKX3B,IACF7L,EAAkB,OAAIkN,EACtBlN,EAAoB,SAAI0D,EAE5B,KAKV,MACEhE,QAAQwB,MAAM,wBAKhB,OAHAxB,QAAQQ,IAAI,6BACZR,QAAQQ,IAAI,sBAAuB2L,GAE5B,CACLR,SAAS,EACT9J,KAAMsK,EACNmC,OAAShO,EACTqN,gBAAiBvB,EAErB,CAAE,MAAO5K,GAQP,MAPAxB,QAAQwB,MAAM,kBAAmB,CAC/BN,IAAKoL,EACLjM,UACAwG,OACArF,UAGIA,CACR,GH3D+B+M,CAAelO,EAASP,EAAUqC,GAC7DnC,QAAQQ,IAAI,8BAA+B0L,GAEvCA,EAAaP,UACfzE,GAASsH,EAAAA,EAAAA,IAAUtC,EAAarK,OAChCqF,GAASuH,EAAAA,EAAAA,IAAmBvC,EAAayB,kBACzCzG,GAASwH,EAAAA,EAAAA,IAAUxC,EAAaoC,UAGlCtO,QAAQQ,IAAI,kDACd,CAAE,MAAOgB,GAEP,MADAxB,QAAQwB,MAAM,qBAAsBA,GAC9BA,CACR,CAAC,QACC0F,GAASQ,EAAAA,EAAAA,KAAwB,GACnC,GAG8B,EIqDlC,EA/IiCiH,KAC/B,MAAM,eAAE3H,IAAmBC,EAAAA,EAAAA,MACrB,sBAAEO,GAA0BT,IAC5B6H,GAAYC,EAAAA,EAAAA,KAAa1M,GAAUA,EAAM2M,cAAcF,YAEvDG,GAAUF,EAAAA,EAAAA,KAAa1M,GAAUA,EAAM2M,cAAcC,UACrD7H,GAAWC,EAAAA,EAAAA,MAEX6H,GAAqBC,EAAAA,EAAAA,cACzB9O,UACE,IAKE,MAAM+O,EAAsB,CAC1BvD,SAAS,EACT9J,KAAM,CACJsN,SAAU,CACRC,MAAO,SACPC,KAAM,wBACN,iBAAkB,UAClBC,MAAO,gCACP,sBAAuB,eACvB,4BAA6B,oBAC7BC,YAAa,GACb,mBAAoB,KACpB,sBAAuB,mCACvB,2BAA4B,GAC5B,8BAA+B,GAC/BC,IAAK,SACL,aAAc,GACdC,SACE,wIACF3L,aACE,6EACF4L,KAAM,2BACNC,aAAc,eACd,kBAAmB,KACnBC,SAAS,KAUf,GAAIV,EAAoBvD,QAAS,CAO/BzE,GACE2I,EAAAA,EAAAA,IAAqB,CACnBV,SAAUD,EAAoBrN,KAAKsN,YAIvC,MAAMW,EAAoBZ,EAAoBrN,KAAKsN,SAMzB,IAADY,EAAAC,EAAzB,GALAhQ,QAAQQ,IAAI,sBAAuBsP,GAEnC5I,GAAS+I,EAAAA,EAAAA,KAAmB,IAGxBf,QACI1H,EACJsI,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnCG,EAAU,UAAE,IAAAH,OAAA,EAAZA,EAAcjQ,SACF,QADUkQ,EACtBE,EAAU,UAAE,IAAAF,OAAA,EAAZA,EAAcjQ,WAGpB,MACEiH,EAAemJ,EAAAA,GAEnB,CAAE,MAAO3O,GACPxB,QAAQwB,MAAM,+CAAgDA,GAC9DwF,EAAemJ,EAAAA,GACjB,CAAC,QACCjJ,GAASkJ,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAAClJ,EAAUM,IAGP3J,GAAaoR,EAAAA,EAAAA,cACjB9O,WACEiQ,EAAAA,EAAAA,KAAW,GACXpQ,QAAQQ,IAAI,iDAAkD0P,GAC9D,IACMA,GAAaA,EAAUtQ,OAAS,GAClCsH,GAAS+I,EAAAA,EAAAA,KAAmB,IAC5B/I,GAASkJ,EAAAA,EAAAA,KAAW,IACpBC,YAAW,IAAMnJ,GAASkJ,EAAAA,EAAAA,KAAW,KAAQ,SACvCpB,EAAmBkB,IAEzBlQ,QAAQC,KAAK,yCAEjB,CAAE,MAAOuB,IACP4O,EAAAA,EAAAA,KAAW,GACXpQ,QAAQwB,MAAM,8BAA+BA,GAC7CxB,QAAQQ,IACN,8DAEFwG,EAAesJ,EAAAA,GACjB,IAEF,CAACtB,EAAoBhI,IAyBvB,MAAO,CACLuJ,yBAvB8BtB,EAAAA,EAAAA,cAAY,KACrCL,EAMH5O,QAAQQ,IACN,gFANFR,QAAQQ,IACN,0EAEF0G,GAAS+I,EAAAA,EAAAA,KAAmB,KAM9B,MAAMO,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoB7S,EAAYqJ,EAAUF,GAC1D,GACC,KAEH,MAAO,IAAM6J,cAAcL,EAAS,GACnC,CAAC3S,EAAYqJ,IAId6H,UACAlR,aACD,ECtIH,EApBkCF,IAS3B,IAT4B,OACjCoT,EAAM,MACN5O,EAAK,aACL6O,EAAY,UACZC,EAAS,aACTC,EAAY,KACZ9P,EAAI,eACJ+P,EAAc,gBACdC,GACDzT,EAEC,OACEO,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kCAAiCF,UAC9CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAGX,ECqNV,EAnNwB+S,KACtB,MAAM,wBAAEd,EAAuB,QAAExB,GAAYJ,KACtC2C,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAClCP,EAAWQ,IAAgBD,EAAAA,EAAAA,UAAS,KACpCE,EAAgBC,IAAqBH,EAAAA,EAAAA,WAAS,IAC9CI,EAAcC,IAAmBL,EAAAA,EAAAA,WAAS,IAC1CM,EAAqBC,IAA0BP,EAAAA,EAAAA,WAAS,IACxDQ,EAAUC,IAAeT,EAAAA,EAAAA,UAAS,KAClCU,EAAgBC,IAAqBX,EAAAA,EAAAA,UAAS,IAC/CtK,GAAWC,EAAAA,EAAAA,OACX,iBAAEiL,EAAgB,eAAEpL,IAAmBC,EAAAA,EAAAA,MAE7CoL,EAAAA,EAAAA,YAAU,KACJL,EAASpS,QACX6R,EAAaO,EAAS1M,KAAKvD,IAAI+F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAW/F,GAAI,IAAEuQ,aAAc,CAAC,MACjE,GACC,CAACN,IAEJhS,QAAQQ,IAAI,2BAA4ByQ,GACxC,MAAMsB,GAAoB1D,EAAAA,EAAAA,KACvB1M,GAAUA,EAAM2M,cAAcyD,oBAG3BC,GAAoB3D,EAAAA,EAAAA,KACvB1M,GAAUA,EAAM2M,cAAc0D,oBAEjCxS,QAAQQ,IAAI,oBAAqBgS,GAEjC,MAAMC,GAAuB5D,EAAAA,EAAAA,KAC1B1M,GAAUA,EAAM2M,cAAc2D,uBAEjCzS,QAAQQ,IAAI,yBAA0BiS,GACtC,MAAM9E,GAAkBkB,EAAAA,EAAAA,KACrB1M,GAAUA,EAAM2M,cAAc4D,gBAAgB/E,kBAEjD3N,QAAQQ,IAAI,wBAAyBmN,GAErC,MAAMiB,GAAYC,EAAAA,EAAAA,KAAa1M,GAAUA,EAAM2M,cAAcF,YACvD+D,GAAU9D,EAAAA,EAAAA,KAAa1M,GAAUA,EAAM2M,cAAc8D,gBAE3D5S,QAAQQ,IAAI,6BAA8BmS,GAC1C,MAAME,GAAkBhE,EAAAA,EAAAA,KACrB1M,GAAUA,EAAM2M,cAAc8D,cAAcE,eAE/C9S,QAAQQ,IAAI,gBAAiBqS,GAgC7B,GANA7S,QAAQQ,IAAI,iBAAkByQ,IAC9BoB,EAAAA,EAAAA,YAAU,KACJpB,EAAUrR,QAAU,GACtB2R,GAAawB,GAAYA,EAAU,GACrC,GACC,CAAC9B,IACAuB,EAAkBrD,UAAYqD,EAAkBQ,mBAAqB,IAADC,EAAAC,EAClE/Q,EAAQqQ,EAAkBrD,SAAS,kBACnC/N,EAA2C,QAAvC6R,EAAGT,EAAkBQ,0BAAkB,IAAAC,GAAM,QAANC,EAApCD,EAAsCpR,YAAI,IAAAqR,OAAN,EAApCA,EAA4CC,MAAM,GAAGpT,YAGlEsS,EAAAA,EAAAA,YAAU,KACHzD,GACH2B,GACF,GACC,CAAC3B,EAAW2B,KACf8B,EAAAA,EAAAA,YAAU,KACRV,EAAkBc,EAAqB,GACtC,CAACA,IAEJ,MAAMW,GAAeC,EAAAA,EAAAA,UACnB,IC/EwBC,EAACX,EAASvR,IAC/BuR,EAEEA,EAAQrN,KAAKzD,IAClB,IAAI0R,EAAU,CACZnE,OAAW,OAAJvN,QAAI,IAAJA,OAAI,EAAJA,EAAM2R,aAAc,MAC3BC,UAAc,OAAJ5R,QAAI,IAAJA,OAAI,EAAJA,EAAM6R,gBAAiB,IACjCC,OAAW,OAAJ9R,QAAI,IAAJA,OAAI,EAAJA,EAAM+R,aAAc,OAQ7B,MAJa,aAATxS,IACFmS,EAAQM,UAAe,OAAJhS,QAAI,IAAJA,OAAI,EAAJA,EAAMiS,cAAe,SAGnCP,CAAO,IAdK,GD8EbD,CAAaT,EAAiBzR,IACpC,CAACyR,EAAiBzR,KAEpBiR,EAAAA,EAAAA,YAAU,KACRJ,EAAYmB,EAAa,GACxB,CAACA,KAEJf,EAAAA,EAAAA,YAAU,KACJe,EAAaxT,QAAU,IACzBI,QAAQQ,IAAI,kBAAmB4S,GAC/B3B,EAAa2B,GACb7B,GAAawB,GAAYA,EAAU,IACrC,GACC,CAACK,IACJ,MAAMjE,GAAWkE,EAAAA,EAAAA,UACf,IC3HwBb,KAC1B,IAAKA,IAAsBA,EAAkBrD,SAC3C,OAAO,KAGT,MAAMpN,EAAOyQ,EAAkBrD,SAE/B,IAAIA,EAAW,CACbnQ,MAAO+C,EAAKqN,OAAS,MACrBhO,KAAMW,EAAKsN,MAAQ,MACnB,iBAAkBtN,EAAK,mBAAqB,MAC5CgS,MAAOhS,EAAKuN,OAAS,MACrB,4BAA6BvN,EAAK,8BAAgC,MAClEwN,YAAaxN,EAAKwN,aAAe,MACjC,mBAAoBxN,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpC0N,SACE1N,EAAK0N,UAAQ,GAAA/N,OAnBKhB,4DAoBA,+DAOtB,MAJkB,aAAdqB,EAAKsN,OACPF,EAASK,IAAMzN,EAAKyN,KAAO,MAC3BL,EAAS,cAAgBpN,EAAK,eAAiB,OAE1CoN,CAAQ,EDiGP6E,CAAYxB,IAClB,CAACA,IAEHxS,QAAQQ,IAAI2O,IACZkD,EAAAA,EAAAA,YAAU,KACRN,IAAyB5C,EAAS,GACjC,CAACA,IACJ,MAAM8E,GAAUZ,EAAAA,EAAAA,UACd,ICnFwBa,EAAC9S,EAAM+P,EAAgBC,KACjD,MAAM+C,EAAc,CAClB,CAAEC,YAAa,QAASC,OAAQ,SAChC,CAAED,YAAa,WAAYC,OAAQ,YACnC,CAAED,YAAa,QAASC,OAAQ,UAGrB,aAATjT,GACF+S,EAAYtR,KAAK,CAAEuR,YAAa,WAAYC,OAAQ,cAGtD,MAAMC,EAAkB,GAAGhP,KAAKiP,IAAS,CACvCH,YAAaG,EACbF,OAAQE,EACRC,KAAM7W,IAA+B,IAA9B,IAAE8W,EAAG,SAAElN,EAAQ,MAAEmN,GAAO/W,EAoB7B,OAjBW,aAATyD,EAC8B,UAA1BqT,EAAIE,SAASd,SACZ1C,GAAkBA,IAAmBC,IAmC1ClT,EAAAA,EAAAA,KAAA,QAAAE,SAAOmJ,OAnBPlJ,EAAAA,EAAAA,MAAA,UACEgH,MAAOkC,IACPqN,SAhB0BC,IAAO,IAADC,EAClC,MAAMC,EAAeF,EAAEG,OAAO3P,MACxB4P,EAAcP,EACjBQ,cACAC,KAAK7P,KAAK8P,GACTA,EAAEvV,KAAO4U,EAAI5U,IAAEiI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNsN,EAAET,UAAQ,IAAE,CAACJ,GAAYQ,IAC9BK,EAAET,WAGQ,QAAlBG,EAAAJ,EAAMW,QAAQC,YAAI,IAAAR,GAAlBA,EAAoBS,gBAAgBN,EAAY,EAO9C3W,UAAU,+EACVE,MAAO,CACLC,MAAO,MACP+W,QAAS,QACTC,SAAU,OACVC,WAAY,OACZC,OAAQ,OACRC,UAAW,QAEbC,YAAchB,GAAOA,EAAEG,OAAOxW,MAAMmX,OAAS,iBAC7CG,WAAajB,GAAOA,EAAEG,OAAOxW,MAAMmX,OAAS,OAAQvX,SAAA,EAEpDF,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,MAAKjH,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,KAAIjH,SAAC,SAItB,MAIL,MAAO,IAAI+V,KAAgBG,EAAgB,EDyBvCJ,CACE9S,EACiB,OAAjBoR,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,SAAS,mBACX,OAAjBqD,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,SAAS,sBAEhC,CAAC/N,EAAuB,OAAjBoR,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,WAkB5B,OACE9Q,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CACGwT,IACCvT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC9BF,EAAAA,EAAAA,KAAC6X,EAAAA,EAAM,KACP7X,EAAAA,EAAAA,KAAA,KAAAE,SAAG,kBAGLwQ,IAAcG,IAAY2C,IAAkBxT,EAAAA,EAAAA,KAAC8X,EAAAA,EAAoB,IAClEjH,IAAW7Q,EAAAA,EAAAA,KAAC6X,EAAAA,EAAM,IAClBnH,IAECvQ,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CAEE2Q,IAAW7Q,EAAAA,EAAAA,KAAC6X,EAAAA,EAAM,KAClB7X,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qCAAoCF,UACjDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASF,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWF,UACxBF,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACJI,IAAI,+DACJC,IAAI,YACJN,UAAU,YACV2X,QArCQC,KACtB3F,IACArJ,GAASiP,EAAAA,EAAAA,KAAa,IACtBjP,GACE2I,EAAAA,EAAAA,IAAqB,CACnBV,SAAU,CAAC,EACXiH,cAAe,GACflS,SAAU,GACV8O,mBAAoB,MAGxBvB,EAAa,IACbM,GAAuB,EAAM,MA4BlB5C,IACCjR,EAAAA,EAAAA,KAACmY,EAAAA,EAAmB,CAACxU,KAAMsN,EAAUmH,WAAW,mBAKrD5E,GACCxT,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yBAAwBF,UACrCF,EAAAA,EAAAA,KAAC6X,EAAAA,EAAM,OAGT7X,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BF,EAAAA,EAAAA,KAACqY,EAAyB,CACxBnV,KAAMA,EACN+P,eACmB,OAAjBqB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,SAAS,mBAE9BiC,gBACmB,OAAjBoB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,SAAS,oBAE9B6B,aAAcuB,EACdpQ,MAAOA,EACP8O,UAAWiB,KAEbhU,EAAAA,EAAAA,KAACsY,EAAAA,EAAa,CAEZ3U,KAAMoP,EACNgD,QAASA,EACTqB,KAAM,CAAEC,gBAlJCN,IACvB,MAAMwB,EAAqBxB,EAAY3P,KAAKoR,IAC1C,MAAMC,EAAe3E,EAASlQ,MAC3B8U,GACCA,EAAQxH,QAAUsH,EAAQtH,OAC1BwH,EAAQnD,WAAaiD,EAAQjD,WAGjC,IAAKkD,EAAc,OAAA7O,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY4O,GAAO,IAAEpE,aAAc,CAAC,IAGvD,MAAMA,EAAe,CAAC,EAOtB,OANAuE,OAAOC,KAAKJ,GAASvO,SAAS4O,IACxBL,EAAQK,KAASJ,EAAaI,KAChCzE,EAAayE,IAAO,EACtB,KAGFjP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY4O,GAAO,IAAEpE,gBAAY,IAGnCb,EAAagF,EAAmB,GA8HlBrV,KAAMA,EACN+P,eACmB,OAAjBqB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,SAAS,mBAE9BiC,gBACmB,OAAjBoB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBrD,SAAS,oBAE9BmH,WAAW,mBACXU,uBAAwB7E,GAZnBb,aAmBhB,E,aExNP,MA8EA,EA9EwB2F,KACtB,MAAM,WAAEpZ,GAAe8Q,KACjB,iBAAEyD,EAAgB,eAAEpL,IAAmBC,EAAAA,EAAAA,MACtC8H,EAASqB,IAAcoB,EAAAA,EAAAA,WAAS,GAEvCxR,QAAQQ,IAAI,kCAsEZ,OA7DA6R,EAAAA,EAAAA,YAAU,KACR,IAAKhL,OAAOC,OAAQ,OAqDpBtH,QAAQkX,MAAM,+DACd7P,OAAOC,OAAO6P,SAAS,aAlDLhX,UAAa,IAADiX,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMrU,MAAM,MAGhCsU,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BR,IACvBA,EAAMhS,MACVyS,GACCA,EAAK7O,SAAS,uBAAyB6O,EAAK7O,SAAS,mBAenD8O,CAAuBV,KAAWM,EAIpC,YAHAxX,QAAQC,KACN,kFAOJwX,eAAeI,WAAW,sBAM1BzH,GAAW,GAEX,MACM0H,EADcC,EAAAA,EAAMC,WAEZlJ,cAAc0D,kBAAkBQ,mBAE9C,GAAsB,OAAjB8E,QAAiB,IAAjBA,GAAuB,QAANV,EAAjBU,EAAmBjW,YAAI,IAAAuV,GAAO,QAAPC,EAAvBD,EAAyBjE,aAAK,IAAAkE,IAA9BA,EAAgCzX,OAMnC,OALAI,QAAQwB,MACN,6EACAsW,QAEF1H,GAAW,GAIb,UAIQ6H,EAAAA,EAAAA,GAAkBH,EAAkBjW,KAAKsR,MAAOtV,EACxD,CAAE,MAAO2D,GACPxB,QAAQwB,MAAM,iDAA6CA,GAC3DwF,EAAekR,EAAAA,GACjB,CAAC,QACC9H,GAAW,GACXgC,EAAiB+F,EAAAA,GACnB,IAG4C,GAI7C,IAEIpJ,GAAU7Q,EAAAA,EAAAA,KAAC6X,EAAAA,EAAM,IAAM,IAAI,E,QCrEpC,IAAIqC,EAAO,KAwFI,SAAS,IAGtB,GAAI/Q,OAAOC,OAAQ,CAGjB,IAAI+Q,GAAe,EAEnBhR,OAAOC,OAAO6P,SAAS,UAAU,KAC3BkB,EACFrY,QAAQC,KACN,+EAIJoY,GAAe,EAtGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzCpR,OAAOoR,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbJ,EAAAjR,OAAOC,cAAM,IAAAgR,GAAM,QAANC,EAAbD,EAAezR,YAAI,IAAA0R,OAAN,EAAbA,EAAqB3H,cAAc,WACnCD,SAASgI,eAAe,QAGrBD,IACHA,EAAc/H,SAASiI,cAAc,OACrCF,EAAY7Y,GAAK,OACbwH,OAAOC,QAAUD,OAAOC,OAAOT,KACjCQ,OAAOC,OAAOT,KAAKgS,YAAYH,GAG/B/H,SAAS9J,KAAKgS,YAAYH,IAOzBN,IAEHA,EAAOU,EAAAA,WAAoBJ,IAK7BN,EAAKW,QACH1a,EAAAA,EAAAA,MAAC2a,EAAAA,GAAQ,CAACjB,MAAOA,EAAAA,EAAM3Z,SAAA,EACrBF,EAAAA,EAAAA,KAAC+Y,EAAe,KAChB/Y,EAAAA,EAAAA,KAACmT,EAAe,KAChBnT,EAAAA,EAAAA,KAAC+a,EAAAA,GAAc,OAMrB,CAkEMC,GAAO,GAEX,MACElZ,QAAQwB,MACN,sEAGN,EAtEA,WA2BE,GAAI6F,OAAO8R,QAAU9R,OAAO8R,OAAOxI,SAAU,CAC3C,IAAIyI,EAAiB/R,OAAO8R,OAAOxI,SAASiI,cAAc,UAC1DQ,EAAeC,YA1BE,y1BA2BjBhS,OAAO8R,OAAOxI,SAAS9J,KAAKgS,YAAYO,EAE1C,MACEpZ,QAAQC,KACN,qFAGN,CAGAqZ,E","sources":["components/DragAndDrop/DragAndDrop.jsx","services/api/companion/userGroupService.js","services/api/companion/getRouteDetails.js","services/api/companion/updateClasses.js","hooks/useCompanionWidget.js","services/api/companion/allPlantSevice.js","services/api/companion/assignedPlantService.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/companionWidget.jsx","pages/companionWidget/comapnaiondataHelpers.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/companionIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = ({ onDrop }) => {\r\n  const { handleDrop: defaultHandleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n  const handleDrop = onDrop || defaultHandleDrop;\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\n\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n   let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in useCompanionWidget:\", email);\r\n\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleCompanionWidget = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      // Step 1: Fetch user group collaboration spaces\r\n      const userGroupCollab = await getUserGroupCollab(\r\n        headers,\r\n        objectId,\r\n        email\r\n      );\r\n      console.log(\"[ Companion ] User Groups:\", userGroupCollab);\r\n\r\n      let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n      console.log(\r\n        \"[Use Companion] All CollabSpaces:\",\r\n        allCollabSpaces\r\n      );\r\n\r\n      // Step 2: Fetch all plants if collab spaces exist\r\n      let allPlants = [];\r\n      if (allCollabSpaces.length > 0) {\r\n        allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        console.log(\"[Use Companion] All Plants:\", allPlants);\r\n      } else {\r\n        console.warn(\"[Use Companion] No CollabSpaces found.\");\r\n      }\r\n\r\n      // Step 3: Fetch assigned plants if there are any\r\n      if (allPlants.length > 0) {\r\n        const plants = await fetchAssignedPlants(\r\n          allPlants,\r\n          headers,\r\n          objectId,\r\n          state,\r\n          type\r\n        );\r\n        console.log(\"[Use Companion]: \", plants);\r\n\r\n        if (plants.success) {\r\n          dispatch(setPlantObjectData(plants.data.plantData));\r\n          dispatch(setHeaders(headers));\r\n        } else {\r\n          console.error(\"Failed to fetch plant data.\");\r\n        }\r\n      } else {\r\n        console.warn(\"[Use Companion] No Plants found.\");\r\n      }\r\n\r\n      // Step 5: Fetch Change Action details\r\n      const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n      console.log(\"[Use Companion] CA Details:\", getCaDetails);\r\n\r\n      if (getCaDetails.success) {\r\n        dispatch(setCAName(getCaDetails.data));\r\n        dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        dispatch(setCAData(getCaDetails.CAData));\r\n      }\r\n\r\n      console.log(\"[Companion] All services executed successfully.\");\r\n    } catch (error) {\r\n      console.error(\"[Companion] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleCompanionWidget };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n    const hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        objectId,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: hasNoClass\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n\r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanionWidget } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        // const objectDetailsResult = await getDroppedObjectDetails({\r\n        //   dataItems,\r\n        // });\r\n\r\n        const objectDetailsResult = {\r\n          success: true, // Always true by default\r\n          data: {\r\n            cardData: {\r\n              Title: \"126758\",\r\n              Type: \"Manufactured Material\",\r\n              \"Maturity State\": \"In Work\",\r\n              Owner: \"3dxserviceuser 3dxserviceuser\",\r\n              \"Collaborative Space\": \"Micro Motion\",\r\n              \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n              Description: \"\",\r\n              \"Dropped Revision\": \"01\",\r\n              \"Dropped Revision ID\": \"7D56FB4B4E423B0068510DFC000030AF\",\r\n              \"Latest Released Revision\": \"\",\r\n              \"Latest Released Revision ID\": \"\",\r\n              EIN: \"126758\",\r\n              \"CAD Format\": \"\",\r\n              imageURL:\r\n                \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_InsertCreateMaterialProcess108x144.png\",\r\n              relativePath:\r\n                \"/resources/v1/modeler/dsmfg/dsmfg:MfgItem/7D56FB4B4E423B0068510DFC000030AF\",\r\n              Name: \"cmt-OI000186152-00000035\",\r\n              organization: \"Company Name\",\r\n              \"Latest Revision\": \"01\",\r\n              HasMBOM: false,\r\n            },\r\n          },\r\n        };\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanionWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanionWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          dispatch(setIsDroppedAction(true));\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useCompanionDropableArea;\r\n","import { useState } from \"react\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n      </div>\r\n      {/* Dropdown appears below */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./comapnaiondataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { initializeDroppableArea, loading } = useCompanionDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n\r\n        <>\r\n         {/* Show initial loader when loading is true */}\r\n         {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop data={cardData} widgetType=\"bosWidget\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={selectableRows}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  widgetType=\"companion_Widget\"\r\n                  onSelectableRowsChange={setSelectableRows}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CompanionWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (bosData, type) => {\r\n  if (!bosData) return [];\r\n\r\n  return bosData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px 0\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./companionWidget.jsx\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","onDrop","handleDrop","defaultHandleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","GetFlowDownCADetails","async","flowDownCA","headers","CADetails","CAAtt","log","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","type","onComplete","response","onFailure","error","urlObjWAF","concat","searchResponse","routeData","data","find","item","RouteID","identifier","RouteStatus","state","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","push","CATitle","CAState","_CASearchResponse$cha","result","split","slice","join","CAurlObjWAF","changeAction","updateClasses","allPlants","sLatestID","revurl","ret","Body","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","getLatestRevision","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","member","ClassificationAttributes","filter","classItem","Attributes","some","attr","name","value","map","updatedAttributes","String","Number","ClassID","classifyUrl","classifyBody","classes","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","reduce","acc","secondUrl","secondResponse","arguments","undefined","body","axios","useCompanionWidget","showErrorToast","useToast","dispatch","useDispatch","email","window","widget","getValue","handleCompanionWidget","collabSpace","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","userGroupCollab","_objectSpread","objectID","userGroup","userGroupBody","groups","forEach","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","members","includes","getUserGroupCollab","allCollabSpaces","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","all","getAllPlants","plants","_response$member$0$Cl","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ext","plantAssignmentAttr","a","allPlantsRemovedAttr","hasNoClass","parentClass","PlantName","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getCaDetails","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","CAName","url3","response3","proposedChanges","proposedChange","where","action","whats","what","realizedChanges","realizedChange","operations","toLowerCase","change","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","cardData","Title","Type","Owner","Description","EIN","imageURL","Name","organization","HasMBOM","setDroppedObjectData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","dataItems","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","onSave","selectedRows","tableData","onMassUpdate","latestRevision","droppedRevision","CompanionWidget","tableKey","setTableKey","useState","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","useEffect","changedCells","selectedTableRows","droppedObjectData","loadingParentDetails","plantObjectData","bosData","BOSObjectData","bosSpecDocument","specDocument","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","useMemo","getTableData","rowData","childTitle","Revision","childRevision","State","childState","IsLatest","childLatest","owner","getCardData","columns","tableColumns","baseColumns","accessorKey","header","editableColumns","columnKey","cell","row","table","original","onChange","e","_table$options$meta","updatedValue","target","updatedData","getRowModel","rows","r","options","meta","updateTableData","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","DragAndDropComponent","onClick","handleHomeClick","setIsDropped","parentDetails","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","ReusableTable","newDataWithChanges","newItem","originalItem","oldItem","Object","keys","key","onSelectableRowsChange","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}