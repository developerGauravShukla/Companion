{"version":3,"file":"static/js/806.36f9bba3.chunk.js","mappings":"6KAGA,MAeA,EAfsBA,IAKf,IALgB,QACrBC,EAAU,OAAM,QAChBC,EAAO,KACPC,GAAO,EAAI,UACXC,EAAY,IACbJ,EACC,OAAKG,GAGHE,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACL,QAASA,EAASG,UAAWA,EAAUG,SACbL,IAJjB,IAKR,C,2ECXZ,MA4BA,EA5BoBF,IAAuD,IAAtD,KAAEG,EAAI,OAAEK,EAAM,MAAEC,EAAK,SAAEF,EAAQ,cAAEG,GAAeV,EACnE,OACEW,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACT,KAAMA,EAAMK,OAAQA,EAAQK,KAAK,KAAKC,UAAQ,EAAAP,SAAA,EACnDF,EAAAA,EAAAA,KAACO,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAAT,UACvBF,EAAAA,EAAAA,KAACO,EAAAA,EAAMK,MAAK,CAAAV,SAAEE,GAAS,mBAEzBJ,EAAAA,EAAAA,KAACO,EAAAA,EAAMM,KAAI,CAAAX,SAAEA,KACbF,EAAAA,EAAAA,KAACO,EAAAA,EAAMO,OAAM,CAAAZ,SACVG,EACCA,EAAcU,KAAI,CAACC,EAAKC,KACtBjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAELtB,QAASoB,EAAIpB,SAAW,YACxBuB,QAASH,EAAIG,QAAQjB,SAEpBc,EAAII,OAJAH,MAQTjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACtB,QAAQ,YAAYuB,QAAShB,EAAOD,SAAC,cAK3C,C,iECvBZ,MAwBA,EAxB0BP,IAAkC,IAAjC,KAAEG,EAAI,OAAEK,EAAM,UAAEkB,GAAW1B,EACpD,OACEK,EAAAA,EAAAA,KAACsB,EAAAA,EAAW,CACVxB,KAAMA,EACNK,OAAQA,EACRC,MAAM,eACNC,cAAe,CACb,CACEe,MAAO,SACPxB,QAAS,SACTuB,QAAShB,GAEX,CACEiB,MAAO,UACPxB,QAAS,UACTuB,QAASE,IAEXnB,UAEFF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,sCACS,C,uFCdlB,MAuHA,EAvHmBP,IAAiB,IAAhB,OAAE4B,GAAQ5B,EAC5B,MAAM6B,GAAkBC,EAAAA,EAAAA,UAAQ,KAE9B,MAAMC,EAAcH,EAAOI,QAAO,CAACC,EAAQC,KACzC,MAAMC,EAAWD,EAAME,MAAM,cACvBC,EAAcH,EAAME,MAAM,mCAC1BE,EAAWJ,EAAMK,MAAM,MAAMC,MAAM,GAAGC,KAAK,MAE3CC,EAAYP,EAAWA,EAAS,GAAK,MACrCQ,EAAaN,EACfA,EAAY,GACZH,EAAMU,SAAS,sBAAuB,YACtC,sBACA,MAaJ,OAXKX,EAAOS,KACVT,EAAOS,GAAa,CAClBA,YACAG,QAAS,GACTjB,OAAQ,KAIZK,EAAOS,GAAWG,QAAQC,KAAKH,GAC/BV,EAAOS,GAAWd,OAAOkB,KAAKR,GAAYJ,GAEnCD,CAAM,GACZ,CAAC,GAGJ,OAAOc,OAAOC,OAAOjB,GAAakB,MAChC,CAACC,EAAGC,IAAMC,OAAOF,EAAER,WAAaU,OAAOD,EAAET,YAC1C,GACA,CAACd,IAEEyB,EAAQ,IAAIC,EAAAA,GAAkB,CAClCC,YAAY,EACZC,cAAe,KAGXC,EAAcC,IAAoC,IAAnC,IAAEC,EAAG,MAAErC,EAAK,MAAEsC,EAAK,OAAEC,GAAQH,EAChD,MAAMxB,EAAQL,EAAgBP,GAC9B,OACEjB,EAAAA,EAAAA,KAACyD,EAAAA,GAAY,CAEXT,MAAOA,EACPU,YAAa,EACbC,SAAU1C,EACVuC,OAAQA,EAAOtD,UAEfI,EAAAA,EAAAA,MAAA,OAAKiD,MAAOA,EAAOxD,UAAU,YAAWG,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAawD,MAAO,CAAEK,MAAO,OAAQ1D,SACjD2B,EAAMQ,aAETrC,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAawD,MAAO,CAAEK,MAAO,OAAQ1D,SACjD2B,EAAMW,QAAQzB,KAAI,CAAC8C,EAAQC,KAC1B9D,EAAAA,EAAAA,KAAA,OAAAE,SAAc2D,GAAJC,QAGd9D,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAawD,MAAO,CAAEK,MAAO,OAAQ1D,UAClDF,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYG,SACvB2B,EAAMN,OAAOR,KAAI,CAACgD,EAAKD,KACtB9D,EAAAA,EAAAA,KAAA,MAAAE,SAAa6D,GAAJD,aAlBZR,EAuBQ,EAInB,OACEhD,EAAAA,EAAAA,MAAA,OAAKP,UAAU,wBAAuBG,SAAA,EACpCF,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,CACZpE,QAAQ,SACRC,SACES,EAAAA,EAAAA,MAAA2D,EAAAA,SAAA,CAAA/D,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,uBAAiB,6HAEIsB,EAAgB0C,OAAO,oBAGxDnE,UAAU,kBAGZO,EAAAA,EAAAA,MAAA,OAAKP,UAAU,gBAAeG,SAAA,EAE5BI,EAAAA,EAAAA,MAAA,OAAKP,UAAU,gBAAeG,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAcwD,MAAO,CAAEK,MAAO,OAAQ1D,SAAC,gBAGtDF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAcwD,MAAO,CAAEK,MAAO,OAAQ1D,SAAC,iBAGtDF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAcwD,MAAO,CAAEK,MAAO,OAAQ1D,SAAC,0BAMxDF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kBAAiBG,UAC9BF,EAAAA,EAAAA,KAACmE,EAAAA,GAAS,CAAAjE,SACPkE,IAAA,IAAC,OAAEC,EAAM,MAAET,GAAOQ,EAAA,OACjBpE,EAAAA,EAAAA,KAACsE,EAAAA,GAAI,CACHV,MAAOA,EACPS,OAAQA,EACRE,SAAU/C,EAAgB0C,OAC1BM,UAAWxB,EAAMwB,UACjBC,yBAA0BzB,EAC1BI,YAAaA,GACb,WAKN,ECpGV,EApB2BzD,IAA+B,IAA9B,KAAEG,EAAI,OAAEK,EAAM,OAAEoB,GAAQ5B,EAElD,OADA+E,QAAQC,IAAI,mCAAoCpD,IAE9CvB,EAAAA,EAAAA,KAACsB,EAAAA,EAAW,CACVxB,KAAMA,EACNK,OAAQA,EACRC,MAAM,iBACNC,cAAe,CACb,CACEe,MAAO,QACPxB,QAAS,SACTuB,QAAShB,IAEXD,UAEFF,EAAAA,EAAAA,KAAC4E,EAAU,CAACrD,OAAQA,KACR,C,iGCDlB,MA4GA,GA5GuBsD,EAAAA,EAAAA,aACrB,CAAAlF,EAA8CmF,KAAS,IAAtD,KAAEC,EAAI,QAAEvC,EAAO,UAAEwC,EAAS,OAAEC,EAAM,MAAEC,GAAOvF,EAC1C,MAAM,iBAAEwF,IAAqBC,EAAAA,EAAAA,MACtBC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAAC,IAElDC,EAAAA,EAAAA,YAAU,KACRF,EAAgB,CAAC,EAAE,GAClB,CAACP,IAEJ,MAAMU,EAAWA,KACf,MACMC,EADeC,EAAMC,sBAAsBC,KACd9E,KAChC+E,GAASA,EAAKC,SAAS,qBAGG,IAAzBL,EAAcxB,QAKlBc,EAAUU,GACVJ,EAAgB,CAAC,IALfH,EAAiBa,EAAAA,GAKA,GAIrBC,EAAAA,EAAAA,qBAAoBnB,GAAK,MACvBW,eAGF,MAAMS,GAAkBzE,EAAAA,EAAAA,UAAQ,IAYvB,CAXiB,CACtB0E,GAAI,SACJC,KAAM/C,IAAA,IAAC,IAAEgD,GAAKhD,EAAA,OACZrD,EAAAA,EAAAA,KAAA,SACEsG,KAAK,WACLvG,UAAU,mBACVwG,QAASF,EAAIG,gBACbC,SAAUJ,EAAIK,4BACd,MAGsBlE,IAC3B,CAACA,IAEEmD,GAAQgB,EAAAA,EAAAA,IAAc,CAC1B5B,OACAvC,QAAS0D,EACThB,MAAO,CAAEG,gBACTuB,oBAAoB,EACpBC,qBAAsBvB,EACtBwB,iBAAiBA,EAAAA,EAAAA,QAGnB,OACExG,EAAAA,EAAAA,MAAA2D,EAAAA,SAAA,CAAA/D,SAAA,EACEI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACEsG,KAAK,SACLvG,UAAU,+BACVoB,QAASA,KACPwE,EACGoB,cACAlB,KAAKmB,SAASX,GAAQA,EAAIY,gBAAe,IAAM,EAClD/G,SACH,gBAGDF,EAAAA,EAAAA,KAAA,UACEsG,KAAK,SACLvG,UAAU,4BACVoB,QAASA,KACPwE,EACGoB,cACAlB,KAAKmB,SAASX,GAAQA,EAAIY,gBAAe,IAAO,EACnD/G,SACH,oBAKFyF,EAAMoB,cAAclB,KAAK3B,OAAS,GACjClE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,gBAAgBwD,MAAO,CAAE2D,UAAW,QAAShH,SACzDyF,EAAMoB,cAAclB,KAAK9E,KAAKsF,IAC7B/F,EAAAA,EAAAA,MAAA,OAEEP,UAAU,8CACVwD,MAAO,CACL4D,gBAAiBd,EAAIG,gBAAkB,UAAY,WACnDtG,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,OAAMG,UAClBkH,EAAAA,EAAAA,IACCf,EAAIgB,kBAAkB,GAAGxD,OAAOyD,UAAUlB,KAC1CC,EAAIgB,kBAAkB,GAAGE,iBAG7BvH,EAAAA,EAAAA,KAAA,OAAAE,SAAMmG,EAAIN,SAASvD,EAAQ,GAAGgF,iBAZzBnB,EAAIF,SAiBfnG,EAAAA,EAAAA,KAAA,KAAGD,UAAU,iBAAgBG,SAAC,wBAE/B,G,6MCzHF,MCAMuH,EAAeC,MAAOC,EAAiBC,EAASC,KAC3D,IACE,MAAMC,EAAkBC,4DACxB,IAAIC,EAAmB,GACvBtD,QAAQC,IAAI,qCAAsCgD,GAClDjD,QAAQC,IAAI,gCAAiCiD,GAC7C,MAAMK,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYT,SACT,IAAIU,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRb,UACAtB,KAAM,OACNoC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAClCN,EAAQM,EAAS,EAEnBC,UAAY/G,IACV6C,QAAQ7C,MAAM,kBAAmBA,GACjCyG,EAAOzG,EAAM,GAEf,IAKAgH,EAAoBlB,EAAgB5G,KAAI2G,UAC5C,IAAK,IAADoB,EAAAC,EACF,MAAMC,EAAc,GAAAC,OAAMnB,EAAe,gEAAAmB,OAA+DC,GAGlGC,EAAsC,QAA7BL,SADmBX,EAAUa,IACNI,cAAM,IAAAN,GAE3C,QAF2CC,EAA1BD,EAA4BO,MAC3CvD,GAASA,EAAK1F,QAAU8I,WAC1B,IAAAH,OAF2C,EAA1BA,EAEf5C,GAIH,GAFAzB,QAAQC,IAAI,qCAAsCwE,GAE9CA,EAAW,CACb,MAAMG,EAAc,GAAAL,OAAMnB,EAAe,8CAAAmB,OAA6CE,EAAS,8CAEzFI,QAAsBpB,EAAUmB,IAEhC,OAAEF,GAAWG,EAEnB,GAAIH,GAAUA,EAAOlF,OAAS,EAAG,CAAC,IAADsF,EAAAC,EAC/B/E,QAAQC,IAAI,uCAAwCyE,GAEpD,MAAMM,EAAyB,QAAZF,EAAGJ,EAAO,UAAE,IAAAI,OAAA,EAATA,EAAWG,aAEjC,IAAiB,OAAbD,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAeN,cAAM,IAAAK,OAAR,EAAbA,EAAuBvF,QAAS,EAAG,CAAC,IAAD0F,EACrC,MAAMC,EAAiD,QAAvCD,EAAGF,EAAcN,OAAO,GAAGO,oBAAY,IAAAC,OAAA,EAApCA,EAAsCR,OAEzD,GAAIS,GAAcA,EAAW3F,OAAS,EAAG,CAEvC,MAAM4F,EAAmBD,EAAWE,QACjCC,IACEhC,EAAiBiC,MACfC,GAAcA,EAAU/D,KAAO6D,EAAM7D,OAK5C6B,EAAmB,IAAIA,KAAqB8B,EAC9C,CACF,CACF,CACF,CACF,CAAE,MAAOjI,GAEP,MADA6C,QAAQ7C,MAAM,0BAA2BqH,EAAarH,GAChDA,CACR,KAIF,aADMuG,QAAQ+B,IAAItB,GACXb,CACT,CAAE,MAAOnG,GAEP,MADA6C,QAAQ7C,MAAM,sCAAuCA,GAC/CA,CACR,G,cChFK,MCCMuI,EAAuB1C,MAAO2C,EAAYzC,KACrD,IAAI0C,EAAY,CAAEC,MAAO,IACzB7F,QAAQC,IAAI,iCACZ,MAAMmD,EAAkBC,4DAExB,IACE,MAAME,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYT,SACT,IAAIU,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRb,UACAtB,KAAM,OACNoC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAElCN,EAAQM,EAAS,EAEnBC,UAAY/G,IACV6C,QAAQ7C,MAAM,kBAAmBA,GACjCyG,EAAOzG,EAAM,GAEf,IAKN,IAAI2I,EAAS,GAAAvB,OAAMnB,EAAe,uDAAAmB,OAAsDoB,GACxF,MAAMI,QAAuBtC,EAAUqC,GACjCE,IAA2B,OAAdD,QAAc,IAAdA,OAAc,EAAdA,EAAgB1F,OAAQ,IAAIsE,MAAKvD,GAAsB,UAAdA,EAAKQ,OAEjE,GAAIoE,EAAW,CACX,MAAMC,EAAUD,EAAUE,WACpBC,EAAcH,EAAUxF,MACxB4F,EAAQ,GAAA7B,OAAMnB,EAAe,sCAAAmB,OAAqC0B,GAClEI,QAAqB5C,EAAU2C,GAC/BE,IAA0B,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAchG,OAAQ,IAAIsE,MAAKvD,GAAsB,kBAAdA,EAAKQ,OAChE,GAAG0E,EAAW,CACV,MAAMC,EAAUD,EAAWJ,WACrBM,EAAK,GAAAjC,OAAMnB,EAAe,4CAAAmB,OAA2CgC,EAAO,qCAC5EE,QAAmBhD,EAAU+C,GACnC,GAAIC,EACA,IAAK,MAAMrF,KAAQqF,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdtF,EAAKQ,KAA0B,CACjC,MAAM+E,EAAQ,GAAApC,OAAMnB,EAAe,4CAAAmB,OAA2CnD,EAAK8E,YAC7EU,QAAsBnD,EAAUkD,GAClCC,GACAhB,EAAUC,MAAM9H,KAAK,CACnB8I,QAASD,EAAclL,MACvBoL,QAASF,EAAcpG,OAG/B,CAGV,CACAoF,EAAoB,SAAIO,EACxBP,EAAoB,SAAID,CAC5B,KAAQ,CAAC,IAADoB,EACN,MAAMC,EAASrB,EAAWnI,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,KAEvD,IAAIuJ,EAAW,GAAA1C,OAAMnB,EAAe,mEAAAmB,OAAkEyC,GACtG,MACMT,EAA0C,QAAnCQ,SADkBtD,EAAUwD,IACRC,aAAa,UAAE,IAAAH,OAAA,EAAhCA,EAAkCb,WAC3CM,EAAK,GAAAjC,OAAMnB,EAAe,4CAAAmB,OAA2CgC,EAAO,qCAC5EE,QAAmBhD,EAAU+C,GACjC,GAAIC,EACF,IAAK,MAAMrF,KAAQqF,EAAWC,cAAgB,GAC5C,GAAkB,kBAAdtF,EAAKQ,KAA0B,CACjC,MAAM+E,EAAQ,GAAApC,OAAMnB,EAAe,4CAAAmB,OAA2CnD,EAAK8E,YAC7EU,QAAsBnD,EAAUkD,GAClCC,GACAhB,EAAUC,MAAM9H,KAAK,CACnB8I,QAASD,EAAclL,MACvBoL,QAASF,EAAcpG,OAG/B,CAGJoF,EAAoB,SAAI,WACxBA,EAAoB,SAAID,CAC5B,CAEA,OADA3F,QAAQC,IAAI,mBAAoB2F,GACzBA,CACT,CAAE,MAAOzI,GAEP,MADA6C,QAAQ7C,MAAM,qBAAsBA,GAC9BA,CACR,G,cCxFK,MAAMgK,EAAgBnE,MACzBE,EACAkE,EACAjE,EACA3C,EACAoB,KAEA,IACE,MAAMwB,EAAkBC,4DAClBgE,QAsIZrE,eAAiCkD,EAAYtE,EAAMsB,GAC/C,MAAME,EAAkBC,4DAClBiE,EAAM,GAAA/C,OAAMnB,EAAe,+CACjC,IAAImE,EAAM,GACV,IACE,MAKMpL,EAAO,CACXkE,KAAM,CACJ,CACEoB,GAAIyE,EACJA,WAAYA,EACZtE,KAAMA,EACN4F,OAAQpE,EACRqE,aAXK,iBAAT7F,EAAuB,+CAAA2C,OAC4B2B,GAAU,6CAAA3B,OACZ2B,MAe7CjC,QAAiByD,EAAAA,EAAAA,IACrB,OACAJ,EAEAnL,EACA+G,GAIF,GAAIe,EAAS0D,QAAU1D,EAAS2D,OAAQ,CAItC,MAAMC,EAAW5D,EAAS2D,OAAOE,QAAQ,GAAGD,SAE5C,IAAK,MAAME,KAAWF,EAClB,GAAIE,EAAQ7B,aAAeA,IACvBlG,QAAQC,IAAI,iCAAkCiG,GAC1C8B,MAAMC,QAAQF,EAAQG,YAAcH,EAAQG,UAAU1I,OAAS,GAAG,CAClE+H,EAAMQ,EAAQG,UAAU,GAAGzG,GAC3BzB,QAAQC,IAAI,eAAgBsH,GAC5B,KACJ,CAGR,OAAOA,CACT,CAIE,OAHAvH,QAAQ7C,MACN,qEAEKoK,CAEX,CAAE,MAAOpK,GAEP,OADA6C,QAAQ7C,MAAM,wCAADoH,OAAyC2B,EAAU,KAAK/I,GAC9DoK,CACT,CACF,CAjM4BY,CAAkBhF,EAAUvB,EAAMsB,GAG1D,GAFAlD,QAAQC,IAAI,oCAAqCoH,GAE/B,KAAdA,EAyHF,OAFArH,QAAQoI,KAAK,gCAEN,GAzHa,CACpB,MAAMC,EAAiB,GAAA9D,OAAMnB,EAAe,mEAAAmB,OAAkE8C,EAAS,6CAEjHiB,QAAsBZ,EAAAA,EAAAA,IAAqB,MAAOW,EAAmB,GAAInF,GAE/E,IAAIoF,EAAcX,SAAUW,EAAcV,OA+GxC,OAFA5H,QAAQ7C,MAAM,gDAEP,GA/GyC,CAAC,IAADoL,EAAAC,EAChD,MAIMV,IAH0B,QAA9BS,EAAAD,EAAcV,OAAOlD,OAAO,UAAE,IAAA6D,GAA0B,QAA1BC,EAA9BD,EAAgCE,gCAAwB,IAAAD,OAA1B,EAA9BA,EAA0D9D,SAAU,IAI/DW,QAAOqD,GACJA,EAAUC,WAAWpD,MACrBqD,GAAsB,yBAAdA,EAAKC,OAAkD,IAAfD,EAAKE,UAGxDzM,KAAIqM,IAED,MAAMK,EAAoBL,EAAUC,WAAWtM,KAAIuM,GAC7B,QAAdA,EAAKC,KACA,CACLA,KAAMD,EAAKC,KACXC,MAAOE,OAAO3K,OAAOuK,EAAKE,OAAS,IAEd,gBAAdF,EAAKC,KACP,CACLA,KAAMD,EAAKC,KACXC,MAAO,WAEa,WAAdF,EAAKC,MAAmC,yBAAdD,EAAKC,KAChC,CACLA,KAAMD,EAAKC,KACXC,MAAOF,EAAKE,OAGP,CACLD,KAAMD,EAAKC,KACXC,MAAO,MAKf,MAAO,CACPG,QAASP,EAAUO,QACnBN,WAAYI,EACX,IAMX,GAHA/I,QAAQC,IAAI,4BAA6B6H,KAGrCA,EAAQtI,OAAS,GA4DnB,OAFAQ,QAAQoI,KAAK,wDAEN,GA5De,CACtB,MAAMc,EAAW,+FAEXC,EAAe,CACnB1H,GAAI0B,EACJvB,KAAMA,EACNwH,QAAStB,EAAQzL,KAAI+E,GAAQA,EAAK6H,UAClCI,KAAM,kBAGR,IACE,MAAMC,QAAyB7F,EAAU,OAAQyF,EAAaC,GAC9DnJ,QAAQC,IAAI,oBAAqBsJ,KAAKC,UAAUF,IAGhD,MAAMG,EAAmB,CACvBjC,OAAQpE,EACRxB,KAAM,qCACNsE,WAAY/C,EACZsE,aAAa,iEAADlD,OAAmEpB,IAW3EuG,EAAU,CACd,CACED,mBACAE,yBAX6B7B,EAAQzL,KAAIuN,IAAG,CAC9CC,QAASD,EAAIX,QACba,WAAYF,EAAIjB,WAAW1L,QAAO,CAAC8M,EAAKnB,KACtCmB,EAAInB,EAAKC,MAAQD,EAAKE,MACfiB,IACN,CAAC,SAUN/J,QAAQC,IAAI,wCAAyCsJ,KAAKC,UAAUE,IAGpE,MAAMM,EAAS,0GAAAzF,OAA6GpB,GACtH8G,QAAuBxG,EAAU,QAASuG,EAAWN,GAI3D,OAFA1J,QAAQC,IAAI,4BAA6BsJ,KAAKC,UAAUS,IAEjDnC,CAOT,CAAE,MAAO3K,GAGP,OAFA6C,QAAQ7C,MAAM,4CAA6CA,GAEpD,EACT,CACF,CAKF,CAKF,CAKF,CAAE,MAAOA,GAGP,OAFA6C,QAAQ7C,MAAM,qCAAsCA,GAE7C,EACT,GAiEK,MAAMsG,EAAYT,iBAMnB,IALJe,EAAMmG,UAAA1K,OAAA,QAAA2K,IAAAD,UAAA,GAAAA,UAAA,GAAG,MACTpG,EAAGoG,UAAA1K,OAAA,EAAA0K,UAAA,QAAAC,EACHC,EAAIF,UAAA1K,OAAA,QAAA2K,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAIPlK,QAAQC,IAAI,gBAAiB6D,GAC7B9D,QAAQC,IAAI,cACZD,QAAQC,IAAI,gBAAiBsJ,KAAKC,UAAUY,EAAM,KAAM,IAExD,IACE,MAAMnG,QAAiBoG,EAAAA,EAAAA,GAAM,CAC3BvG,MACAC,SAKA1D,KAAM+J,IAIR,OADApK,QAAQC,IAAI,qBAAsBgE,EAAS5D,MACpC4D,CACT,CAAE,MAAO9G,GAEP,MADA6C,QAAQ7C,MAAM,kBAAmBA,GAC3BA,CACR,CACF,ECzOWmN,EAAiBtH,UAC5B,IACE,IAAIuH,EAAmBC,OAAOC,OAAOC,SAAS,eAC9C,MAAMnH,QAAgBC,EAAAA,EAAAA,MACtBxD,QAAQC,IAAI,uBAAwBsK,GACpC,MAAMI,EAAUtH,6GAEVY,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqB8G,EAAS,CACpC5G,OAAQ,MACRnC,KAAM,OACNoC,WAAYL,EACZO,UAAWN,GACX,IAGEgH,EAAY3G,EAAS4G,KAAKhC,KAC1BiC,EAAY7G,EAAS4G,KAAK/B,MAC1BiC,EAAwB,kBACxBC,EAAuBT,EAM7B,MAJgB,CACd,CAACK,GAAYE,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAO7N,GAEP,YADA6C,QAAQ7C,MAAM,gCAAiCA,EAEjD,GCDIiG,EAAkBC,4DAkPxB,EAjP2B4H,KACzB,MAAM,eAAEC,IAAmBxK,EAAAA,EAAAA,KACrByK,GAAWC,EAAAA,EAAAA,MAGjB,IAAIC,EAAQb,OAAOC,OAAOC,SAAS,SACnC1K,QAAQC,IAAI,+BAAgCoL,GAwO5C,MAAO,CAAEC,gBAtOetI,MAAOwB,EAAahE,EAAO2C,EAAUvB,KAC3D,IACEuJ,GAASI,EAAAA,EAAAA,KAAwB,IAGjC,MAAMrI,QAAgBoH,IACtB,IAAKpH,EAEH,YADAgI,EAAeM,EAAAA,IAGjBxL,QAAQC,IAAI,gCAAiCiD,GAE7C,IAAIuI,EAAc,GAGlB,GAAa,kBAAT7J,EAA0B,CAC5B,MAAM8J,EAAkB1I,UAEtB,MAAMoE,QAAkBrE,EACtB,CAACyB,GACDtB,GAKF,OAFAlD,QAAQC,IAAI,yBAA0BmH,GACtC+D,GAASQ,EAAAA,EAAAA,IAAevE,IACjBA,CAAS,EAElB,IAAIwE,GAAU,EACd5L,QAAQC,IAAI,oCACZ,MAAM4L,EAAwB7I,UAC5B,MAAM8I,EAAK,GAAAvH,OAAMnB,EAAe,4CAAAmB,OAA2CpB,EAAQ,8CAC7Ec,QAAiByD,EAAAA,EAAAA,IACrB,MACAoE,EACA,GACA5I,GAIF,GAFAlD,QAAQC,IAAI,mCAAoCgE,GAE5CA,EAAS0D,QAAU1D,EAAS2D,OAAQ,CACtC,MAAMmE,EAAkB9H,EAAS2D,OAAOmE,gBAAgB1P,KACrD2P,GAAmBA,EAAeC,MAAM/F,aAErCgG,EACJjI,EAAS2D,OAAOuE,gBAAgB9P,KAAI2G,UAClC,IAAIoJ,EAASC,EAAOJ,MAAM/F,WACtBoG,EAAWD,EAAOJ,MAAMrK,KAC5B,GACc,gBAAZ0K,GACY,gBAAZA,GACY,kBAAZA,GACY,WAAZA,GACY,kBAAZA,EACA,CACF,GAAsB,eAAlBD,EAAOE,OAAyB,CAClC,MAAMlF,QAkSxBrE,eAAiCkD,EAAYtE,EAAMsB,GACjD,MAAMoE,EAAM,GAAA/C,OAAMnB,EAAe,+CAC3BmE,EAAM,GACZ,IACE,MAAME,EACK,iBAAT7F,EAAuB,+CAAA2C,OAC4B2B,GAAU,6CAAA3B,OACZ2B,GAE7C/J,EAAO,CACXkE,KAAM,CACJ,CACEoB,GAAIyE,EACJA,WAAYA,EACZtE,KAAMA,EACN4F,OAAQpE,EACRqE,aAAcA,KAMdxD,QAAiByD,EAAAA,EAAAA,IACrB,OACAJ,EAEAnL,EACA+G,GAIF,IAAIe,EAAS0D,SAAU1D,EAAS2D,OAiB9B,OAHA5H,QAAQ7C,MACN,qEAEKoK,EAjB+B,CAAC,IAADiF,EACtC,MAAM3E,GAAqC,QAA1B2E,EAAAvI,EAAS2D,OAAOE,QAAQ,UAAE,IAAA0E,OAAA,EAA1BA,EAA4B3E,WAAY,GAEzD,IAAK,MAAMb,KAAUa,EACnB,GACEb,EAAOkB,WACPlB,EAAOkB,UAAU3C,MACdkH,GAAaA,EAASvG,aAAeA,IAGxC,OAAOc,EAAOvF,EAGpB,CAMF,CAAE,MAAOtE,GAEP,OADA6C,QAAQ7C,MAAM,wCAADoH,OAAyC2B,EAAU,KAAK/I,GAC9DoK,CACT,CACF,CAxV0CY,CACtBiE,EACAE,EACApJ,GAEE6I,EAAgBlO,SAASwJ,KAC3B+E,EAAS/E,EAEb,CACA,GACe,iBAAbiF,GACa,iBAAbA,EACA,CACAV,GAAU,EACV,MAAMc,QAAmBC,EAAcP,EAAQlJ,GAC/ClD,QAAQC,IAAI,mBAAoByM,GAChCN,EAASM,EAAWxG,WACpBoG,EAAWI,EAAW9K,IACxB,CACA,QAAeuI,IAAXiC,QAAqCjC,IAAbmC,EAC1B,IAAK,IAADM,EAAAC,EAAAC,EAAAC,EAKF,MAAMC,QA+O1BhK,eAA8BkD,EAAYoG,EAAUpJ,GAClD,IAAIY,EAAM,GAIRA,EADe,iBAAbwI,EACC,GAAA/H,OAAMnB,EAAe,gDAAAmB,OAA+C2B,GAGpE,GAAA3B,OAAMnB,EAAe,8CAAAmB,OAA6C2B,EAAU,qCAGjF,IACE,MAAM+G,QAAqBvF,EAAAA,EAAAA,IAAqB,MAAO5D,EAAK,GAAIZ,GAEhE,OAAI+J,EAAatF,QAAUsF,EAAarF,OAC/BqF,EAAarF,QAEpB5H,QAAQC,IAAI,oCAADsE,OAAqC2B,IACzC,CAAC,EAEZ,CAAE,MAAO/I,GAEP,OADA6C,QAAQ7C,MAAM,mCAADoH,OAAoC2B,EAAU,KAAK/I,GACzD,CAAC,CACV,CACF,CAvQ2C+P,CAAed,EAAQE,EAAUpJ,GAElDiK,GADgB,OAARH,QAAQ,IAARA,GAAgB,QAARJ,EAARI,EAAUtI,cAAM,IAAAkI,GAAK,QAALC,EAAhBD,EAAmB,UAAE,IAAAC,GAArBA,EAAuBrM,YA2JzDwC,eAAkCkD,EAAYhD,EAAQkE,EAAU5G,EAAOoB,GACrE,MAAMwL,EAAc,GACpB,IAAIC,GAAa,EACjB,MAAMvJ,EAAG,GAAAS,OAAMnB,EAAe,mEAAAmB,OAAkE2B,EAAU,6CAE1G,IAAK,IAADoH,EAAAC,EACF,MAAMN,QAAqBvF,EAAAA,EAAAA,IAAqB,MAAO5D,EAAK,GAAIZ,GAChElD,QAAQC,IAAI,2BAADsE,OAA4B2B,EAAU,KAAK+G,GAEtD,IAAIO,GAA+C,QAA7BF,EAAAL,EAAarF,OAAOlD,OAAO,UAAE,IAAA4I,GAA0B,QAA1BC,EAA7BD,EAA+B7E,gCAAwB,IAAA8E,OAA1B,EAA7BA,EAAyD7I,SAAU,GAEzF8I,EAAkBA,EAAgBnI,QAAOoI,IACvC,MAAMC,EAAsBD,EAAI9E,WAAWhE,MAAKxG,GAAgB,yBAAXA,EAAE0K,OACjD8E,EAAuBF,EAAI9E,WAAWhE,MAAKxG,GAAgB,qBAAXA,EAAE0K,OACxD,OAAsC,KAAZ,OAAnB6E,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqB5E,SAAkD,KAAZ,OAApB6E,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB7E,MAAc,IAIvD,IAAzB0E,EAAgBhO,SAClBgO,QAAyBrG,EACvBjE,EACAkE,EACAlB,EACA1F,EACAoB,IAIJyL,EAAYG,EAAgBjI,MAAKkI,IAC/B,MAAM7E,EAAO6E,EAAI9E,WAAWhE,MAAKxG,GAAgB,qBAAXA,EAAE0K,OACxC,OAAuB,KAAZ,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,MAAc,IAI3B0E,EAAgBhO,OAAO,EAEvBgO,EAAgBlL,SACbsL,IACC,MAAM/D,EAAU+D,EAAe3E,QAC/B,IAAI4E,EAAY,KACZC,EAAY,KACZC,GAAe,EACfpI,EAAa,GAcE,IAADqI,GAZlBJ,EAAejF,WAAWrG,SAAS2L,IAC7BA,EAAUpF,KAAKhL,SAAS,0BAC1BkQ,EAAeE,EAAUnF,OAEvBmF,EAAUpF,KAAKhL,SAAS,iBAC1BiQ,EAAYG,EAAUnF,OAEpBmF,EAAUpF,KAAKhL,SAAS,gBAC1B8H,EAAasI,EAAUnF,MACzB,IAGEiF,KACFF,EAAkD,QAAzCG,EAAI5G,EAAUzC,MAAKuJ,GAAKA,EAAEzM,KAAOoI,WAAQ,IAAAmE,OAAA,EAArCA,EAAuCtS,MACjDmS,GAECT,EAAYrP,KAAK,CACfoQ,UAAWN,EACXO,QAASvE,EACTwE,eAAgBP,GAAa,UAC7BQ,gBAAkB3I,IAG5B,IAIF3F,QAAQC,IAAI,+CAADsE,OAAgD2B,GAE/D,CAAE,MAAO/I,GACP6C,QAAQ7C,MAAM,uCAADoH,OAAwC2B,EAAU,KAAK/I,EACtE,CAEA,MAAO,CACL,WAAeiQ,EACf,YAAeC,EAEnB,CA3OoDkB,CAAmBnC,EAAQlJ,EAASkE,EAAW5G,EAAMoB,IAC/E4M,EAAarB,EAAkBqB,WAC/BC,EAActB,EAAkBsB,YACtCzO,QAAQC,IAAI,mBAAoBuO,GAChCxO,QAAQC,IAAI,qBAAsBwO,GAClCzO,QAAQC,IAAI,qBAAsBkN,GAIlC1B,EAAY1N,KAAK,CACfqO,SACAE,WACAoC,WAAmB,OAAR1B,QAAQ,IAARA,OAAQ,EAARA,EAAUtI,OAAO,GAAGlE,QAAS,MACxCmO,WAAmB,OAAR3B,QAAQ,IAARA,OAAQ,EAARA,EAAUtI,OAAO,GAAGhJ,QAAS,MACxCkT,UAAmB,OAAR5B,QAAQ,IAARA,GAAmB,QAAXF,EAARE,EAAUtI,OAAO,UAAE,IAAAoI,GAAgC,QAAhCC,EAAnBD,EAAsB,qCAA6B,IAAAC,OAA3C,EAARA,EAAqD8B,cAAe,MAC/EL,aACAC,eAEJ,CAAE,MAAOpP,GACPW,QAAQ7C,MAAM,oCAADoH,OACyB6H,EAAM,KAC1C/M,EAEJ,CAEJ,WAGIqE,QAAQ+B,IAAIyG,EACpB,MACElM,QAAQ7C,MAAM,qDAChB,EAKIiK,QAAkBsE,UAClBG,EAAsBzE,GAE5B+D,GAASI,EAAAA,EAAAA,KAAwB,IACjCJ,GAAS2D,EAAAA,EAAAA,IAAiBrD,IAC1BN,GAAS4D,EAAAA,EAAAA,IAAWnD,IACpBT,GAAS6D,EAAAA,EAAAA,IAAa9L,GACxB,KAAO,CAyBL,IAAIkE,EAAY,GAChB,MAAM6H,QAAwBtC,EAAcxJ,EAASD,GASrD,GARAlD,QAAQC,IAAI,qCAAsCgP,GAC/CA,EAAgB/I,aACjBkB,QA6QVpE,eAA+BE,EAASC,GACtC,MAAMW,EAAG,GAAAS,OAAMnB,EAAe,mEAAAmB,OAAkEpB,EAAQ,6CAExG,IACE,MAAM8J,QAAqBvF,EAAAA,EAAAA,IAAqB,MAAO5D,EAAK,GAAIZ,GAEhE,GAAI+J,EAAatF,QAAUsF,EAAarF,OAAQ,CAAC,IAADsH,EAC9C,MAAMC,GAAwE,QAAtDD,EAAAjC,EAAarF,OAAOlD,OAAO,GAAG+D,gCAAwB,IAAAyG,OAAA,EAAtDA,EAAwDxK,SAAU,GAEpFsC,EAAS,GAEf,IAAK,MAAM0B,KAAayG,EAAiB,CAAC,IAADC,EACvC,MAAM3N,EAAKiH,EAAUO,QACfa,EAAapB,EAAUC,YAAc,GAI3C,GAF0F,QAAhEyG,EAAGtF,EAAWnF,MAAKiE,GAAsB,yBAAdA,EAAKC,cAAgC,IAAAuG,OAAA,EAA7DA,EAA+DtG,MAElE,CACxB,MAAMpN,QAAc2T,EAAkBnM,EAASzB,GAC/CuF,EAAOjJ,KAAK,CACV0D,KACA/F,SAEJ,CACF,CAEA,OAAOsL,CACT,CAEE,OADAhH,QAAQC,IAAI,mCAADsE,OAAoCpB,IACxC,EAEX,CAAE,MAAOhG,GAEP,OADA6C,QAAQ7C,MAAM,mCAADoH,OAAoCpB,EAAQ,KAAKhG,GACvD,EACT,CACF,CAhT4BmS,CAAgBpM,EAAS+L,EAAgB/I,aAG7DlG,QAAQC,IAAI,0BAA2BmH,GAGnCA,EAAU5H,OAAS,EAAG,CACxB,MAAM+P,OCnMmBvM,OACjCoE,EACAlE,EACAC,KAIA,IAAK,IAADqM,EACF,MAAMpM,EAAkBC,4DACxBrD,QAAQC,IAAI,0CAA2CmH,GAEvD,MAAMxC,EAAc,GAAAL,OAAMnB,EAAe,mEAAAmB,OAAkEpB,EAAQ,6CAE7GI,QAAgBC,EAAAA,EAAAA,MAEhBS,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBe,EAAgB,CAC3Cb,OAAQ,MACRb,UACAtB,KAAM,OACNoC,WAAYL,EACZO,UAAWN,GACX,IAGJ5D,QAAQC,IAAI,0CAA2CgE,GAEvD,IAAIwL,EAAyB,GACzBC,EAAqB,GAGrBlC,GAA6D,QAA3CgC,EAAAvL,EAASS,OAAO,GAAG+D,gCAAwB,IAAA+G,OAAA,EAA3CA,EAA6C9K,SAAU,GAsF7E,aAhEMhB,QAAQ+B,IACZ+H,EAAgBnR,KAAI2G,UAClBhD,QAAQC,IAAI,iBAAkByI,GAC9B,IAAK,IAAIiH,KAAevI,EACtB,GAAIsB,EAAUO,UAAY0G,EAAYlO,GAAI,CACxC,IAAI0M,EAAYwB,EAAYjU,MAC5ByS,EAAYA,EAAUyB,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAC3D,IAAIC,EAAM,CAAEpO,GAAIiH,EAAUO,QAASvN,MAAOiU,EAAYjU,OAEtD,MAAMoU,EAAepH,EAAUC,WAAWtM,KAAK0T,GAE3CA,EAAclH,KAAKhL,SAAS,eAC5BkS,EAAcjH,MAEPpD,EAAqBqK,EAAcjH,MAAO5F,GAAS8M,MACvDC,IACC,GAAIA,EAAmB,CACrBjQ,QAAQC,IAAIgQ,GACZJ,EAAe,UAAqB,OAAjBI,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBC,SACtCL,EAAe,UAAqB,OAAjBI,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,SAEtC,IAAItJ,EAAU,GACZC,EAAU,GAEZmJ,EAAkBpK,MAAMvD,SAAS8N,IAC/BvJ,GAAW,IAAMuJ,EAAGvJ,QACpBC,GAAW,IAAMsJ,EAAGtJ,OAAO,IAG7B+I,EAAY,OAAIhJ,EAAQpJ,MAAM,GAC9BoS,EAAkB,aAAI/I,EAAQrJ,MAAM,EACtC,MAKJoS,EAAIE,EAAclH,KAAK+G,QAAQzB,EAAW,IAAIkC,QAC5CN,EAAcjH,MACTpF,QAAQC,mBAKbD,QAAQ+B,IAAIqK,GAClBL,EAAyB,IAAIA,EAAwBI,GACrD7P,QAAQC,IAAI,2BAA4BwP,GACxCzP,QAAQC,IAAI,oBAAqB4P,EACnC,CACF,KAIJ7P,QAAQC,IACN,qDACAwP,GAEFC,EAAqBtI,EAAU/B,QAC5BiL,IACEb,EAAuBlK,MAAMgL,GAAaA,EAAS9O,KAAO6O,EAAS7O,OAExEzB,QAAQC,IAAI,wBAAyByP,GAI9B,CACLc,SAAS,EACTnQ,KAAM,CACJoQ,UAAW,CACTrJ,UAAWA,EACXsJ,sBAAuBjB,EACvBkB,aAAcjB,EACdrC,YAAY,IAIpB,CAAE,MAAOlQ,GAEP,OADA6C,QAAQ7C,MAAM,yCAA0CA,GACjD,CAAEqT,SAAS,EAAOrT,QAC3B,GDgE6ByT,CACnBxJ,EACAlE,EACAC,GAIFnD,QAAQC,IAAI,2BAA4BsP,GAEpCA,EAAOiB,SACTrF,GAAS0F,EAAAA,EAAAA,IAAmBtB,EAAOlP,KAAKoQ,YACxCtF,GAAS2F,EAAAA,EAAAA,IAAW5N,KAEpBlD,QAAQ7C,MAAM,8BAElB,MACE6C,QAAQoI,KAAK,2CAIf,IAAI2I,EAAqB,CAAC,EAUxBA,EAPiB,CAAC,YAChB,iBACA,iBACA,UACA,2BACA,gBACSlT,SAAS+D,GACC,CAAE4O,SAAS,EAAMnQ,KAAM,SJrOlB2C,OAAOE,EAASC,KAClD,MAAMC,EAAkBC,4DAExB,IAAIyC,EAAS,GAAAvB,OACRnB,EAAe,8CACpB0C,GAAa3C,EACb2C,GAAa,UACb,IAAIsE,EAAO,CACT4G,YAAa,EACbC,eAAgB,CAAC,gBACjBC,gBAAiB,CAAC,gBAGpB,IACElR,QAAQC,IAAI,kCAAmCkD,GAC/C,MAAMI,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYA,CAACK,EAAKqN,EAAQhI,IACvB,IAAIzF,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQoN,EACRjO,SAAOkO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlO,GAAO,IACV,eAAgB,qBAElB7C,KAAMkJ,KAAKC,UAAUL,GACrBvH,KAAM,OACNoC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAClCN,EAAQM,EAAS,EAEnBC,UAAY/G,IACV6C,QAAQ7C,MAAM,kBAAmBA,GACjCyG,EAAOzG,EAAM,GAEf,IAIA8G,QAAiBR,EAAUqC,EAAW,OAAQsE,GACpDpK,QAAQC,IAAI,0CAA2CgE,GACvD,MAAM,OAAES,GAAWT,EAEnB,GAAIS,EAAQ,CACV,IAAI2M,EAASpN,EAASS,OACnBW,QACEX,IACkB,iBAAhBA,EAAO9C,MACU,iBAAhB8C,EAAO9C,OACT8C,EAAOjD,KAAO0B,IAEjB9G,KAAKqI,IAAM,CACVjD,GAAIiD,EAAOjD,GACXG,KAAM8C,EAAO9C,KACbiH,KAAMnE,EAAOhJ,MACb8E,MAAOkE,EAAOlE,UA2BlB,OAvBI6Q,EAAO7R,OAAS,SAEZkE,QAAQ+B,IACZ4L,EAAOhV,KAAI2G,UACT,GAAkC,aAA9BsO,EAAM9Q,MAAM+Q,cAA8B,CAC5C,IAAIC,EAAU,GAAAjN,OAAMnB,EAAe,mEAAAmB,OAAkE+M,EAAM7P,GAAE,6CAC7G,MAAMoD,QAAsBpB,EAAU+N,EAAY,MAAO,IACzDxR,QAAQC,IAAI,kBAAmB4E,GAE/B,MAAM4M,EAAW5M,EAAcH,OAAOgN,SAAShN,IAAY,IAADiN,EACxD,OAAmC,QAAnCA,EAAIjN,EAAO+D,gCAAwB,IAAAkJ,GAA/BA,EAAiCjN,OAC5BA,EAAO+D,yBAAyB/D,OAAOrI,KAC3CuR,GAAmBA,EAAe3E,UAGhC,EAAE,IAEXqI,EAAMlI,QAAUqI,CAClB,MAKC,CACLjB,SAAS,EACTnQ,KAAMgR,EAEV,CACF,CAAE,MAAOlU,GAEP,OADA6C,QAAQ7C,MAAM,uBAAwBA,GAC/B,CAAEqT,SAAS,EAAOnQ,KAAM,GAAIlD,QACrC,GI6ImCyU,CACzB1O,EACAC,GAKJnD,QAAQC,IAAI,cAAe2B,GAC3B5B,QAAQC,IACN,2CACA8Q,GAGEA,EAAmBP,SACrBrF,GAAS0G,EAAAA,EAAAA,IAAmBd,EAAmB1Q,OAIjD,MAAMyR,OEzPgB9O,OAAOE,EAAS6O,EAAUvR,KACtD,MAAM4C,EAAkBC,4DACxB,IAAI2O,GAAY,EACZC,EAAuB,GACvBrM,EAAY,CAAC,OAAS,GAAI,SAAW,IACzC,MAAMsM,EAAkB,CAAC,uBAAwB,wBAC3CC,EAAY,GAAA5N,OACbnB,EAAe,mDAEpB,IAAIgH,EAAO,CACTgI,SAAU,+CACVC,UAAW,CAAC,uBAAwB,wBACpCC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,kBAAkB,cAClE/V,MAAO,mCACPgW,KAAM,KACNC,WAAW,GAETC,EAAI,GAAArO,OACHnB,EAAe,iDAChByP,EAAK,CACPT,SAAU,+CACVU,aAAc,oBACdpW,MAAO,mCACPqW,IAAK,CAAChB,IAGR,IACE/R,QAAQC,IAAI,+BAAgC8R,GAE5C,MAAMxO,QAAgBC,EAAAA,EAAAA,MAEhBS,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBsO,EAAc,CACzCpO,OAAQ,OACRb,SAAOkO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlO,GAAO,IACV,eAAgB,qBAElB7C,KAAMkJ,KAAKC,UAAUY,GACrBxI,KAAM,OACNoC,WAAYL,EACZO,UAAWN,GACX,IAKJ,GAFA5D,QAAQC,IAAI,0CAA2CgE,GAE/B,OAApBA,EAAS0D,OAAiB,CAC5B,MAAMqL,QAAkB,IAAItP,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqB+O,EAAM,CACjC7O,OAAQ,OACRb,SAAOkO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlO,GAAO,IACV,eAAgB,qBAElB7C,KAAMkJ,KAAKC,UAAUqJ,GACrBjR,KAAM,OACNoC,WAAYL,EACZO,UAAWN,GACX,IAGJ5D,QAAQC,IAAI,0CAA2C+S,GACvD,IAAK,MAAMC,KAAWf,EAChBc,EAAUE,kBAAkBD,UACxBvP,QAAQ+B,IACZuN,EAAUE,kBAAkBD,GAAS5W,KAAI2G,UACvC,MAAM2E,EAASwL,EAAI,eAAe1V,MAAM,IAClC8C,EAAS4S,EAAI,cAEnB,GAAe,aAAXxL,EAAuB,CACzB,MAAMyL,EAAI,GAAA7O,OAAMnB,EAAe,4CAAAmB,OAA2C4O,EAAI1R,GAAE,qDAE1E4R,QAAkB,IAAI3P,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqBuP,EAAM,CACjCrP,OAAQ,MACRb,UACAtB,KAAM,OACNoC,WAAYL,EACZO,UAAWN,GACX,IAEJ5D,QAAQC,IAAI,8BAA+BoT,GAE3B,yBAAZJ,EACEjL,MAAMC,QAAQoL,EAAUlH,kBAC1BkH,EAAUlH,gBAAgB7J,SAASgR,IACjCrB,EAAqBlU,KAAK,CACxBmI,WAAYoN,EAAerH,MAAM/F,WACjCqN,OAAQD,EAAeE,MAAM,GAAGC,MAChC,IAIFzL,MAAMC,QAAQoL,EAAUtH,kBACxBsH,EAAUtH,gBAAgBzJ,SAAS0J,IACjCiG,EAAqBlU,KAAK,CACxBmI,WAAY8F,EAAeC,MAAM/F,WACjCqN,OAAQvH,EAAe0H,WAAW,IAClC,IAMN1B,EAD0B,aAAxBxR,EAAM+Q,eACIU,EAAqB1M,MAC9B8G,GACCA,EAAOnG,aAAe6L,GACJ,WAAlB1F,EAAOkH,SAKXvB,IACFpM,EAAkB,OAAIrF,EACtBqF,EAAoB,SAAI+B,EAE5B,KAKV,MACE3H,QAAQ7C,MAAM,wBAKhB,OAHA6C,QAAQC,IAAI,6BACZD,QAAQC,IAAI,sBAAuB+R,GAE5B,CACLxB,SAAS,EACTnQ,KAAM2R,EACN2B,OAAS/N,EACTuG,gBAAiB8F,EAErB,CAAE,MAAO9U,GAQP,MAPA6C,QAAQ7C,MAAM,kBAAmB,CAC/B2G,IAAKqO,EACLjP,UACAkH,OACAjN,UAGIA,CACR,GFuGiCyW,CAAe1Q,EAASC,EAAU3C,GAC7DR,QAAQC,IAAI,qCAAsC6R,GAE9CA,EAAatB,UACfrF,GAAS0I,EAAAA,EAAAA,IAAU/B,EAAazR,OAChC8K,GAAS2I,EAAAA,EAAAA,IAAmBhC,EAAa3F,kBACzChB,GAAS4I,EAAAA,EAAAA,IAAUjC,EAAa6B,UAGlC3T,QAAQC,IAAI,yDACd,CACF,CAAE,MAAO9C,GACP6C,QAAQ7C,MAAM,4BAA6BA,GAC3C+N,EAAe,0DACjB,CAAC,QACCC,GAASI,EAAAA,EAAAA,KAAwB,GACnC,GAGwB,EA0K5BvI,eAAe2J,EAAczG,EAAYhD,GACvC,IAAIY,EAAM,GAEVA,EAAG,GAAAS,OAAMnB,EAAe,8CAAAmB,OAA6C2B,EAAU,uBAE/E,IACE,MAAM+G,QAAqBvF,EAAAA,EAAAA,IAAqB,MAAO5D,EAAK,GAAIZ,GAEhE,OAAI+J,EAAatF,QAAUsF,EAAarF,OAC/B,CACL1B,WAAY+G,EAAarF,OAAOlD,OAAO,GAAGsP,aAAa9N,WACvDtE,KAAMqL,EAAarF,OAAOlD,OAAO,GAAGsP,aAAapS,OAGnD5B,QAAQC,IAAI,oCAADsE,OAAqC2B,IACzC,CAAC,EAEZ,CAAE,MAAO/I,GAEP,OADA6C,QAAQ7C,MAAM,mCAADoH,OAAoC2B,EAAU,KAAK/I,GACzD,CAAC,CACV,CACF,CAuCA6F,eAAeqM,EAAkBnM,EAAS2G,GACxC,MAAM/F,EAAG,GAAAS,OAAMnB,EAAe,4CAAAmB,OAA2CsF,GAEzE,IACE,MAAM5F,QAAiByD,EAAAA,EAAAA,IAAqB,MAAO5D,EAAK,GAAIZ,GAE5D,GAAIe,EAAS0D,QAAU1D,EAAS2D,QAAU3D,EAAS2D,OAAOlD,QAAUT,EAAS2D,OAAOlD,OAAOlF,OAAS,EAAG,CAErG,OADkByE,EAAS2D,OAAOlD,OAAO,GACxBhJ,OAAS,IAC5B,CAEE,OADAsE,QAAQC,IAAI,8BAADsE,OAA+BsF,IACnC,IAEX,CAAE,MAAO1M,GAEP,OADA6C,QAAQ7C,MAAM,0CAADoH,OAA2CsF,EAAO,KAAK1M,GAC7D,IACT,CACF,C,aGteA,MAuKA,EAvKiC8W,KAC/B,MAAM,eAAE/I,IAAmBxK,EAAAA,EAAAA,MACrB,gBAAE4K,GAAoBL,IACtBiJ,GAAYC,EAAAA,EAAAA,KAAa3T,GAAUA,EAAM4T,cAAcF,YACvDG,GAAUF,EAAAA,EAAAA,KAAa3T,GAAUA,EAAM4T,cAAcC,UACrDlJ,GAAWC,EAAAA,EAAAA,MAEXkJ,GAAqBC,EAAAA,EAAAA,cACzBvR,UACE,IACE,MAAMwR,QAA4BC,EAAAA,EAAAA,IAAwB,CACxDC,cAkCF,GAAIF,EAAoBhE,QAAS,CAO/BrF,GACEwJ,EAAAA,EAAAA,IAAqB,CACnBC,SAAUJ,EAAoBnU,KAAKuU,YAIvC,MAAMC,EAAoBL,EAAoBnU,KAAKuU,SAMzB,IAADE,EAAAC,EAAzB,GALA/U,QAAQC,IAAI,sBAAuB4U,GAEnC1J,GAAS6J,EAAAA,EAAAA,KAAmB,IAGxBR,QACIlJ,EACJuJ,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnCJ,EAAU,UAAE,IAAAI,OAAA,EAAZA,EAAc3R,SACF,QADU4R,EACtBL,EAAU,UAAE,IAAAK,OAAA,EAAZA,EAAcE,WAGpB,MACE/J,EAAegK,EAAAA,GAEnB,CAAE,MAAO/X,GACP6C,QAAQ7C,MAAM,+CAAgDA,GAC9D+N,EAAegK,EAAAA,GACjB,CAAC,QACC/J,GAASgK,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAAChK,EAAUG,IAGP8J,GAAab,EAAAA,EAAAA,cACjBvR,UACEhD,QAAQC,IAAI,iDAAkDyU,GAE9D,IACE,GAAIA,GAAaA,EAAUlV,OAAS,EAAG,CAAC,IAAD6V,EAErC,MAAMJ,EAAyB,QAAfI,EAAGX,EAAU,UAAE,IAAAW,OAAA,EAAZA,EAAcJ,WAWjC,IAVmB,CAIjB,YACA,iBACA,iBACA,UACA,4BAEcpX,SAASoX,GAEvB,YADA/J,EAAeoK,EAAAA,IAGjBnK,GAAS6J,EAAAA,EAAAA,KAAmB,IAE5BhV,QAAQC,IAAI,+DACZkL,GAASgK,EAAAA,EAAAA,KAAW,IACpBI,YAAW,IAAMpK,GAASgK,EAAAA,EAAAA,KAAW,KAAQ,SACvCb,EAAmBI,EAC3B,MACE1U,QAAQoI,KAAK,yCAEjB,CAAE,MAAOjL,GACP6C,QAAQ7C,MAAM,8BAA+BA,GAC7CgO,GAASgK,EAAAA,EAAAA,KAAW,IACpBnV,QAAQC,IACN,8DAEFiL,EAAesK,EAAAA,GACjB,IAWF,CAAClB,EAAoBpJ,IA0BvB,MAAO,CACLuK,yBAxB8BlB,EAAAA,EAAAA,cAAY,KAErCL,EAMHlU,QAAQC,IACN,gFANFD,QAAQC,IACN,0EAEFkL,GAAS6J,EAAAA,EAAAA,KAAmB,KAM9B,MAAMU,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoBR,EAAYjK,EAAUD,GAC1D,GACC,KAEH,MAAO,IAAM6K,cAAcL,EAAS,GACnC,CAACN,EAAYjK,IAIdkJ,UACAe,aACD,E,aC1LH,MA8EA,EA9EwBa,KACtB,MAAM,WAAEb,GAAenB,KACjB,iBAAEiC,EAAgB,eAAEhL,IAAmBxK,EAAAA,EAAAA,MACtC2T,EAASc,IAActU,EAAAA,EAAAA,WAAS,GAEvCb,QAAQC,IAAI,kCAsEZ,OA7DAa,EAAAA,EAAAA,YAAU,KACR,IAAK0J,OAAOC,OAAQ,OAqDpBzK,QAAQmW,MAAM,+DACd3L,OAAOC,OAAO2L,SAAS,aAlDLpT,UAAa,IAADqT,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMhZ,MAAM,MAGhCiZ,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BR,IACvBA,EAAM5Q,MACVqR,GACCA,EAAK/Y,SAAS,uBAAyB+Y,EAAK/Y,SAAS,mBAenDgZ,CAAuBV,KAAWM,EAIpC,YAHAzW,QAAQoI,KACN,kFAOJsO,eAAeI,WAAW,sBAM1B3B,GAAW,GAEX,MACM4B,EADcC,EAAAA,EAAMC,WAEZ7C,cAAc8C,kBAAkBC,mBAE9C,GAAsB,OAAjBJ,QAAiB,IAAjBA,GAAuB,QAANV,EAAjBU,EAAmB1W,YAAI,IAAAgW,GAAO,QAAPC,EAAvBD,EAAyBe,aAAK,IAAAd,IAA9BA,EAAgC9W,OAMnC,OALAQ,QAAQ7C,MACN,6EACA4Z,QAEF5B,GAAW,GAIb,UAIQkC,EAAAA,EAAAA,GAAkBN,EAAkB1W,KAAK+W,MAAOhC,EACxD,CAAE,MAAOjY,GACP6C,QAAQ7C,MAAM,iDAA6CA,GAC3D+N,EAAeoM,EAAAA,GACjB,CAAC,QACCnC,GAAW,GACXe,EAAiBqB,EAAAA,GACnB,IAG4C,GAI7C,IAEIlD,GAAU/Y,EAAAA,EAAAA,KAACkc,EAAAA,EAAM,IAAK,IAAI,E,+EChFnC,MAEaC,EAAgBxc,IAMtB,IANuB,OAC5BsU,EAAS,GAAE,OACXmI,EAAM,aACNC,EAAY,kBACZC,EAAiB,QACjBhM,GACD3Q,EAEC,OADA+E,QAAQC,IAAI,iCAAkCsP,GACnC,OAANA,QAAM,IAANA,GAAAA,EAAQ/P,QAGXlE,EAAAA,EAAAA,KAAAiE,EAAAA,SAAA,CAAA/D,SACG+T,EAAOlT,KAAKiJ,IACX1J,EAAAA,EAAAA,MAAA,QAEEiD,MAAO,CACLgZ,YAAa,MACbC,QAAS,cACTC,WAAY,SACZC,MAAO1S,EAAM0S,OAAS,QACtBC,WAAY,QACZzc,SAAA,CAED8J,EAAM6I,UACU,UAAhB7I,EAAM0S,OAAqB,SACX,QAAhB1S,EAAM0S,QAAoBpM,EAAU,aAAe,cACnD+L,GAAyC,YAAzBrS,EAAM+I,iBACrB/S,EAAAA,EAAAA,KAAC4c,EAAAA,IAAc,CACbpc,KAAM,GACN+C,MAAO,CAAEsZ,OAAQ,UAAWH,MAAO,MAAOI,WAAY,OACtD3b,QAASA,IAAMmb,EAAkBF,EAAQpS,EAAM8I,aAhB9C9I,EAAM8I,aANS,KA2BvB,EAiCMiK,EAAeA,CAACC,EAAW1W,EAAM+R,KAG5C,GAFA3T,QAAQC,IAAI,qBAAqB0T,IAE5B2E,EAAW,MAAO,GAGvB,IAAIC,EAAaD,EAAUjc,KAAKgE,GACjB,kBAATuB,EACK,CACL4W,UAAc,OAAJnY,QAAI,IAAJA,OAAI,EAAJA,EAAMsO,YAAa,MAC7B8J,OAAW,OAAJpY,QAAI,IAAJA,OAAI,EAAJA,EAAMmO,aAAc,GAC3BpC,QAAY,OAAJ/L,QAAI,IAAJA,OAAI,EAAJA,EAAM+L,SAAU,QAG1BpM,QAAQC,IAAI,0BAA8B,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMqY,SAAU/E,EAAOpT,QAAS,OAE/D,CACLkY,OAAW,OAAJpY,QAAI,IAAJA,OAAI,EAAJA,EAAM3E,QAAS,UAyB5B,MAPa,kBAATkG,EACF2W,EAAWra,MAAK,CAACC,EAAGC,IAAMD,EAAEqa,SAASG,cAAcva,EAAEoa,YAErDD,EAAWra,MAAK,CAACC,EAAGC,IAAMD,EAAEsa,MAAME,cAAcva,EAAEqa,SAI7CF,CAAU,EA8DNK,EAAgB,CAC3B,CAAE9V,YAAa,kBAAmB+V,OAAQ,oBAqErC,MCnPDC,EAAuBA,CAACzY,EAAM+G,KAClCpH,QAAQC,IAAI,mCAAoCI,GAChDL,QAAQC,IAAI,qCAAsCmH,GAElD,MAAM2R,EAAa1Y,EAChBhE,KAAK+E,IACJ,MAAM4X,EAAY5X,EAAK1F,MAAMkU,QAAQ,OAAQ,IAAIA,QAAQ,SAAU,IAE7DqJ,EAAe7R,EAAUzC,MAAMW,GAChBA,EAAM5J,MACtBkU,QAAQ,OAAQ,IAChBA,QAAQ,SAAU,IACH2B,gBAAkByH,EAAUzH,gBAGhD,OAAO0H,EAAeA,EAAaxX,GAAK,IAAI,IAE7C4D,QAAQ5D,GAAc,OAAPA,IAIlB,OADAzB,QAAQC,IAAI,8BAA+B8Y,GACpCA,CAAU,EAGNG,EAAmBlW,MAC9BoE,EACA+R,EACAC,EACAxX,KAEA5B,QAAQC,IAAI,YAAamH,GACzBpH,QAAQC,IAAI,gBAAiBkZ,GAC7B,MAAME,EAAeP,EAAqBK,EAAe/R,GAGzD,GAAIiS,EAAa7Z,OAAS,EAAG,CAC3B,IAAI8Z,EACF,iGAEEC,EAAe,CACjB9X,GAAI2X,EACJxX,KAAMA,EACNwH,QAASiQ,GAEX,MAAMG,QAA2B/V,EAAAA,EAAAA,IAC9B,OACD6V,EACAC,GAGFvZ,QAAQC,IAAI,sBAAuBsJ,KAAKC,UAAUgQ,GACpD,G,gCCxCF,MA8LA,EA9LkCve,IAe3B,IAf4B,WACjCwe,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZvZ,EAAM,MACNC,EAAK,KACLoB,EAAI,QACJgK,EAAO,OACP+H,EAAM,WACNoG,EAAU,SACVC,EAAQ,cACRC,GACDhf,EACC,MAAM,iBAAEwF,EAAgB,iBAAEyV,IAAqBxV,EAAAA,EAAAA,KACzCwZ,EAAkBC,GACE,aAAjBA,GAAgD,gBAAjBA,GAAmD,cAAjBA,GAEnEC,EAAeC,IAAoBxZ,EAAAA,EAAAA,WAAS,GAC7CyZ,GAAoBC,EAAAA,EAAAA,UA6B1Bva,QAAQC,IAAI,uBAAwB4Z,GAmCpC,OACEje,EAAAA,EAAAA,MAAA2D,EAAAA,SAAA,CAAA/D,SAAA,EACEI,EAAAA,EAAAA,MAAA,OAAKP,UAAU,sBAAqBG,SAAA,EAChCoQ,IACAtQ,EAAAA,EAAAA,KAAA,UACED,UAAU,qCACVoB,QAASA,KACHyd,EAAe1Z,GACjBC,EAAiB+Z,EAAAA,IAIN,kBAAT5Y,GAEOrB,EADT8Z,GAAiB,GAIjB5Z,EADmB,aAAVD,EACQia,EAAAA,GAEAC,EAAAA,GACnB,EACAlf,SACH,cAIFoQ,IACCtQ,EAAAA,EAAAA,KAAA,UACED,UAAU,qCACVoB,QAASA,KACO,aAAV+D,GAAkC,gBAAVA,GAAqC,cAAVA,EACrDC,EAAiB+Z,EAAAA,IAEjBH,GAAiB,EACnB,EACA7e,SACH,sBAKO,kBAAToG,IACCtG,EAAAA,EAAAA,KAAA,UACED,UAAU,qCACVoB,QA1Gcke,KAClBT,EAAe1Z,GACjBC,EAAiB+Z,EAAAA,IAIfb,IAAoB,kBAAT/X,GAA4BrB,GACzCoZ,IAEAlZ,EADmB,aAAVD,EACQoa,EAAAA,GAEAC,EAAAA,GACnB,EA8FiCrf,SAC1B,UAIS,IAAZoQ,IACAtQ,EAAAA,EAAAA,KAAA,UACED,UAAU,oCACVoB,QAjGaqe,KACfZ,EAAe1Z,GACjBC,EAAiB+Z,EAAAA,IAGfZ,GACFA,GACF,EA0F4Bpe,SACvB,WAKJue,IACCze,EAAAA,EAAAA,KAAA,UACED,UAAU,uCACVoB,QAASud,EAASxe,SACnB,eAQDF,EAAAA,EAAAA,KAACsB,EAAAA,EAAW,CACVxB,KAAMgf,EACN3e,OAAQA,IAAM4e,GAAiB,GAC/B3e,MAAM,kBACNC,cAAe,CACb,CACEe,MAAO,MACPxB,QAAS,UACTuB,QAASA,KAAO,IAADse,EACY,QAAzBA,EAAAT,EAAkBU,eAAO,IAAAD,GAAzBA,EAA2Bha,WAC3BsZ,GAAiB,EAAM,GAG3B,CACE3d,MAAO,QACPxB,QAAS,SACTuB,QAASA,IAAM4d,GAAiB,KAElC7e,UAEFF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAYG,UACzBF,EAAAA,EAAAA,KAAC2f,EAAAA,EAAc,CACb7a,IAAKka,EACLja,KAAMwZ,EACN/b,QAASgc,EACTvZ,OAAQA,EACRD,UAjIUD,IAElB,GADAL,QAAQC,IAAII,GACC,kBAATuB,EACEvB,EAAKb,OAAS,IAChBia,EAAWpZ,GACXqZ,EAAWrZ,GACP4Z,GAAeA,GAAc,SAGnC,GAAI5Z,EAAKb,OAAS,EAAG,CACnB,MAAM0b,EAAW7a,EAAKhE,KAAKX,IAAK,CAC9BA,MAAOA,EACPyf,IAAK,IACLC,OAAQ,UACR,aAAc,MACd,aAAc,MACd1C,OAAQ/E,EAAOpT,OACf,gBAAiBoT,EAAO0H,SACxB,kBAAmB,MACnB,aAAc,SACd,aAAc,MACd,aAAc,QACdC,KAAM,MACN,aAAc,OAEhB7B,EAAWyB,GAEXxB,EAAWrZ,GACP4Z,GAAeA,GAAc,EACnC,CACF,EAoGQzZ,MAAOA,UAIZ,E,wCC/LP,MAuEA,EAvE6BvF,IAOtB,IAPuB,sBAC5BsgB,EAAqB,aACrBC,EAAY,oBACZC,EAAmB,aACnBC,EAAY,uBACZC,EAAsB,YACtBC,GACD3gB,EACC,MAAM,WAAEma,GAAenB,KACjB,cAAE4H,IAAkBC,EAAAA,EAAAA,KAyC1B,OACExgB,EAAAA,EAAAA,KAAAiE,EAAAA,SAAA,CAAA/D,UACEI,EAAAA,EAAAA,MAAA,OAAKP,UAAU,2BAA0BG,SAAA,EACvCF,EAAAA,EAAAA,KAACygB,EAAAA,EAAK,CACJld,MAAO,CAAEK,MAAO,OAAQS,OAAQ,QAChCqc,IAAI,+DACJC,IAAI,eACJ5gB,UAAU,iBAEZC,EAAAA,EAAAA,KAAA,QAAMD,UAAU,qBAAoBG,SAAC,mBACrCI,EAAAA,EAAAA,MAAA,OAAKP,UAAU,oBAAmBG,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAID,UAAU,aACdC,EAAAA,EAAAA,KAAA,QAAMD,UAAU,eAAcG,SAAC,QAC/BF,EAAAA,EAAAA,KAAA,MAAID,UAAU,gBAEhBC,EAAAA,EAAAA,KAAC4gB,EAAAA,EAAW,CAACC,SArDGC,IAmCpBP,EAAcO,EAlCK,CACjB1gB,MAAO,SACP2gB,KAAM,GACNhT,KAAM,UACNiT,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAC3B9c,QAAQC,IAAI,oBAAqB6c,GACjC9c,QAAQC,IAAI,kCAAmC6c,EAAgB,GAAGrb,IAEhEqb,GACAA,EAAgBtd,OAAS,GACzBsd,EAAgB,GAAGrb,GAEnB2T,EAAW,CACT,CACEjS,SAAU2Z,EAAgB,GAAGrb,GAC7BwT,WAAY6H,EAAgB,GAAG,sBAInC9c,QAAQoI,KAAK,wCACf,GAGwD,QAoBvD,E,oCCnEP,MAgFa2U,EAAyB/Z,UACpC,MAKMiB,QAtFUjB,eAChBc,GAII,IAHJsG,EAAIF,UAAA1K,OAAA,QAAA2K,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACPnG,EAAMmG,UAAA1K,OAAA,QAAA2K,IAAAD,UAAA,GAAAA,UAAA,GAAG,MAGTlK,QAAQC,IAAI,gBAAiB6D,GAC7B9D,QAAQC,IAAI,cACZD,QAAQC,IAAI,gBAAiBsJ,KAAKC,UAAUY,EAAM,KAAM,IAExD,IACE,MAAMnG,QAAiBoG,EAAAA,EAAAA,GAAM,CAC3BvG,MACAC,SACAb,QAAS,CACP,eAAgB,oBAElB7C,KAAM+J,IAIR,OADApK,QAAQC,IAAI,qBAAsBgE,EAAS5D,MACpC4D,EAAS5D,IAClB,CAAE,MAAOlD,GAEP,MADA6C,QAAQ7C,MAAM,kBAAmBA,GAC3BA,CACR,CACF,CA4DyBsG,CAJrB,+EAMA2G,EACA,QAGF,OADApK,QAAQC,IAAI,6BAA8BsJ,KAAKC,UAAUvF,IAClDA,CAAQ,EA0IJ+Y,EAAyBha,MACpCia,EACAC,EACAC,KAEA,IAEE,MAAMC,QAAyB9S,IACzB+S,GAASjM,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACbgM,GAEL,IAAIE,EAAc9S,OAAOC,OAAOC,SAAS,eACzC1K,QAAQC,IAAI,0BAA2Bqd,GACvC,MAAMC,EAAmBD,EAAY9f,MAAM,KAC3CwC,QAAQC,IAAI,mBAAoBsd,GAChC,MAAMC,EAAcD,EAAiB,GACrCvd,QAAQC,IAAI,gBAAiBud,GAC7B,MAAMhZ,EAAc+Y,EAAiB,GAErCvd,QAAQC,IAAI,gBAAiBuE,GAE7B,MAAMiZ,QAAsB1a,EAAa,CAACyB,GAAc6Y,GACxDrd,QAAQC,IAAI,yBAA0Bwd,GAEtC,MAAMC,OAnO+B1a,OACvC2a,EACAF,EACAD,EACAhZ,KAEA,MAAM4S,EAAQ,GACRwG,EAAoB,IAAIC,IAE9B,IAAK,IAAIze,EAAI,EAAGA,EAAIue,EAAUne,OAAQJ,IAAK,CACzC,MAAMuC,EAAMgc,EAAUve,GACtB,GAAIuC,EAAInC,QAAU,GAAKmC,EAAI,IAAMA,EAAI,GAAI,CACvC,MAAMmc,EAAWnc,EAAI,GAAGoc,WAAW1N,OAC7B2N,EAAarc,EAAI,GAAGoc,WAAWlgB,SAAS,KAC1C8D,EAAI,GACDoc,WACAvgB,MAAM,KACNnB,KAAK6R,GAAMA,EAAEmC,SAChB,CAAC1O,EAAI,GAAGoc,WAAW1N,QACvB+G,EAAMrZ,KAAK,CACT8K,KAAMiV,EACNvO,OAAQyO,IAEVA,EAAW1b,SAASgD,GAAUsY,EAAkBK,IAAI3Y,IACtD,CACF,CAEA,MAAM4Y,EAAe,GAcrB,OAbAN,EAAkBtb,SAAS6b,IACzB,MAAMlF,EAAewE,EAAc9Y,MAAMW,GACfA,EAAM5J,MAAMkU,QAAQ,YAAa,MAC9BuO,GAAc7Y,EAAM5J,QAAUyiB,IAEvDlF,GACFiF,EAAangB,KAAK,CAChBoQ,UAAW8K,EAAavd,MAAMkU,QAAQ,YAAa,IACnDxB,QAAS6K,EAAaxX,IAE1B,IAGK,CACLoF,QAAS,iBACTuX,eAAgBZ,EAChBa,cAAe7Z,EACf8Z,QAAS,WACTC,MAAOnH,EACPoH,aAAcN,EACf,EAmLmCO,CAChCxB,EACAQ,EACAD,EACAhZ,GAEFxE,QAAQC,IACN,yDACAsJ,KAAKC,UAAUkU,EAAqB,KAAM,IAI5C,MAAMzZ,QAAiB8Y,EACrBW,GAEF1d,QAAQC,IAAI,0DAA2DgE,GAGvE,MAAM1D,EAAiB,OAAR0D,QAAQ,IAARA,OAAQ,EAARA,EAAU1D,OAEzB2c,GACAthB,EAAAA,EAAAA,MAAA,OAAKiD,MAAO,CAAEiZ,QAAS,OAAQC,WAAY,UAAWvc,SAAA,EACtDI,EAAAA,EAAAA,MAAA,QAAAJ,SAAA,CAAM,iDACyCF,EAAAA,EAAAA,KAAA,UAAAE,SAAS+E,QAExDjF,EAAAA,EAAAA,KAAA,UACEmB,QAAUiiB,IACRA,EAAMC,kBACNC,UAAUC,UAAUC,UAAUve,EAAO,EAEvC1B,MAAO,CACLkgB,WAAY,OACZC,OAAQ,OACR7G,OAAQ,UACRC,WAAY,MACZJ,MAAO,QAETtc,MAAM,eAAcF,UAEpBF,EAAAA,EAAAA,KAAC2jB,EAAAA,IAAS,CAACnjB,KAAM,UAKrB,CAAE,MAAOqB,GACP6C,QAAQ7C,MAAM,mCAAoCA,GAClDggB,EAA2B,uDAC7B,G,wBC46BF,EAtqCwB+B,KACtB,MAAM,6BAAEhC,EAA4B,2BAAEC,IACpCgC,EAAAA,EAAAA,MACKC,EAAmBC,IAAwBxe,EAAAA,EAAAA,WAAS,IACpDye,EAAqBC,IAA0B1e,EAAAA,EAAAA,WAAS,IACxD2e,EAAeC,IAAoB5e,EAAAA,EAAAA,WAAS,IAC5Coc,EAAeyC,IAAoB7e,EAAAA,EAAAA,UAAS,OAC5C8e,EAAiBC,IAAsB/e,EAAAA,EAAAA,WAAS,IAChDgf,EAAkBC,IAAuBjf,EAAAA,EAAAA,UAAS,KACnD,wBAAE4U,EAAuB,QAAEpB,GAAYJ,KACtC8L,EAAUC,IAAenf,EAAAA,EAAAA,UAAS,IAClCyX,EAAW2H,IAAgBpf,EAAAA,EAAAA,UAAS,KACpCqf,EAAeC,IAAoBtf,EAAAA,EAAAA,UAAS,KAC5Cuf,EAAeC,IAAoBxf,EAAAA,EAAAA,UAAS,OAC5Cyf,GAAYC,KAAiB1f,EAAAA,EAAAA,UAAS,KACtC2f,GAAoBC,KAAyB5f,EAAAA,EAAAA,UAAS,KACtD4a,GAAqBiF,KAA0B7f,EAAAA,EAAAA,WAAS,IACxD8a,GAAwBgF,KAA6B9f,EAAAA,EAAAA,WAAS,IAC/D,WAAEuU,IAAenB,KAGhB2M,GAAgBC,KAAqBhgB,EAAAA,EAAAA,WAAS,IAC9CigB,GAAcC,KAAmBlgB,EAAAA,EAAAA,WAAS,IAC1CmgB,GAAqBC,KAA0BpgB,EAAAA,EAAAA,WAAS,IACxD8W,GAAcuJ,KAAmBrgB,EAAAA,EAAAA,WAAS,GAC3CsK,IAAWC,EAAAA,EAAAA,OACX,iBAAE8K,GAAgB,eAAEhL,KAAmBxK,EAAAA,EAAAA,MACtCygB,GAAkBC,KAAuBvgB,EAAAA,EAAAA,UAAS,KAClDkZ,GAAYE,KAAiBpZ,EAAAA,EAAAA,WAAS,GAC7C,IAAI0J,GAAmBC,OAAOC,OAAOC,SAAS,eAC9C1K,QAAQC,IAAI,wBAAyBsK,IAErC,MAAMiR,IAAejB,EAAAA,EAAAA,QAAO,MAsKtB8G,GAAkBre,UAAa,IAADse,EAAAC,EAClC,MAAMnE,QAAyB9S,IACzB+S,GAASjM,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACbgM,GAGLpd,QAAQC,IAAI,qCAEZ,MAAMuhB,EAAiBC,GAAkBplB,KAAKsF,GAAQA,EAAI8W,QACpDU,EAAgBqI,EAAenlB,KAAKX,IAAK,CAAQA,YAEjDgmB,EAAmBpJ,EAAUjT,QAChC1D,IAAS6f,EAAe3jB,SAAS8D,EAAI8W,SAGpCiJ,IACFzB,EAAayB,GACb1B,GAAa2B,GAAYA,EAAU,KAGrCpB,IAAeqB,GAAqB,IAC/BA,KACAzI,KAGL+D,EAA6B,gCAE7B,MAAM2E,EAA+C,IAA5BH,EAAiBliB,OAGxC,GAFFQ,QAAQC,IAAI,mBAAoB4hB,GAChC7hB,QAAQC,IAAI,iBAAkBoN,IACxBwU,IAAqBxU,GAAY,CAAC,IAADyU,EAAAC,OCjSnB/e,OAAOE,EAAStB,EAAMuB,KAC5C,IACE,MAAMC,EAAkBC,4DACxBrD,QAAQC,IAAI,gCAAiCiD,GAC7C,MAAMK,QAAgBC,EAAAA,EAAAA,MAEhBwe,EAAmBhf,SAChB,IAAIU,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRb,UACAtB,KAAM,OACNoC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAClCN,EAAQM,EAAS,EAEnBC,UAAY/G,IACV6C,QAAQ7C,MAAM,kBAAmBA,GACjCyG,EAAOzG,EAAM,GAEf,IAMJ,IAAK,IAADiH,EAAAC,EACF,MAAMC,EAAc,GAAAC,OAAMnB,EAAe,gFAGnCqB,EAAsC,QAA7BL,SADmB4d,EAAiB1d,IACbI,cAAM,IAAAN,GAE3C,QAF2CC,EAA1BD,EAA4BO,MAC3CvD,GAAwB,qBAAfA,EAAK1F,eAChB,IAAA2I,OAF2C,EAA1BA,EAEf5C,GAIH,GAFAzB,QAAQC,IAAI,qCAAsCwE,GAE9CA,EAAW,CAAC,IAADwd,EAAAC,EAAAC,EACX,MAAMvd,EAAc,GAAAL,OAAMnB,EAAe,8CAAAmB,OAA6CE,EAAS,8CAIzF2d,EAAsC,QAA1BH,SAFUD,EAAiBpd,IAEVF,OAAO,UAAE,IAAAud,GAAc,QAAdC,EAAvBD,EAAyBhd,oBAAY,IAAAid,GAAQ,QAARC,EAArCD,EAAuCxd,cAAM,IAAAyd,OAAtB,EAAvBA,EAA+Cxd,MAAK2M,GAAyB,aAAhBA,EAAM5V,QAClF2mB,EAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAc3gB,GAC9B,GAAI4gB,EAAS,CACT,MAAMnZ,EACJ,+FAEIqQ,EAAe,CACnB9X,GAAI0B,EACJvB,KAAMA,EACNwH,QAAS,CAACiZ,GACVhZ,KAAM,kBAGRrJ,QAAQC,IAAI,qBAAsBsZ,GAElC,IACE,MAAMjQ,QAAyB7F,EAAAA,EAAAA,IAC7B,OACAyF,EACAqQ,GAGFvZ,QAAQC,IAAI,qBAAsBsJ,KAAKC,UAAUF,GACnD,CAAE,MAAOnM,GACP6C,QAAQ7C,MAAM,8BAA+BA,EAC/C,CACF,CACN,CACF,CAAE,MAAOA,GAEP,MADA6C,QAAQ7C,MAAM,0BAA2BA,GACnCA,CACR,CACJ,CAAE,MAAOA,GAEP,MADA6C,QAAQ7C,MAAM,sCAAuCA,GAC/CA,CACR,GDsNkCmlB,CAASjF,EAAWzb,GAA0C,QAAtCkgB,EAAE5K,GAAkBC,0BAAkB,IAAA2K,GAAM,QAANC,EAApCD,EAAsCzhB,YAAI,IAAA0hB,OAAN,EAApCA,EAA4C3K,MAAM,GAAGjU,UAC1GgI,IAAS0F,EAAAA,EAAAA,KAAkBO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACzB4F,EAAAA,EAAMC,WAAW7C,cAAcmO,iBAAe,IACjDlV,YAAY,KAEhB,OAGI6L,EACJ9R,GACA+R,EACoC,QADvBmI,EACbpK,GAAkBC,0BAAkB,IAAAmK,GAAM,QAANC,EAApCD,EAAsCjhB,YAAI,IAAAkhB,OAAN,EAApCA,EAA4CnK,MAAM,GAAGjU,SACrDvB,GACD,EAMGgW,IAAoBrD,EAAAA,EAAAA,cACxB,CAACmD,EAAQ8K,KACP/B,IAAuBnI,GACrBA,EAAUjc,KAAK+E,GACbA,EAAKgL,SAAWsL,GAAMtG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEbhQ,GAAI,IACPoN,WAAYpN,EAAKoN,WAAWnS,KAAKiJ,GAC/BA,EAAM8I,UAAYoU,GAAOpR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEhB9L,GAAK,IACR0S,MAAuB,QAAhB1S,EAAM0S,MAAkB,QAAU,QAE3C1S,MAGRlE,MAGR6Y,IAAc,EAAK,GAErB,CAACwG,KA0KGgC,GAAoBnK,IACxB,MAAM7H,EAAY6H,EAAUjc,KAAKsF,IAAG,CAClCmc,SAAUnc,EAAI6W,SACd3K,UAAWlM,EAAI8W,UAGjB,OADAzY,QAAQC,IAAI,wBAAyBwQ,GAC9BA,CAAS,EAGlBzQ,QAAQC,IAAI,2BAA4BqY,GACxC,MAAMmJ,IAAoBtN,EAAAA,EAAAA,KACvB3T,GAAUA,EAAM4T,cAAcqN,qBAInC3gB,EAAAA,EAAAA,YAAU,KACJ2gB,GAAkBjiB,OAAS,GAC7Bya,IAAc,EAChB,GACC,CAACwH,KAGF,MAAMvK,IAAoB/C,EAAAA,EAAAA,KACvB3T,GAAUA,EAAM4T,cAAc8C,oBAEjClX,QAAQC,IAAI,oBAAqBiX,IAIjC,MAAMwL,IAAgBvO,EAAAA,EAAAA,KACnB3T,GAAUA,EAAM4T,cAAcuO,oBAAoBD,gBAErD1iB,QAAQC,IAAI,2BAA4ByiB,IAExC,MAAME,IAAczO,EAAAA,EAAAA,KACjB3T,GAAUA,EAAM4T,cAAcuO,oBAAoBE,cAErD7iB,QAAQC,IAAI,0BAA2B2iB,IACvC,MAAMvF,IAAYlJ,EAAAA,EAAAA,KACf3T,GAAUA,EAAM4T,cAAcuO,oBAAoBG,YAErD9iB,QAAQC,IAAI,yBAA0Bod,IAEtC,MAAMzR,IAAUuI,EAAAA,EAAAA,KACb3T,GAAUA,EAAM4T,cAAcuO,oBAAoBI,YAErD/iB,QAAQC,IAAI,oBAAqB2L,IACjC,MAAMoX,IAAuB7O,EAAAA,EAAAA,KAC1B3T,GAAUA,EAAM4T,cAAc4O,uBAEjChjB,QAAQC,IAAI,yBAA0B+iB,IACtC,MAAM7W,IAAkBgI,EAAAA,EAAAA,KACrB3T,GAAUA,EAAM4T,cAAcmO,gBAAgBpW,kBAEjDnM,QAAQC,IAAI,wBAAyBkM,IAErC,MAAM+H,IAAYC,EAAAA,EAAAA,KAAa3T,GAAUA,EAAM4T,cAAcF,YAEvD9M,IAAY+M,EAAAA,EAAAA,KACf3T,GAAUA,EAAM4T,cAAcmO,gBAAgBnb,YAEjDpH,QAAQC,IAAI,wCAAyCmH,IAMrD,MAAM6b,IAAc9O,EAAAA,EAAAA,KACjB3T,GAAUA,EAAM4T,cAAcmO,gBAAgB5R,eAEjD3Q,QAAQC,IAAI,oCAAqCgjB,IAEjD,MAAMC,IAAe/O,EAAAA,EAAAA,KAClB3T,GAAUA,EAAM4T,cAAcmO,gBAAgB7R,wBAEjD1Q,QAAQC,IAAI,2BAA4BijB,IAExC,MAAM7V,IAAa8G,EAAAA,EAAAA,KAChB3T,GAAUA,EAAM4T,cAAcmO,gBAAgBlV,aAGjDrN,QAAQC,IAAI,qBAAsBoN,IAElC,MAAMsG,IAASQ,EAAAA,EAAAA,KACZ3T,GAAUA,EAAM4T,cAAcmO,gBAAgB5O,SAEjD3T,QAAQC,IAAI,qBAAsB0T,IAElC,MAAMwP,IAAkBhP,EAAAA,EAAAA,KACrB3T,GAAUA,EAAM4T,cAAcmO,gBAAgBY,kBAEjDnjB,QAAQC,IAAI,uCAAwCkjB,IACpD,MAAM5iB,IAAS4T,EAAAA,EAAAA,KACZ3T,GAAUA,EAAM4T,cAAcmO,gBAAgBhiB,SAEjDP,QAAQC,IAAI,6BAA8BM,IAE1C,MAAM2C,IAAUiR,EAAAA,EAAAA,KACb3T,GAAUA,EAAM4T,cAAcmO,gBAAgBrf,UAEjDlD,QAAQC,IAAI,mCAAoCiD,IAEhD,MAAMkgB,IAAiB7O,EAAAA,EAAAA,cAAY,KACjC,IAAInN,EAAYwb,GAAYvmB,KAAK+E,GAC/BA,EAAK1F,MAAMkU,QAAQ,UAAW,MAGhC,MAAMyT,EACyB,IAA7B5B,GAAkBjiB,OAAe8Y,EAAYmJ,GAE/C,IAAI6B,EAAsB,IACrB,IAAIzF,IACLwF,EAAW3R,SAAStQ,IAAI,IAAAmiB,EAAA,OAAe,QAAVA,EAAAniB,EAAKqX,aAAK,IAAA8K,OAAA,EAAVA,EAAYlnB,KAAK6R,GAAMA,EAAEC,cAAc,EAAE,MAItEqV,EAAoBpc,EACrB/B,QAAQC,IAAWge,EAAoBzlB,SAASyH,KAChDjJ,KAAKiJ,IAAK,CAAQ5J,MAAO4J,MAK5B,OAHAtF,QAAQC,IAAI,4BAA6BujB,GAGlCpc,EAAU/K,KAAKiJ,IAAK,CAAQ5J,MAAO4J,KAAS,GAClD,CAACsd,GAAatK,EAAWmJ,GAAmB7V,KAGzC6X,GAAmBC,IACvBzD,EAAayD,EAAY,EAU3B,GAPA1jB,QAAQC,IAAI,kBAAmBqY,IAE/BxX,EAAAA,EAAAA,YAAU,KACJwX,EAAU9Y,QAAU,GACtBwgB,GAAa2B,GAAYA,EAAU,GACrC,GACC,CAACrJ,IACApB,GAAkBtC,UAAYsC,GAAkBC,mBAAqB,IAADwM,GAAAC,GAClEpjB,GAAQ0W,GAAkBtC,SAAS,kBACnCiP,GAAU3M,GAAkBtC,SAAkB,QAC9ChT,GAA2C,QAAvC+hB,GAAGzM,GAAkBC,0BAAkB,IAAAwM,IAAM,QAANC,GAApCD,GAAsCtjB,YAAI,IAAAujB,QAAN,EAApCA,GAA4CxM,MAAM,GAAGnC,WAGlE,MAAO6O,GAA2BC,KAChCljB,EAAAA,EAAAA,UAASqiB,IACXljB,QAAQC,IACN,0CACA6jB,KAEFhjB,EAAAA,EAAAA,YAAU,KACRijB,GAA6Bb,IAChB,kBAATthB,GACF6e,GAAsBiC,IAEtBvC,EAAiB+C,GACnB,GACC,CAACA,GAActhB,GAAM8gB,MAExB5hB,EAAAA,EAAAA,YAAU,KACK,kBAATc,IACF2e,GAAc6C,KAChB,GACC,CAACA,GAAgBxhB,MAoBpBd,EAAAA,EAAAA,YAAU,KACK,kBAATc,IACF2e,GAAc0C,GAChB,GACC,CAACA,GAAarhB,KACjB,MAAM+X,GAAS3W,UAAsB,IAADghB,EAAAC,EAClC,IAAIC,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BnkB,QAAQC,IAAI,aAAcqY,GAC1BtY,QAAQC,IAAI,oCAAqC6jB,IACjD,IAAIM,EAAa,GAEbC,EAAyBP,GAA0BznB,KAAKioB,IAC1D,IAAIC,GAAYnT,EAAAA,EAAAA,GAAA,GAAQkT,GAsCxB,OApCAhM,EAAUhW,SAASkiB,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAM7W,EAAY2W,EAAU/L,MAAM7I,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGI+U,EAEL,QAFYF,EAAGrd,GAAUzC,MACvBigB,GAAcA,EAAUlpB,QAAU8oB,EAAU/L,eAC9C,IAAAgM,OAAA,EAFeA,EAEbhjB,GAEH,GAAI8iB,EAAa7oB,QAAU8oB,EAAU/L,MAAO,EACxB8L,EAAaM,KAAO,OAAS,SAG7BL,EAAUlJ,OACtB,MAAMwJ,KAAKjX,IACbqW,EAAa,OAAD3f,OAAQsJ,IAAkC,SAAnB2W,EAAUlJ,KAC7CoJ,EAASK,SAAQ,OAAAxgB,OAAUsJ,GAC3B6W,EAASM,UAA+B,SAAnBR,EAAUlJ,OAE/B4I,EAAa,GAAD3f,OAAIsJ,EAAS,SAA6B,SAAnB2W,EAAUlJ,KAC7CoJ,EAASK,SAAQ,GAAAxgB,OAAMsJ,EAAS,QAChC6W,EAASM,UAA+B,SAAnBR,EAAUlJ,MAEjCiJ,EAAaM,KAA0B,SAAnBL,EAAUlJ,KAC9BoJ,GAAQtT,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHsT,GAAQ,IACXjjB,GAAIkjB,EACJjpB,MAAO8oB,EAAU/L,MACjBwM,KAAM,WAERb,EAAWrmB,KAAK2mB,GAEpB,KAEKH,CAAY,IAIrBjM,EAAUhW,SAASkiB,IAKjB,IAJqBV,GAA0Bnf,MAC5CugB,GAAiBA,EAAaxpB,QAAU8oB,EAAU/L,QAGlC,CAAC,IAAD0M,EACjB,MAAMtX,EAAY2W,EAAU/L,MAAM7I,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEI+U,EAEL,QAFYQ,EAAG/d,GAAUzC,MACvBigB,GAAcA,EAAUlpB,QAAU8oB,EAAU/L,eAC9C,IAAA0M,OAAA,EAFeA,EAEb1jB,GAEH,GAAIkjB,EAAS,CACX,IAAIS,EAAc,CAAE3jB,GAAIkjB,EAASjpB,MAAO8oB,EAAU/L,OAC9CiM,EAAW,CAAC,EAChBP,EAAsBpmB,KAAK4mB,GAEJ,SAAnBH,EAAUlJ,MACR,MAAMwJ,KAAKjX,IACbqW,EAAa,OAAD3f,OAAQsJ,KAAe,EACnC6W,EAASK,SAAQ,OAAAxgB,OAAUsJ,KAE3BqW,EAAa,GAAD3f,OAAIsJ,EAAS,UAAU,EACnC6W,EAASK,SAAQ,GAAAxgB,OAAMsJ,EAAS,SAElCuX,EAAYP,MAAO,EACnBH,EAASM,WAAY,IAErBI,EAAYP,MAAO,EACnBH,EAASM,WAAY,GAGvBX,EAAuBtmB,KAAKqnB,GAC5BV,GAAQtT,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHsT,GAAQ,IACXjjB,GAAIkjB,EACJjpB,MAAO8oB,EAAU/L,MACjBwM,KAAM,QAERb,EAAWrmB,KAAK2mB,EAClB,CACF,KAGF,IAAIrL,EAAe,GACnByK,GAA0BxhB,SAAS4iB,IAIjC,IAH0B5M,EAAU/S,MACjCif,GAAcA,EAAU/L,QAAUyM,EAAaxpB,QAE5B,CAAC,IAAD2pB,EACpB,MAAMV,EAEL,QAFYU,EAAGje,GAAUzC,MACvB+D,GAAcA,EAAUhN,QAAUwpB,EAAaxpB,eACjD,IAAA2pB,OAAA,EAFeA,EAEb5jB,GACCkjB,GACFtL,EAAatb,KAAK4mB,EAEtB,KAGFN,EAAyBA,EAAuBhf,QAC7CqD,IAAe2Q,EAAaxb,SAAS6K,EAAUjH,MAGlDzB,QAAQC,IAAI,qCAAsCoZ,GAIlDrZ,QAAQC,IAAI,mCAAoCokB,GAChDrkB,QAAQC,IAAI,4BAA6BkkB,GACzCnkB,QAAQC,IAAI,iBAAkBikB,GAC9BlkB,QAAQC,MAGR,MAAM+G,OJnnBchE,OACtBkhB,EACAC,EACA1U,EACAvM,EACAkW,EACAkM,EACAC,EACA3jB,EACAyX,EACA+K,EACAjY,KAEA,IACE,MAAM/I,EAAkBC,4DACxBrD,QAAQC,IAAI,+CACZD,QAAQC,IAAI,2BAA4B2B,GACxC5B,QAAQC,IAAI,8BAA+BmkB,GAC3CpkB,QAAQC,IAAI,2BAA4BkM,GACxC,MACM5I,QAAgBC,EAAAA,EAAAA,MAChBgiB,EAAgBxiB,MAAOc,EAAKsG,EAAMrG,KACtC/D,QAAQC,IAAI,gBAAiB6D,GAC7B9D,QAAQC,IAAI,gBAAiBsJ,KAAKC,UAAUY,EAAM,KAAM,IAEjD,IAAI1G,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,SACAb,SAAOkO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlO,GAAO,IACV,eAAgB,qBAElB7C,KAAMkJ,KAAKC,UAAUY,GACrBxI,KAAM,OACNoC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAClCN,EAAQM,EAAS,EAEnBC,UAAY/G,IACV6C,QAAQ7C,MAAM,kBAAmBA,GACjCyG,EAAOzG,EAAM,GAEf,KAON,IAAIsoB,EAAsBF,EAAclgB,QAAQqgB,IAE9C,GADA1lB,QAAQC,IAAI,wBAAyBylB,GACC,aAAlCA,EAAUllB,MAAM+Q,cAA8B,CAChDvR,QAAQC,IAAI,sBAAuBylB,GACnC,MAAMrZ,EAASF,EAAgBxH,MAC5B0H,GACCA,EAAOnG,aAAewf,EAAUjkB,IACA,WAAhC4K,EAAOkH,OAAOhC,gBAGlB,OADAvR,QAAQC,IAAI,iCAAkCoM,IACtCA,CACV,CAEA,OADArM,QAAQC,IAAI,qCAAsCylB,EAAUllB,QACrD,CAAK,IAEdR,QAAQC,IAAI,4BAA6BwlB,GAEzC,IAAIE,EAAW,GACfvB,EAAW9hB,SAASoG,IAElB,GAAIA,EAAUsc,UAAW,CACvB,IAAIY,EAAa,GACjBH,EAAoBnjB,SAASujB,IACtBA,EAAmBzc,QAAQvL,SAAS6K,EAAUjH,KACjDmkB,EAAW7nB,KAAK,CACd+nB,QAASD,EAAmBpkB,GAC5BskB,UAAWF,EAAmBhd,MAElC,IAEE+c,EAAWpmB,OAAS,GACtBmmB,EAAS5nB,KAAK,CACZ0D,GAAIiH,EAAUjH,GACd/F,MAAOgN,EAAUhN,MACjB2V,OAAQuU,EACRhkB,KAAM8G,EAAUuc,MAGtB,KAEF,IAAIe,EAAe,GACnBhmB,QAAQC,IAAI,cAAe0lB,GAC3BA,EAASrjB,SAASlB,IAChB,IAAIjG,EAAU,GAGd,GACE6M,MAAMC,QAAQ7G,EAAKiQ,SACnBjQ,EAAKiQ,OAAO4U,OAAO3U,GAAUA,EAAMyU,YACnC,CACA,MAAMG,EAAc9kB,EAAKiQ,OACtBhV,KAAKiV,GAAUA,EAAMyU,YACrBroB,KAAK,MACRsC,QAAQC,IAAI,oBAAqBimB,GAE/B/qB,EAD8B,QAA5BiG,EAAKQ,KAAK2P,cACL,GAAAhN,OAAMnD,EAAK1F,MAAK,yDAAA6I,OAAwD2hB,GAExE,8BAAA3hB,OAAiCnD,EAAK1F,MAAK,sCAAA6I,OAAqC2hB,GAEzFlmB,QAAQC,IAAI,cAAe9E,EAC7B,MAEEA,EAAO,0BAAAoJ,OAA6BnD,EAAK1F,MAAK,KAIhDsqB,GAAY,GAAAzhB,OAAOpJ,EAAO,KAAI,IAEhC6E,QAAQC,IAAI0lB,GACZ3lB,QAAQC,IAAI,2BAA4B+lB,GAExC,IAAIjN,EAAaqL,EACd/e,QACEqD,GACkC,QAAjCA,EAAUuc,KAAK1T,gBACdoU,EAASpgB,MAAM4gB,GAAcA,EAAU1kB,KAAOiH,EAAUjH,OAE5DpF,KAAKqM,GAAcA,EAAUjH,KAChCzB,QAAQC,IAAI,mBAAoB8Y,GAChC,IAAIqN,EAAa,CAAC,EAClBhC,EAAW9hB,SAASoG,KACSid,EAASpgB,MACjC4gB,GAAcA,EAAU1kB,KAAOiH,EAAUjH,OAIR,WAAjCiH,EAAUuc,KAAK1T,eACoB,QAAjC7I,EAAUuc,KAAK1T,eAA2B7I,EAAUsc,aAEvDoB,EAAW1d,EAAUqc,UAAYrc,EAAUsc,UAC7C,IAEFhlB,QAAQC,IAAI,kBAAmBmmB,GAE/B,IAAIC,EAAmBjC,EACpB/e,QACEqD,GACCA,EAAUsc,YACTW,EAASpgB,MAAM4gB,GAAcA,EAAU1kB,KAAOiH,EAAUjH,OAE5DpF,KAAKqM,GAAcA,EAAUjH,KAIhC,GAFAzB,QAAQC,IAAI,4BAA6BomB,GAErCtN,EAAWvZ,OAAS,EAAG,CACzB,IAAI0J,EACF,+FACEqQ,EAAe,CACjB9X,GAAI2X,EACJxX,KAAMA,EACNwH,QAAS2P,EACT1P,KAAM,kBAER,MAAMC,QAAyB7F,EAAAA,EAAAA,IAC7B,OACAyF,EACAqQ,GAGFvZ,QAAQC,IAAI,oBAAqBsJ,KAAKC,UAAUF,GAClD,CAEA,GAAItL,OAAOsoB,KAAKF,GAAY5mB,OAAS,EAAG,CAAC,IAAD+mB,EACtC,MAAMC,EAAU,GAAAjiB,OAAMnB,EAAe,qDAAAmB,OAAoD6U,GACnFnV,QAAiBuhB,EAAcgB,EAAY,GAAI,OACrDxmB,QAAQC,IAAI,mBAAoBgE,GAChC,IAAIwiB,GAA4B,QAAlBF,EAAAtiB,EAASS,OAAO,UAAE,IAAA6hB,OAAA,EAAlBA,EAAoBE,UAAW,GAC7CL,EAAoB,QAAIK,EAExB,MAAMC,EAAQ,0GAAAniB,OAA6G6U,SACrH3V,EAAAA,EAAAA,IAAU,QAAQijB,EAAUN,GAClCpmB,QAAQC,IAAI,iCACd,CAEA,GACEomB,EAAiB7mB,OAAS,GAC1B+lB,EAAc/lB,OAAS,GACd,iBAAToC,EACA,CACA,IAAIsH,EACF,+FAEEqQ,EAAe,CACjB9X,GAAI2X,EACJxX,KAAMA,EACNwH,QAASid,EACThV,OAAQkU,EACRlc,KAAM,kBAER,MAAMsd,QAA8BljB,EAAAA,EAAAA,IACjC,OACDyF,EACAqQ,GAGFvZ,QAAQC,IACN,0BACAsJ,KAAKC,UAAUmd,GAEnB,CACA,GAAItN,EAAa7Z,OAAS,EAAG,CAC3B,IAAI8Z,EACF,iGAEEC,EAAe,CACjB9X,GAAI2X,EACJxX,KAAMA,EACNwH,QAASiQ,GAEX,MAAMG,QAA2B/V,EAAAA,EAAAA,IAC/B,OACA6V,EACAC,GAGFvZ,QAAQC,IAAI,sBAAuBsJ,KAAKC,UAAUgQ,GACpD,CAIA,OAFAxZ,QAAQC,IAAI,wDAEL,CACLuQ,SAAS,EACTrV,QAAS,0BACTwqB,SAAUA,EACVK,aAAcA,EAElB,CAAE,MAAO7oB,GAEP,OADA6C,QAAQ7C,MAAM,kBAAmBA,GAC1B,CAAEqT,SAAS,EAAOrV,QAAS,sBAAuBgC,QAC3D,GIqYuBypB,CACnB1C,EACAC,EACAE,EACAnhB,GACoC,QAD7B8gB,EACP9M,GAAkBC,0BAAkB,IAAA6M,GAAM,QAANC,EAApCD,EAAsC3jB,YAAI,IAAA4jB,OAAN,EAApCA,EAA4C7M,MAAM,GAAGjU,SACrDiE,EACA+b,GACAvhB,GACAyX,EACA+K,EACAjY,IAGF,GAAInF,EAAOwJ,QAAS,CAClBuQ,IAAgB,GAChB/gB,QAAQC,IAAI,eAAgB+G,GACA,KAAxBA,EAAOgf,cAA8C,MAAvBhf,EAAOgf,aACvC9P,GAAiB2Q,EAAAA,IAGjB3b,GL/kB8B4b,KACpC,IAAKA,EAAc,MAAO,qBAE1B,MAAMC,EAAcD,EACjBtpB,MAAM,MACN6H,QAAQ2hB,GAAuB,KAAfA,EAAI3W,SAOvB,OACEzU,EAAAA,EAAAA,MAAA,OACEiD,MAAO,CACLooB,WAAY,OACZ9O,OAAQ,OACR+O,SAAU,WACVC,aAAc,QACd3rB,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRF,EAAAA,EAAAA,KAAA,UACEmB,QAhBa2qB,KACjB,MAAMC,EAAaN,EAAY1qB,KAAK2qB,GAAG,KAAAziB,OAAUyiB,KAAOtpB,KAAK,MAC7DkhB,UAAUC,UAAUC,UAAUuI,EAAW,EAerCxoB,MAAO,CACLqoB,SAAU,WACVI,MAAO,OACPC,IAAK,QACLxI,WAAY,OACZC,OAAQ,OACR7G,OAAQ,UACRqP,SAAU,OACVxP,MAAO,QACPxc,UAEFF,EAAAA,EAAAA,KAAC2jB,EAAAA,IAAS,CAACnjB,KAAM,QAEnBR,EAAAA,EAAAA,KAAA,MAAAE,SACGurB,EAAY1qB,KAAI,CAAC2qB,EAAKzqB,KACrBjB,EAAAA,EAAAA,KAAA,MAAAE,SAAiBwrB,GAARzqB,SAGT,EKqiBakrB,CAAsBzgB,EAAOgf,cAAe,CACzD0B,WAAW,IAGf,IAAIC,EAAW,GACf,GAAI3gB,EAAO2e,UAAY3nB,OAAOsoB,KAAKtf,EAAO2e,UAAUnmB,OAAS,EAAG,CAC9D,IAAIyE,ELtnBL,SACL2jB,EACA1H,EACAmE,EACApB,GA0BA,OAxBAjjB,QAAQC,IAAI,uBAAwBigB,GACpClgB,QAAQC,IAAI,qBAAsBgjB,GAClC2E,EAAStlB,SAASlB,IACE,QAAdA,EAAKQ,MAGPyiB,EAAyBA,EAAuBhf,QAC7CC,GAAUA,EAAM5J,QAAU0F,EAAK1F,QAI7BunB,EAAY1d,MAAMD,GAAUA,EAAM5J,QAAU0F,EAAK1F,SACpDunB,EAAYllB,KAAKqD,IAEI,WAAdA,EAAKQ,OAEdyiB,EAAyBA,EAAuBhoB,KAAKiJ,GACnDA,EAAM5J,QAAU0F,EAAK1F,OAAK0V,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9L,GAAK,IAAEuf,KAAM,UAAYvf,IAE/D,IAKK,CAAE+e,yBAAwBpB,cACnC,CKulBuB4E,CACb7gB,EAAO2e,SACPzF,EACAmE,EACApB,IAEFjjB,QAAQC,IAAI,eAAgBgE,GACxBA,IACFsc,GAActc,EAASgf,aAEvB0E,EAAW1jB,EAASogB,uBAExB,MACEsD,EAAWtD,EAGTsD,IAEFxH,EAAiBwH,GACjB5D,GAA6B4D,IAI7BlH,IAAuBqH,GACrBA,EAAKzrB,KAAK+E,IAAIgQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACThQ,GAAI,IACPoN,WAAYpN,EAAKoN,WAAWnS,KAAKiJ,IAAK8L,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjC9L,GAAK,IACR0S,WAAO7N,WAKjB,MACE4W,IAAgB,GAChB7V,GAAe6c,EAAAA,GACjB,GAOFjnB,EAAAA,EAAAA,YAAU,KACHoT,IACHuB,GACF,GACC,CAACvB,GAAWuB,KAGf3U,EAAAA,EAAAA,YAAU,KACR+f,GAAkBmC,GAAqB,GACtC,CAACA,KAGJ,MAAMgF,IAAejrB,EAAAA,EAAAA,UAAQ,IAEvBsb,EADY,kBAATzW,GACU4e,GACAN,EADoBte,GAAM+R,KAE1C,CAAC6M,GAAoBN,EAAete,GAAM+R,KAEvCsU,IAAkBlrB,EAAAA,EAAAA,UACtB,ILnxB+BujB,IAC5BA,EACEA,EAAWjkB,KAAKiJ,IAAK,CAC1B,mBAAwB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO5J,QAAS,UAFb,GKkxBhBwsB,CAAmB5H,KACzB,CAACA,KAEHtgB,QAAQC,IAAI,wCAAyCgoB,IAGrD,MAAMrT,IAAW7X,EAAAA,EAAAA,UACf,ILr2BwBma,KAC1B,IAAKA,IAAsBA,EAAkBtC,SAC3C,OAAO,KAGT,MAAMxT,EAAO8V,EAAkBtC,SAE/B,IAAIA,EAAW,CACblZ,MAAO0F,EAAKlF,OAAS,MACrB0F,KAAMR,EAAK6jB,MAAQ,MACnB,iBAAkB7jB,EAAK,mBAAqB,MAC5C+mB,MAAO/mB,EAAKgnB,OAAS,MACrB,4BAA6BhnB,EAAK,8BAAgC,MAClEinB,YAAajnB,EAAKinB,aAAe,MACjC,mBAAoBjnB,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCknB,SACElnB,EAAKknB,UAAQ,GAAA/jB,OA3DKlB,4DA4DA,+DAOtB,MAJkB,aAAdjC,EAAK6jB,OACPrQ,EAAS2T,IAAMnnB,EAAKmnB,KAAO,MAC3B3T,EAAS,cAAgBxT,EAAK,eAAiB,OAE1CwT,CAAQ,EK20BP4T,CAAYtR,KAClB,CAACA,KAEHlX,QAAQC,IAAI2U,KAEZ9T,EAAAA,EAAAA,YAAU,KAEK,kBAATc,IAA4BgK,IAC9BsV,IAAgB,EAClB,GACC,CAACtM,GAAU0D,EAAW1M,GAAShK,MAGlCd,EAAAA,EAAAA,YAAU,KACJknB,GAAaxoB,QAAU,IACzBQ,QAAQC,IAAI,kBAAmB+nB,IAC/B/H,EAAa+H,IACb5G,GAAoB7X,KAAKkf,MAAMlf,KAAKC,UAAUwe,MAC9ChI,GAAa2B,GAAYA,EAAU,IACrC,GACC,CAACqG,MAEJlnB,EAAAA,EAAAA,YAAU,KACRmgB,KAAyBrM,GAAS,GACjC,CAACA,KAGJ,MAAM9W,IAAUf,EAAAA,EAAAA,UACd,IL/yBwB2rB,EAACnoB,EAAQqB,EAAM+V,EAAcC,EAAkBhM,KACzE5L,QAAQC,IAAI,iBAAkB2B,GACjB,kBAATA,EACK,CACL,CAAEkB,YAAa,WAAY+V,OAAQ,aACnC,CACE/V,YAAa,QACb+V,OAAQ,QACRnX,KAAM/C,IAAc,IAAb,IAAEgD,GAAKhD,EACZ,MAAMgqB,EAAYhnB,EAAIN,SAASoX,MACzBmQ,EAAc5gB,MAAMC,QAAQ0gB,GAC9BA,EAAUtsB,KAAI6R,GAAKA,EAAEC,WAAaD,EAAExS,OAAS,KAAIgC,KAAK,MACtD,MAEJ,OACEpC,EAAAA,EAAAA,KAAA,QAAMI,MAAOktB,EAAYptB,UACvBF,EAAAA,EAAAA,KAACmc,EAAa,CACZlI,OAAQoZ,EACRjR,OAAQ/V,EAAIN,SAAS+K,OACrBuL,aAAcA,EACdC,kBAAmBA,EACnBhM,QAASA,KAEN,IAOV,CACL,CAAE9I,YAAa,QAAS+V,OAAQ,WKgxB1B6P,CAAanoB,EAAQqB,GAAM+V,GAAcC,GAAkBhM,KACjE,CAACrL,GAAQqB,GAAM+V,GAAcC,GAAkBhM,KAG3CkO,IAAe/c,EAAAA,EAAAA,UAAQ,IAAM6b,GAAe,KAuClD9X,EAAAA,EAAAA,YAAU,KACRd,QAAQC,IAAI,mCAAoC,CAC9CoU,UACA2O,wBACA9O,cACA,GACD,CAACG,EAAS2O,GAAsB9O,KA4EnC,OAFAlU,QAAQC,IAAI,eAAgB8Z,KAG1Bne,EAAAA,EAAAA,MAAA2D,EAAAA,SAAA,CAAA/D,SAAA,CAIGslB,KAAgBxlB,EAAAA,EAAAA,KAACkc,EAAAA,EAAM,KAExBlc,EAAAA,EAAAA,KAACutB,EAAAA,EAAiB,CAChBztB,KAAMgkB,EACN3jB,OAAQA,IAAM4jB,GAAqB,GACnC1iB,UAAWqG,UACTqc,GAAqB,SACfgC,IAAiB,KAKzBnN,KAAcG,IAAYuM,KAC1BtlB,EAAAA,EAAAA,KAAA,OACEuD,MAAO,CACLc,OAAQ,OACRmY,QAAS,OACTgR,cAAe,SACfC,eAAgB,gBAChB7B,SAAU,YACV1rB,UAEFF,EAAAA,EAAAA,KAAC0tB,EAAoB,CACnBzN,sBAt+BsBmD,IDUF1b,OAC9B0b,EACAoB,EACAF,EACA1U,EACAgL,EACAwJ,EACAW,EACAM,EACAD,KAGA1gB,QAAQC,IAAI,yCAEZ,MAAMgpB,EAAQvK,EAAMnS,OAAO0c,MACrBC,EAAkB,CACtB,2BACA,qEAWF,GAPqBlhB,MAAMmhB,KAAKF,GAAO5jB,QACpC+jB,IACEF,EAAgBrrB,SAASurB,EAAKxnB,QAC9BwnB,EAAKvgB,KAAK0I,cAAc8X,SAAS,UACjCD,EAAKvgB,KAAK0I,cAAc8X,SAAS,WAGrB7pB,OAAS,EAKxB,OAJA0L,EAAe,kDACfwT,EAAMnS,OAAOzD,MAAQ,GACrB6X,GAA0B,QAC1BD,GAAuB,GAIzB,MAAM0I,EAAOH,EAAM,GACbK,EAAS,IAAIC,WAEnBD,EAAOE,OAASxmB,UACd,MAAM3C,EAAO,IAAIopB,WAAWC,EAAEnd,OAAOvF,QAC/B2iB,EAAWC,EAAAA,GAAUvpB,EAAM,CAAEuB,KAAM,UACnCioB,EAAYF,EAASG,WAAW,GAChCC,EAAQJ,EAASK,OAAOH,GACxBI,EAAWL,EAAAA,GAAWM,cAAcH,EAAO,CAAElR,OAAQ,IAK3D,GAHA7Y,QAAQC,IAAI,qBAAsBgqB,GAGV,IAApBA,EAASzqB,OAIX,OAHA0L,EAAe,iBACfyV,GAA0B,QAC1BD,GAAuB,GAOzB,MAAMyJ,EAAoBF,EAAS,GAAG5tB,KAAKwc,GACnC,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQkF,WAAW1N,OAAOkB,gBAI5B,GAFAvR,QAAQC,IAAI,sBAAuBkqB,GAEN,SAAzBA,EAAkB,IAA0C,WAAzBA,EAAkB,GAMvD,OALAjf,EACE,qEAEFyV,GAA0B,QAC1BD,GAAuB,GAKzB,GAAwB,IAApBuJ,EAASzqB,OAEX,YADA0L,EAAe,0DAIjB,MAAMrO,EAAS,GACf,IAAK,IAAIuC,EAAI,EAAGA,EAAI6qB,EAASzqB,OAAQJ,IAAK,CACxC,MAAMuC,EAAMsoB,EAAS7qB,GACfgC,EAAOO,EAAI,GACX4N,EAAS5N,EAAI,IAEdP,GAAQmO,GACX1S,EAAOkB,KAAK,CACVJ,UAAWyB,EAAI,EACfxB,WAAY,OACZwsB,iBAAkB,yBAIlBhpB,IAASmO,GACX1S,EAAOkB,KAAK,CACVJ,UAAWyB,EAAI,EACfxB,WAAY,SACZwsB,iBAAkB,2BAGxB,CAIA,GAFApqB,QAAQC,IAAI,qBAAsBpD,GAE9BA,EAAO2C,OAAS,EAAG,CACrB,MAAM6qB,EAAkBxtB,EAAOR,KAC5Bc,GAAK,OAAAoH,OACGpH,EAAMQ,UAAS,OAAA4G,OAAMpH,EAAMS,WAAU,YAAA2G,OAAWpH,EAAMitB,oBAGjEpqB,QAAQC,IAAI,qCAAsCoqB,GAElDvK,EAAoBuK,GACpBzK,GAAmB,GACnBe,GAA0B,GAC1BD,GAAuB,EACzB,MACExK,EAAiB,6CACjBwJ,EAAiBuK,GACjB5J,EAAiB+I,GACjBzI,GAA0B,GAC1BD,GAAuB,EACzB,EAGF4I,EAAOgB,QAAU,KACfpf,EAAe,8CACfyV,GAA0B,EAAK,EAGjC2I,EAAOiB,kBAAkBnB,EAAK,EC3I3BoB,CACC9L,EACAoB,EACAF,EACA1U,GACAgL,GACAwJ,EACAW,EACAM,GACAD,IACA+J,SAAQ,KACR1J,IAAgB,EAAM,GACtB,EA09BMvF,aAAcA,GACdC,oBAAqBA,GACrBC,aA9EW1Y,UACnB,GAAKia,EAAL,CAKA8D,IAAgB,GAGhB,UACQ/D,EACJC,EACAC,EACAC,EAEJ,CAAE,MAAOhgB,GACP6C,QAAQ7C,MAAM,yBAA0BA,EAC1C,CAAC,QACC4jB,IAAgB,EAClB,CAGAJ,IAA0B,EAlB1B,MAFEzV,GAAe,uDAoBc,EAyDvByQ,uBAAwBA,GACxBC,YA3GUA,KAElB8D,EAAiB,MACjBW,EAAiB,MACjBP,EAAoB,IACpBF,GAAmB,GACnBK,EAAa,IACbM,GAAc,IACdE,GAAsB,IACtBN,EAAiB,IACjB4D,GAA6B,IAC7B/D,EAAY,GAEZU,IAAuB,GAGnBlF,GAAaR,UACfQ,GAAaR,QAAQlS,MAAQ,IAI/B6X,IAA0B,EAAK,MAqK5BzM,KACCtY,EAAAA,EAAAA,MAAA2D,EAAAA,SAAA,CAAA/D,SAAA,CAEG6Y,IAAW/Y,EAAAA,EAAAA,KAACkc,EAAAA,EAAM,KACnBlc,EAAAA,EAAAA,KAAA,OAAKD,UAAU,qCAAoCG,UACjDI,EAAAA,EAAAA,MAAA,OAAKP,UAAU,UAASG,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,YAAWG,UACxBF,EAAAA,EAAAA,KAACygB,EAAAA,EAAK,CACJC,IAAI,+DACJC,IAAI,YACJ5gB,UAAU,YACVoB,QAlPQiuB,KACtBjV,IAEAtK,IAASwf,EAAAA,EAAAA,KAAa,IACtBxf,IACEwJ,EAAAA,EAAAA,IAAqB,CACnBC,SAAU,CAAC,EACXgW,cAAe,GACf/iB,SAAU,GACVsP,mBAAoB,MAGxBhM,IACE0F,EAAAA,EAAAA,IAAmB,CACjBzJ,UAAW,GACXsJ,sBAAuB,GACvBC,aAAc,GACdwS,gBAAiB,GACjB5iB,QAAQ,EACR2C,QAAS,CAAC,EACViJ,gBAAiB,GACjBwH,OAAQ,CAAC,KAGbxI,IACE0f,EAAAA,EAAAA,IAAuB,CACrBnI,cAAe,GACfG,YAAa,GACbE,WAAW,EACXD,UAAW,CAAC,KAIhB7C,EAAa,IACbgB,IAAuB,EAAM,MAoNlBrM,KACCtZ,EAAAA,EAAAA,KAACwvB,EAAAA,EAAmB,CAClBzqB,KAAMuU,GACNmW,WAAW,yBAOlBnK,IACCtlB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,yBAAwBG,UACrCF,EAAAA,EAAAA,KAACkc,EAAAA,EAAM,OAGTlc,EAAAA,EAAAA,KAAAiE,EAAAA,SAAA,CAAA/D,UACEI,EAAAA,EAAAA,MAAA,OAAKP,UAAU,cAAaG,SAAA,EAC1BF,EAAAA,EAAAA,KAAC0vB,EAAyB,CACxBnR,WAAYoO,GACZnO,aAAcA,GACdvZ,OAAQA,GACRkZ,WA/2BIzW,UASlB,GARAyc,GAAiB,GACjBzf,QAAQC,IAAI,gBAAiBI,GAC7BL,QAAQC,IAAI,gCAAiCqY,GAC7CtY,QAAQC,IAAI,0BAA2BI,GACvCL,QAAQC,IAAI,mBAAoByiB,IAEhC1C,GAAa2B,GAAYA,EAAU,IAEtB,kBAAT/f,GACF5B,QAAQC,IAAI,gCAEZwgB,IAAuBqH,GACdA,EAAKzrB,KAAKsF,IAKf,KAH+B,IAA7B8f,GAAkBjiB,QAClBiiB,GAAkBlc,MAAM0lB,GAAMA,EAAE7e,SAAWzK,EAAIyK,UAE9B,OAAOzK,EAE1B,MAAMupB,EAAWxI,GAAc/d,MAAMsmB,GAAMA,EAAE7e,SAAWzK,EAAIyK,SACtD+e,GAAsB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAU1c,aAAc,GACtC4c,EAAiBzpB,EAAI6M,YAAc,GAEnC6c,EAAwBD,EAAe/uB,KAAKivB,GAE9C1f,IACAvL,EAAKxC,SAASytB,EAAGnd,UAAUkC,SAC3B8a,EAAY5lB,MACTgmB,GAAOA,EAAGpd,UAAUkC,SAAWib,EAAGnd,UAAUkC,UAGzBe,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQka,GAAE,IAAEtT,MAAO,QAAUsT,IAGjDE,EAAiB,GA+BvB,OA7BAnrB,EAAKiC,SAASuL,IACZ,MAAMoL,EAAe2J,GAAYje,MAAMW,GACdA,EAAM5J,MAC1BkU,QAAQ,YAAa,IACrBS,SACuBxC,EAAUwC,SAGtC,IAAK4I,EAAc,OAEnB,MAAMwS,EAAgBN,EAAY5lB,MAC/BgmB,GAAOA,EAAGpd,UAAUkC,SAAWxC,EAAUwC,SAGtB+a,EAAe7lB,MAClC+lB,GAAOA,EAAGnd,UAAUkC,SAAWxC,EAAUwC,UAI1Cmb,EAAeztB,MAAIqT,EAAAA,EAAAA,GAAC,CAClBjD,UAAWN,EACXO,QAAS6K,EAAaxX,GACtB4M,eAAgB,WAEZod,EAAgB,CAAEzT,MAAO,OAAU,CAAEA,MAAO,UAEpD,KAGF5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKzP,GAAG,IACN6M,WAAY,IAAI6c,KAA0BG,IAAe,UAI1D,CACLzK,IAAgB,GAChB/gB,QAAQC,IAAI,yCAIZ,IAAK,IAADyrB,EAAAC,EACF,MAAM,YAAEC,EAAW,aAAE5F,QJnWAhjB,OAC3B3C,EACA+G,EACAjE,EACAvB,EACAuK,EACAoZ,EACA1B,KAEA7jB,QAAQC,IAAI,mCAAoCI,GAGhD,MAAM0Y,EAAaD,EAAqBzY,EAAM+G,GAC9CpH,QAAQC,IAAI,+BAAgC8Y,GAC5C/Y,QAAQC,IAAI,gBAAiBslB,GAG7B,MAAME,EAAsBF,EAAclgB,QAAQqgB,GACV,aAAlCA,EAAUllB,MAAM+Q,gBACHpF,EAAgBxH,MAC5B0H,GACCA,EAAOnG,aAAewf,EAAUjkB,IACA,WAAhC4K,EAAOkH,OAAOhC,kBAOtBvR,QAAQC,IAAI,2BAA4BwlB,GAGxC,MAAMmG,EAAc,GAEpB7S,EAAWzW,SAASuH,IAClB,MAAMgiB,EAAYpG,EAAoBpgB,QACnCiM,IAAWA,EAAMlI,QAAQvL,SAASgM,KAElCxN,KAAKiV,GAAUA,EAAMzI,OACrBnL,KAAK,MAEU,KAAdmuB,GAAkC,cAAdA,GACtBD,EAAY7tB,KAAK,CAAEkL,QAASY,EAASiiB,OAAQD,GAC/C,IAEF7rB,QAAQC,IAAI,yBAA0B2rB,GAGtC,IAAI5F,EAAe,GACnB4F,EAAYtpB,SAASlB,IAAU,IAAD4M,EAC5B,MAAM+d,EAEL,QAFe/d,EAAG5G,EAAUzC,MAC1BW,GAAUA,EAAM7D,KAAOL,EAAK6H,iBAC9B,IAAA+E,OAAA,EAFkBA,EAEhBtS,MACGP,EAAO,iCAAAoJ,OAAoCwnB,EAAU,sCAAAxnB,OAAqCnD,EAAK0qB,QACrG9F,GAAY,GAAAzhB,OAAOpJ,EAAO,KAAI,IAGhC6E,QAAQC,IAAI,mBAAoB+lB,GAGhC,MAAMgG,EAAqBjT,EAAW1T,QACnC5D,IAAQmqB,EAAYrmB,MAAMnE,GAASA,EAAK6H,UAAYxH,MAQvD,GANAzB,QAAQC,IACN,iDACA+rB,GAIEA,EAAmBxsB,OAAS,EAAG,CACjC,MAAM0J,EACJ,+FAEIqQ,EAAe,CACnB9X,GAAI0B,EACJvB,KAAMA,EACNwH,QAAS4iB,EACT3iB,KAAM,kBAGRrJ,QAAQC,IAAI,qBAAsBsZ,GAElC,IACE,MAAMjQ,QAAyB7F,EAAAA,EAAAA,IAC7B,OACAyF,EACAqQ,GAGFvZ,QAAQC,IAAI,qBAAsBsJ,KAAKC,UAAUF,GACnD,CAAE,MAAOnM,GACP6C,QAAQ7C,MAAM,8BAA+BA,EAC/C,CACF,CAEA,GACE6uB,EAAmBxsB,OAAS,GAC5B+lB,EAAc/lB,OAAS,GACd,iBAAToC,GACAiiB,EACA,CACA,IAAI3a,EACF,+FAEEqQ,EAAe,CACjB9X,GAAI0B,EACJvB,KAAMA,EACNwH,QAAS4iB,EACT3a,OAAQkU,EACRlc,KAAM,kBAER,MAAMsd,QAA8BljB,EAAAA,EAAAA,IACjC,OACDyF,EACAqQ,GAGFvZ,QAAQC,IACN,0BACAsJ,KAAKC,UAAUmd,GAEnB,CAEA,MAAO,CACLnW,SAAS,EACTrV,QAAS,0BACTywB,YAAaA,EACb5F,aAAcA,EACf,EImOiDiG,CAC1C5rB,EACA+G,GACoC,QAD3BskB,EACTxU,GAAkBC,0BAAkB,IAAAuU,GAAM,QAANC,EAApCD,EAAsCrrB,YAAI,IAAAsrB,OAAN,EAApCA,EAA4CvU,MAAM,GAAGjU,SACrDvB,GACAuK,GACAgX,GACAU,IAEF7jB,QAAQC,IAAI,kCAAmC2rB,GAC/C5rB,QAAQC,IAAI,mCAAoC+lB,GAGhD,MAAMkG,EAAgBN,EAAYvvB,KAC/B+E,IAAI,IAAA4M,EAAA,OAAyD,QAAzDA,EAAK5G,GAAUzC,MAAMW,GAAUA,EAAM7D,KAAOL,EAAK6H,iBAAQ,IAAA+E,OAAA,EAApDA,EAAsDtS,KAAK,IAEvEsE,QAAQC,IAAI,kBAAmBisB,GAG/B,MAAMC,EAAc9rB,EAAKgF,QACtBC,IAAW4mB,EAAcruB,SAASyH,EAAM5J,SAErC0wB,EAAgB/rB,EAAKgF,QAAQC,GACjC4mB,EAAcruB,SAASyH,EAAM5J,SAE/BsE,QAAQC,IAAI,gBAAiBksB,GAC7BnsB,QAAQC,IAAI,kBAAmBmsB,GAG3BA,EAAc5sB,OAAS,IAErBwmB,GACF7I,EAA2B6I,EAAc,CAEvC,GAIJhmB,QAAQC,IAAI,mCAAoC+lB,IAIlDzF,IAAe8L,GAAmB,IAC7BA,KACAD,EAAc/vB,KAAKiJ,IAAK,CAAQ5J,MAAO4J,EAAM5J,aAI9CywB,EAAY3sB,OAAS,IACvBygB,GAAc6H,GAAS,IAClBqE,EAAY9vB,KAAIqD,IAAA,IAAC,MAAEhE,GAAgBgE,EAAN4sB,GAAIC,EAAAA,EAAAA,GAAA7sB,EAAA8sB,GAAA,OAAApb,EAAAA,EAAAA,GAAA,CAClCqH,MAAO/c,GACJ4wB,EAAI,OAENxE,KAEL9H,GAAa2B,GAAYA,EAAU,IACnCzE,EAA6B,8BAC7BjD,IAAc,GAElB,CAAE,MAAO9c,GACP6C,QAAQ7C,MAAM,6BAA8BA,GAC5CggB,EAA2B,0CAC7B,CAAC,QAEC4D,IAAgB,EAClB,CACF,GA8tBcrH,WA3tBMrZ,IACpBL,QAAQC,IAAI,mCAAoCI,GAChD,MAAMqhB,EAAmBuG,GAAgB5iB,QACtC1D,IACEtB,EAAKsE,MAAM8nB,GAAgBA,IAAgB9qB,EAAI,uBAGpD,GADA3B,QAAQC,IAAI,mCAAoCyhB,GAC5CA,EAAkB,CACpB,MAAMgL,EAAkBhL,EAAiBrlB,KAAK+E,IAAI,CAChD1F,MAAO0F,EAAK,uBAGdpB,QAAQC,IAAIysB,GACZnM,GAAcmM,EAChB,GA8sBc/S,OA3kCG3W,UAMjB,GALAhD,QAAQC,IAAI,sCAAuCqY,GAEnDmK,GAAiBnK,GACjByI,IAAgB,GAEH,kBAATnf,GACF,IAAgB,IAAZgK,GAAkB,CACpB5L,QAAQC,IAAI,gCACZ,MAAMgE,QAAiB0oB,GACrBrU,EACApB,GACAwL,IAIF,GADA1iB,QAAQC,IAAI,8BAA+BgE,GACvCA,EAAU,CACZ,MAAM2oB,EAAmBtU,EAAUjc,KAAKmoB,IACtC,MAAMqI,EAAenK,GAAc/d,MAChCvD,GAASA,EAAKgL,SAAWoY,EAAUpY,SAGtC,MAAO,CACLA,OAAQoY,EAAUpY,OAClBE,SAAsB,OAAZugB,QAAY,IAAZA,OAAY,EAAZA,EAAcvgB,SACxBoC,UAAuB,OAAZme,QAAY,IAAZA,OAAY,EAAZA,EAAcne,UACzBC,UAAW6V,EAAUhM,SACrBhK,WAAYgW,EAAU/L,MAAMpc,KAAIpB,IAAA,IAAC,UAAEkT,EAAS,QAAEC,GAASnT,EAAA,MAAM,CAC3DkT,YACAC,UACD,IACF,IAGHjD,IAAS2D,EAAAA,EAAAA,IAAiB8d,IAE1B7L,IAAgB,EAClB,MACE/gB,QAAQoI,KAAK,2BACb2Y,IAAgB,EAEpB,KAAO,CACL/gB,QAAQC,IAAI,8BAEZ,MAAMgE,QAAiB6oB,GACrBxU,EACApB,GACAwL,IAIF,GADA1iB,QAAQC,IAAI,8BAA+BgE,GACvCA,EAAU,CAAC,IAAD8oB,EAAAC,EACZ,MAAMJ,EAAmBtU,EAAUjc,KAAKmoB,IACtC,MAAMqI,EAAenK,GAAc/d,MAChCvD,GAASA,EAAKgL,SAAWoY,EAAUpY,SAGtC,MAAO,CACLA,OAAQoY,EAAUpY,OAClBE,SAAsB,OAAZugB,QAAY,IAAZA,OAAY,EAAZA,EAAcvgB,SACxBoC,UAAuB,OAAZme,QAAY,IAAZA,OAAY,EAAZA,EAAcne,UACzBC,UAAW6V,EAAUhM,SACrBhK,WAAYgW,EAAU/L,MAAMpc,KAAIsC,IAAA,IAAC,UAAEwP,EAAS,QAAEC,GAASzP,EAAA,MAAM,CAC3DwP,YACAC,UACD,IACF,IAGHjD,IAAS2D,EAAAA,EAAAA,IAAiB8d,IAG1B,MAAMK,EAC+D,QADnDF,EAChB/V,EAAAA,EAAMC,WAAW7C,cAAc8C,kBAAkBC,0BAAkB,IAAA4V,GAC3D,QAD2DC,EAAnED,EACI1sB,YAAI,IAAA2sB,OAD2D,EAAnEA,EACU5V,MACI,OAAZ6V,QAAY,IAAZA,GAAAA,EAAcztB,cACV6X,EAAAA,EAAAA,GAAkB4V,EAAc7X,IAGxC2L,IAAgB,EAClB,MACE/gB,QAAQoI,KAAK,2BACb2Y,IAAgB,EAEpB,YAEMpH,GAAOrB,EACf,EAq/BcsB,SAn/BK5W,UAKnB,GAHAhD,QAAQC,IAAI,iBAAkB2B,IAC9B5B,QAAQC,IAAI,0BAA2Bqf,GAE1B,kBAAT1d,GAGF,OAFA5B,QAAQC,IAAI,4CACZihB,IAAiB4G,IAAUA,IAO7B,GAF0B,CAAC,YAAc,iBAAkB,iBAAmB,UAAW,4BAEnEjqB,SAAS+D,MAAU0d,EACvC,OAAKmC,IAAkD,IAA7BA,GAAkBjiB,YAI5C6f,GAAqB,QAHnBlC,EAA2B,6CAM/B,GAAIsE,GAAkBjiB,OAAS,EAAG,CAAC,IAAD0tB,EAAAC,EAChCntB,QAAQC,IAAI,uBAAwBwhB,IACpCzhB,QAAQC,IAAI,4CAA6CqY,GAEzD,MAAMkJ,EAAiBC,GAAkBplB,KAAKsF,GAAQA,EAAI8W,QAC1DzY,QAAQC,IAAI,mBAAoBuhB,GAChC,MAAMrI,EAAgBqI,EAAenlB,KAAKX,IAAK,CAC7CA,MAAOA,MAETsE,QAAQC,IAAI,kBAAmBkZ,GAC/B,MAAMuI,EAAmBpJ,EAAUjT,QAChC1D,IAAS6f,EAAe3jB,SAAS8D,EAAI8W,SAExCzY,QAAQC,IAAI,kBAAmBwjB,IAC3BA,KACFxD,EAAayB,GACbzH,IAAc,GACd+F,GAAa2B,GAAYA,EAAU,KAKrCpB,IAAeqB,GAAqB,IAC/BA,KACAzI,KAGL+D,EAA6B,sCACvBhE,EAAkB9R,GAAW+R,EAAkD,QAArC+T,EAAChW,GAAkBC,0BAAkB,IAAA+V,GAAM,QAANC,EAApCD,EAAsC7sB,YAAI,IAAA8sB,OAAN,EAApCA,EAA4C/V,MAAM,GAAGjU,SAASvB,GACjH,GAi8BcpB,MAAOA,GACPoB,KAAMA,GACNgK,QAASA,GACT+H,OAAQA,GACRoG,WAAYA,GACZC,SAnLKoT,KACnBnN,EAAa1W,KAAKkf,MAAMlf,KAAKC,UAAU2X,MACvClB,EAAakB,IACblH,IAAc,GACdwG,GAAsBiC,IACtBxB,IAAgB,GAEH,kBAATtf,IACF6e,IAAuBqH,GACrBA,EAAKzrB,KAAK+E,IAAIgQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACThQ,GAAI,IACPoN,WAAYpN,EAAKoN,WAAWnS,KAAKiJ,IAAK8L,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjC9L,GAAK,IACR0S,WAAO7N,WAIf,EAmKc8P,cAAeA,MAEjB3e,EAAAA,EAAAA,KAAC+xB,EAAAA,EAAa,CAEZhtB,KAAMiY,EACNxa,QAASA,GAETitB,WAAW,2BAJNhL,YAgBjBzkB,EAAAA,EAAAA,KAACgyB,EAAAA,EAAkB,CACjBlyB,KAAMukB,EACNlkB,OAAQA,IAAMmkB,GAAmB,GACjC/iB,OAAQgjB,MAET,EAMM8M,GAAgC3pB,MAC3CsV,EACApB,EACAwL,KACI,IAAD6K,EAAAC,EAAAC,EACH,MAAMC,GACgC,QAApCH,EAAArW,EAAkBC,0BAAkB,IAAAoW,GAAM,QAANC,EAApCD,EAAsCltB,YAAI,IAAAmtB,GAAO,QAAPC,EAA1CD,EAA4CpW,aAAK,IAAAqW,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvD7Y,EAAWsC,EAAkBtC,UAAY,CAAC,EAE1ClL,EAAU,CACd7C,QAAS+N,EAAS1Y,MAClByxB,KAAMD,EAAWvqB,SACjBib,eAAgBxJ,EAASgZ,aACzBvP,cAAezJ,EAAS,uBACxB0J,QAAS,WACTC,MAAOjG,EAAUjc,KAAK+E,IACpB,MAAMysB,EAAYnL,EAAc/d,MAAMmpB,GAAOA,EAAG1hB,SAAWhL,EAAKgL,SAEhE,MAAO,CACLA,OAAQhL,EAAKgL,OACbE,UAAmB,OAATuhB,QAAS,IAATA,OAAS,EAATA,EAAWvhB,WAAY,eACjCoC,WAAoB,OAATmf,QAAS,IAATA,OAAS,EAATA,EAAWnf,YAAa,UACnCC,UAAWvN,EAAKoX,SAChBhK,WAAYpN,EAAKqX,MAAMpT,QAAQC,GAAUA,EAAM0S,QAC5C3b,KAAKiJ,IACJ,MAAM,MAAE0S,GAAmB1S,EAATgnB,GAAIC,EAAAA,EAAAA,GAAKjnB,EAAKyoB,GAChC,OAAA3c,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKkb,GAAI,IACP0B,UAAqB,UAAVhW,EAAoB,MAAQ,OAAK,IAGnD,KAGLhY,QAAQC,IAAI,4BAA6ByJ,GAIzC,IAEE,aADuBjG,EAAAA,EAAAA,IAAU,OAHjC,gFAGkDiG,EAEpD,CAAE,MAAOvM,GAEP,MADA6C,QAAQ7C,MAAM,+BAAgCA,GACxCA,CACR,GAGW2vB,GAAmB9pB,MAC9BsV,EACApB,EACAwL,KACI,IAADuL,EAAAC,EAAAC,EACH,MAAMT,GACgC,QAApCO,EAAA/W,EAAkBC,0BAAkB,IAAA8W,GAAM,QAANC,EAApCD,EAAsC5tB,YAAI,IAAA6tB,GAAO,QAAPC,EAA1CD,EAA4C9W,aAAK,IAAA+W,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDvZ,EAAWsC,EAAkBtC,UAAY,CAAC,EAE1ClL,EAAU,CACd7C,QAAS+N,EAAS1Y,MAClByxB,KAAMD,EAAWvqB,SACjBib,eAAgBxJ,EAASgZ,aACzBvP,cAAezJ,EAAS,uBACxB0J,QAAS,WACTC,MAAOjG,EAAUjc,KAAK+E,IAAU,IAADgtB,EAC7B,MAAMP,EAAYnL,EAAc/d,MAAMmpB,GAAOA,EAAG1hB,SAAWhL,EAAKgL,SAIxDygB,EAAenK,EAAc/d,MAAM0pB,GAAOA,EAAGjiB,SAAWhL,EAAKgL,SAG/DyV,GACQ,OAAZgL,QAAY,IAAZA,GAAwB,QAAZuB,EAAZvB,EAAcre,kBAAU,IAAA4f,OAAZ,EAAZA,EAA0B5uB,QAAS,GACnCqtB,EAAare,WAAWyX,OAAOqI,GAC7BltB,EAAKqX,MAAMlT,MACRD,GACCA,EAAM8I,UAAYkgB,EAAclgB,SAChB,QAAhB9I,EAAM0S,UAGNvJ,EAAuB,OAATof,QAAS,IAATA,OAAS,EAATA,EAAWpf,YACjC,MAAO,CACLrC,OAAQhL,EAAKgL,OACbE,UAAmB,OAATuhB,QAAS,IAATA,OAAS,EAATA,EAAWvhB,WAAY,eACjCoC,WAAoB,OAATmf,QAAS,IAATA,OAAS,EAATA,EAAWnf,YAAa,UACnCC,UAAWvN,EAAKoX,SAChB5J,UAAmB,OAATif,QAAS,IAATA,OAAS,EAATA,EAAWjf,WAAY,MACjC2f,mBAAmB9f,IAAeoT,GAClCrT,WAAYpN,EAAKqX,MAAMpc,KAAKiJ,IAAW,IAADkpB,EACpC,MAAM3B,EAAenK,EAAc/d,MAChC0pB,GAAOA,EAAGjiB,SAAWhL,EAAKgL,SAEvBqiB,EAA4B,OAAZ5B,QAAY,IAAZA,GAAwB,QAAZ2B,EAAZ3B,EAAcre,kBAAU,IAAAggB,OAAZ,EAAZA,EAA0BjpB,MAC7C2I,GAAMA,EAAEE,UAAY9I,EAAM8I,UAGvBsgB,EAA8B,UAAhBppB,EAAM0S,MACpB2W,EAAiC,QAAhBrpB,EAAM0S,MAG7B,OAAIyW,GAAiBE,EACZ,CACLxgB,UAAW7I,EAAM6I,UACjBC,QAAS9I,EAAM8I,QACf4f,UAAW,UAKXS,IAAkBE,EACb,CACLxgB,UAAW7I,EAAM6I,UACjBC,QAAS9I,EAAM8I,QACf4f,UAAW,KAKVS,GAAiBE,EACb,MAIJF,GAAiBC,EACb,CACLvgB,UAAW7I,EAAM6I,UACjBC,QAAS9I,EAAM8I,QACf4f,UAAW,OAIR,IAAI,IACV3oB,OAAOupB,SACX,KAIL5uB,QAAQC,IAAI,sCAAuCyJ,GAKnD,IAEE,aADuBjG,EAAAA,EAAAA,IAAU,OAHjC,qFAGkDiG,EAEpD,CAAE,MAAOvM,GAEP,MADA6C,QAAQ7C,MAAM,+BAAgCA,GACxCA,CACR,GE12CF,IAAI0xB,GAAO,KAuFI,SAAS,KAGtB,GAAIrkB,OAAOC,OAAQ,CAGjB,IAAIqkB,GAAe,EAEnBtkB,OAAOC,OAAO2L,SAAS,UAAU,KAC3B0Y,EACF9uB,QAAQoI,KACN,+EAIJ0mB,GAAe,EArGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzC1kB,OAAO0kB,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbJ,EAAAvkB,OAAOC,cAAM,IAAAskB,GAAM,QAANC,EAAbD,EAAe3kB,YAAI,IAAA4kB,OAAN,EAAbA,EAAqBlZ,cAAc,WACnCD,SAASuZ,eAAe,QAGrBD,IACHA,EAActZ,SAASwZ,cAAc,OACrCF,EAAY1tB,GAAK,OACb+I,OAAOC,QAAUD,OAAOC,OAAOL,KACjCI,OAAOC,OAAOL,KAAKklB,YAAYH,GAG/BtZ,SAASzL,KAAKklB,YAAYH,IAOzBN,KAEHA,GAAOU,EAAAA,WAAoBJ,IAK7BN,GAAKW,QACH5zB,EAAAA,EAAAA,MAAC6zB,EAAAA,GAAQ,CAACzY,MAAOA,EAAAA,EAAMxb,SAAA,EACrBF,EAAAA,EAAAA,KAAC2a,EAAe,KAChB3a,EAAAA,EAAAA,KAAC4jB,EAAe,KAChB5jB,EAAAA,EAAAA,KAACo0B,EAAAA,GAAc,OAMrB,CAiEMC,GAAO,GAEX,MACE3vB,QAAQ7C,MACN,sEAGN,EArEA,WA2BE,GAAIqN,OAAO1L,QAAU0L,OAAO1L,OAAO+W,SAAU,CAC3C,IAAI+Z,EAAiBplB,OAAO1L,OAAO+W,SAASwZ,cAAc,UAC1DO,EAAeC,YA1BE,y1BA2BjBrlB,OAAO1L,OAAO+W,SAASzL,KAAKklB,YAAYM,EAE1C,MACE5vB,QAAQoI,KAAK,qFAEjB,CAGA0nB,E","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Modals/ConfirmationModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","services/api/companion/userGroupService.js","services/api/companion/allPlantSevice.js","services/api/companion/plantChildrenService.js","services/api/companion/getRouteDetails.js","services/api/companion/updateClasses.js","services/api/companion/fetchCsrfService.js","hooks/useCompanionWidget.js","services/api/companion/assignedPlantService.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/comapnaiondataHelpers.js","services/api/companion/saveTableDataService.js","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/DragAndDrop.jsx","services/api/companion/createMFGCA.js","pages/companionWidget/CompanionWidget.jsx","services/api/companion/noPlants.js","pages/companionWidget/companionIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }  else {\r\n      const result = flowDownCA.split(\"-\").slice(0, 2).join(\"-\");\r\n      // 1st API call to search for the Change Action\r\n     let CAurlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${result}`;\r\n     const CASearchResponse = await fetchData(CAurlObjWAF);\r\n     const MFGCAID = CASearchResponse.changeAction[0]?.identifier;\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n        if (CAresponse) {\r\n          for (const item of CAresponse.isFlowDownOf || []) {\r\n            if (item.type === \"Change Action\") {\r\n              const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n              const EngCAResponse = await fetchData(EngCAUrl);\r\n              if (EngCAResponse) {\r\n                  CADetails.CAAtt.push({\r\n                    CATitle: EngCAResponse.title,\r\n                    CAState: EngCAResponse.state,\r\n                  });\r\n                }\r\n            }\r\n          }\r\n        }\r\n        CADetails[\"MCOState\"] = \"Complete\";\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }   \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/companion/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/companion/updateClasses\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/companion/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handleCompanion = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        const allPlants = await CAAllPlantsData();\r\n        await fetchChangeActionData(allPlants);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // // Step 1: Fetch user group collaboration spaces\r\n        // const userGroupCollab = await getUserGroupCollab(\r\n        //   headers,\r\n        //   objectId,\r\n        //   email\r\n        // );\r\n        // console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        // let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] All CollabSpaces:\",\r\n        //   allCollabSpaces\r\n        // );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        // let allPlants = [];\r\n        // if (allCollabSpaces.length > 0) {\r\n        //   allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        //   console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        // }\r\n\r\n        //here we have to get from ScopeLined EngineeringItem. for companion widget---->\r\n        let allPlants = [];\r\n        const scopeLinekdData = await getScopedItms(objectId,headers);\r\n        console.log(\"[Use Companion] Scope Linked Data:\", scopeLinekdData);\r\n        if(scopeLinekdData.identifier){\r\n          allPlants = await getPlantClasses(headers, scopeLinekdData.identifier);\r\n        }\r\n\r\n        console.log(\"[Companion] All Plants:\", allPlants);\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId,\r\n            state,\r\n            type\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        // TODO : Need Update for companion widget\r\n\r\n          const typeList = [\"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\",\r\n            \"Raw_Material\"];\r\n        if (typeList.includes(type)) {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handleCompanion };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getPlantClasses(headers, objectId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (itemResponse.status && itemResponse.output) {\r\n      const classExtensions = itemResponse.output.member[0].ClassificationAttributes?.member || [];\r\n \r\n      const result = [];\r\n \r\n      for (const classItem of classExtensions) {\r\n        const id = classItem.ClassID;\r\n        const attributes = classItem.Attributes || [];\r\n \r\n        const plantAssignmentClass = attributes.find(attr => attr.name === 'PlantAssignmentClass')?.value;\r\n \r\n        if (plantAssignmentClass) {\r\n          const title = await getClassTitleById(headers, id);\r\n          result.push({\r\n            id,\r\n            title\r\n          });\r\n        }\r\n      }\r\n \r\n      return result;\r\n    } else {\r\n      console.log(`No valid response for object ID ${objectId}`);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${objectId}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\nasync function getClassTitleById(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (response.status && response.output && response.output.member && response.output.member.length > 0) {\r\n      const classInfo = response.output.member[0];\r\n      return classInfo.title || null;\r\n    } else {\r\n      console.log(`No class found for classId ${classId}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching class title for classId ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\nimport {updateClasses} from \"./updateClasses\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId, // ProductId\r\n  state,\r\n  type\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes?.member || [];\r\n\r\n    // ClassExtensions = ClassExtensions.filter(ext => {\r\n    //   const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n    //   const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n    //   return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    // });\r\n    // const hasNoClass= ClassExtensions.some(ext => {\r\n    //   const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n    //   return attr?.value === true;\r\n    // });\r\n \r\n    // if (ClassExtensions.length===0){\r\n    //   ClassExtensions =  await updateClasses(\r\n    //     headers,\r\n    //     allPlants,\r\n    //     objectId,\r\n    //     state,\r\n    //     type\r\n    //     );\r\n    // }\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n          hasNoClass: false\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n  MSG_INVALID_MFG_TYPES,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanion } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanion(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanion]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            // \"VPMReference\",\r\n            // \"Raw_Material\",\r\n            // \"Change Action\",\r\n            \"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\"\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_MFG_TYPES);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanionDropableArea;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        // Seq: data?.Seq || \"1\",\r\n        // Status: data?.PlantStatus || \"Pending\",\r\n        // \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        // \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        // Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        // \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        // \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        // \"ERP Status\": \"Active\" || \"N/A\",\r\n        // \"ERP Export\": \"Yes\" || \"N/A\",\r\n        // \"Lead Plant\": false,\r\n        // MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        // \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    // { accessorKey: \"Seq\", header: \"Seq\" },\r\n    // { accessorKey: \"Status\", header: \"Status\" },\r\n    // { accessorKey: \"Change\", header: \"Change\" },\r\n    // { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    // { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    // { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    // { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    // {\r\n    //   accessorKey: \"MBom\",\r\n    //   header: \"MBom\",\r\n      \r\n    // },\r\n    // { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    // { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    // { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    // { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./companionWidget.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled,\r\n  setIsFileInputDisabled \r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    setIsFileInputDisabled(false); // ✅ Only here\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n      setIsFileInputDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n      setIsFileInputDisabled(true);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./comapnaiondataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/companion/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/companion/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/companion/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/companion/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = useCompanionDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = useCompanionDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"CreateKit\",  \"CreateAssembly\", \"CreateMaterial\",  \"Provide\", \"ProcessContinuousProvide\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import {fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const noPlants = async (headers, type, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchDataWithUrl = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    \r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=NoClassification`;\r\n\r\n        const collabspaceResponse = await fetchDataWithUrl(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === \"NoClassification\"\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n            const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n            const classResponse = await fetchDataWithUrl(libraryDataURL);\r\n\r\n            const noClassChild = classResponse.member[0]?.ChildClasses?.member?.find(child => child.title === \"No Class\");\r\n            const Classid = noClassChild?.id;\r\n            if (Classid) {\r\n                const classifyUrl =\r\n                  \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n             \r\n                const classifybody = {\r\n                  id: objectId, // Use objectId from Redux\r\n                  type: type, // Use type from Redux\r\n                  classes: [Classid],\r\n                  mode: \"classifyParent\",\r\n                };\r\n             \r\n                console.log(\"Classify API Body:\", classifybody);\r\n             \r\n                try {\r\n                  const classifyResponse = await fetchData(\r\n                    \"POST\",\r\n                    classifyUrl,\r\n                    classifybody,\r\n                   \r\n                  );\r\n                  console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n                } catch (error) {\r\n                  console.error(\"Error in Classify API Call:\", error);\r\n                }\r\n              }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./CompanionWidget\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","onConfirm","CustomModal","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","getAllPlants","async","allCollabSpaces","headers","objectId","ENOVIA_BASE_URL","process","UserGroupClasses","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","concat","collabSpace","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","filter","plant","some","userClass","all","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","urlObjWAF","searchResponse","routeData","RouteID","identifier","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","_CASearchResponse$cha","result","CAurlObjWAF","changeAction","updateClasses","allPlants","sLatestID","revurl","ret","source","relativePath","callEnoviaWebService","status","output","versions","results","version","Array","isArray","ancestors","getLatestRevision","warn","classificationUrl","ClassResponse","_ClassResponse$output","_ClassResponse$output2","ClassificationAttributes","classItem","Attributes","attr","name","value","updatedAttributes","String","ClassID","classifyUrl","classifyBody","classes","mode","classifyResponse","JSON","stringify","referencedObject","payload","categorizationAttributes","res","classId","attributes","acc","secondUrl","secondResponse","arguments","undefined","body","axios","fetchCsrfToken","securityContext1","window","widget","getValue","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","useCompanionWidget","showErrorToast","dispatch","useDispatch","email","handleCompanion","setParentDetailsLoading","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","CAAllPlantsData","setCAAllPlants","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","target","_response$output$resu","ancestor","mfgDetails","getScopedItms","_Iteminfo$member","_Iteminfo$member$","_Iteminfo$member$2","_Iteminfo$member$2$ds","Iteminfo","itemResponse","getItemDetails","ItemObjectdetails","plantIdData","hasNoClass","_itemResponse$output$","_itemResponse$output$2","ClassExtensions","ext","plantAssignmentAttr","allPlantsRemovedAttr","classification","plantName","erpStatus","isPlantClass","_allPlants$find","attribute","p","PlantName","PlantID","PlantERPStatus","PlantFlowDownCA","getAssignedClasses","ItemPlants","hasNoPlants","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","setCAItemDetails","setIsMFGCA","setCAHeaders","scopeLinekdData","_itemResponse$output$3","classExtensions","_attributes$find","getClassTitleById","getPlantClasses","plants","_response$member$0$Cl","initialAssignedClasses","uniqueInAllclasses","parentClass","replace","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","_objectSpread","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","fetchProductChildren","setProductChildren","getCaDetails","objectID","resObejct","proposedChangesArray","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","lang","ghostMode","url2","bd","responseMode","ids","response2","pattern","objectsByPatterns","itm","url3","response3","proposedChange","action","whats","what","operations","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","ScopeEngItem","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_MFG_TYPES","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","itemId","isRemoveMode","handleRemovePlant","marginRight","display","alignItems","color","fontWeight","AiOutlineClose","cursor","marginLeft","getTableData","tableData","mappedData","ItemName","Plant","Change","localeCompare","uniqueColumns","header","extractIdsFromTitles","newClasses","itemTitle","matchedPlant","handleRemoveData","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","declassifyResponse","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","Seq","Status","CAStatus","MBom","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","callManufacturingCAApi","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","CAHeaders","credentials","credentialsParts","companyName","allPlantsData","manufacturingCABody","excelData","uniquePlantTitles","Set","itemName","toString","plantsList","add","parentPlants","plantTitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","event","stopPropagation","navigator","clipboard","writeText","background","border","FaRegCopy","CompanionWidget","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","initialTableData","setInitialTableData","confirmedRemove","_droppedObjectData$in5","_droppedObjectData$in6","selectedTitles","selectedTableRows","updatedTableData","prevKey","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","fetchDataWithUrl","_classResponse$member","_classResponse$member2","_classResponse$member3","noClassChild","Classid","noPlants","plantObjectData","plantId","extractPlantData","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","uniquePlant","asignedPlant","productChildren","getUniquePlant","sourceData","assignedTablePlants","_item$Plant","uniqueTablePlants","updateTableData","updatedData","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","MBOM","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","_allPlants$find4","AllClasses","productChilds","fetchOOTBData","NotPropagableChilds","prodChild","ErrorObj","prodchilds","notPropagableChild","childId","childName","Finalmessage","every","childTitles","errorItem","updateBody","propagateClasses","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","saveData","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","right","top","fontSize","formattedFinalMessage","autoClose","finalobj","errorObj","processErrorObj","prev","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","parse","tableColumns","plantList","tooltipText","ConfirmationModal","flexDirection","justifyContent","DragAndDropComponent","files","validExtensions","from","file","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","parentDetails","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","missingIn","Childs","classTitle","filteredNewClasses","handleAddData","erroredPlants","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","originalPlant","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}