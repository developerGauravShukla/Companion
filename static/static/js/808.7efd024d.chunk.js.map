{"version":3,"file":"static/js/808.7efd024d.chunk.js","mappings":"uNAMA,MA2DA,EA3DoBA,IAA6B,IAA5B,SAAEC,EAAQ,SAAEC,GAAUF,EACzC,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,IACvCC,GAAWC,EAAAA,EAAAA,QAAO,MAuBxB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qDAAoDC,SAAA,EACjEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CACdC,KAAMC,EAAAA,IACNC,QAVwBC,KACxBb,EAAWc,QACbhB,EAASE,EACX,EAQIM,UAAU,iBAGZE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sCAAqCC,UACnDF,EAAAA,EAAAA,MAACU,EAAAA,EAAU,CAAAR,SAAA,EACTC,EAAAA,EAAAA,KAACQ,EAAAA,EAAKC,QAAO,CACXC,KAAK,OACLC,IAAKhB,EACLiB,MAAOpB,EACPqB,SAnCiBC,IACzB,MAAMC,EAAgBD,EAAME,OAAOJ,MACnCnB,EAAcsB,EAAc,EAkCpBE,UA/BmBH,IACT,UAAdA,EAAMI,KAAmB1B,EAAWc,QACtChB,EAASE,EACX,EA6BQ2B,YAAY,YACZ5B,SAAUA,IAEXC,IACCQ,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CACLC,QAAQ,WACRjB,QAhCakB,KACvB7B,EAAc,IACdE,EAAS4B,QAAQC,OAAO,EA+Bd1B,UAAU,eAAcC,SACzB,kBAMH,C,oEC1DV,MAgGA,EAhG0B0B,KACxB,MAAOC,EAAQC,IAAajC,EAAAA,EAAAA,UAAS,OAC9BkC,EAAUC,IAAenC,EAAAA,EAAAA,UAAS,OAEzCoC,EAAAA,EAAAA,YAAU,KACSC,WACf,IAEE,MAAMC,QAAyBC,EAAAA,EAAAA,MAC/BJ,EAAYG,EACd,CAAE,MAAOE,GACPC,QAAQD,MACN,mDACAA,EAEJ,GAEFE,EAAU,GACT,KAEHN,EAAAA,EAAAA,YAAU,IACD,KACDJ,GACFA,EAAOW,YAET,GAED,CAACX,IAgEJ,MAAO,CACLY,eA/DoBC,EAAAA,EAAAA,cACpB,CAAC/C,EAAYgD,EAAYC,KAAuB,IAADC,EAE7C,IAAKd,EAEH,YADAO,QAAQQ,KAAK,mDAIf,MAAMC,EACJ,UAAW,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,IACjDC,EAAY,IAAIpB,EAASqB,OAAOL,EAAY,CAChDM,sBAAuB,IAEzBF,EAAUG,gBAAgB,mBAC1BxB,EAAUqB,GAEVb,QAAQiB,IACN,iDACA5D,EACAgD,GAGF,MAAMa,EAAwB,QAAhBX,EAAGY,OAAOC,cAAM,IAAAb,OAAA,EAAbA,EAAec,GAG1BC,GAAeC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBlB,GAAU,IACbmB,UAAWN,EACXO,cAAehB,EACfiB,wBAAyBrE,IAI3B2C,QAAQiB,IACN,8DACAK,GAEFT,EAAUc,cAAc,kBAAmBL,GAO3CT,EAAUc,cAAc,kBAAmBL,GAU3CtB,QAAQiB,IACN,mEAEFJ,EAAUe,YAAY,2BAVOC,IAC3B7B,QAAQiB,IAAI,+CAAgDY,GACxDvB,GACFA,EAAkBuB,EACpB,GAMmE,GAEvE,CAACpC,IAKF,C,2MCxFH,MA8EA,EA9EwBqC,KACtB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MACjB,iBAAEC,EAAgB,eAAEC,IAAmBC,EAAAA,EAAAA,MACtCC,EAASC,IAAc9E,EAAAA,EAAAA,WAAS,GAEvCyC,QAAQiB,IAAI,kCAsEZ,OA7DAtB,EAAAA,EAAAA,YAAU,KACR,IAAKwB,OAAOC,OAAQ,OAqDpBpB,QAAQsC,MAAM,+DACdnB,OAAOC,OAAOmB,SAAS,aAlDL3C,UAAa,IAAD4C,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMC,MAAM,MAGhCC,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BT,IACvBA,EAAMU,MACVC,GACCA,EAAKC,SAAS,uBAAyBD,EAAKC,SAAS,mBAenDC,CAAuBb,KAAWO,EAIpC,YAHA7C,QAAQQ,KACN,kFAOJsC,eAAeM,WAAW,sBAM1Bf,GAAW,GAEX,MACMgB,EADcC,EAAAA,EAAMC,WAEZC,cAAcC,kBAAkBC,mBAE9C,GAAsB,OAAjBL,QAAiB,IAAjBA,GAAuB,QAANb,EAAjBa,EAAmBxB,YAAI,IAAAW,GAAO,QAAPC,EAAvBD,EAAyBmB,aAAK,IAAAlB,IAA9BA,EAAgCmB,OAMnC,OALA5D,QAAQD,MACN,6EACAsD,QAEFhB,GAAW,GAIb,UAIQwB,EAAAA,EAAAA,GAAkBR,EAAkBxB,KAAK8B,MAAO5B,EACxD,CAAE,MAAOhC,GACPC,QAAQD,MAAM,iDAA6CA,GAC3DmC,EAAe4B,EAAAA,GACjB,CAAC,QACCzB,GAAW,GACXJ,EAAiB8B,EAAAA,GACnB,IAG4C,GAI7C,IAEI3B,GAAUvE,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,IAAK,IAAI,E,mGChFnC,MAEaC,EAAgB/G,IAMtB,IANuB,OAC5BgH,EAAS,GAAE,OACXC,EAAM,aACNC,EAAY,kBACZC,EAAiB,QACjBC,GACDpH,EAEC,OADA8C,QAAQiB,IAAI,iCAAkCiD,GACnC,OAANA,QAAM,IAANA,GAAAA,EAAQN,QAGX/F,EAAAA,EAAAA,KAAA0G,EAAAA,SAAA,CAAA3G,SACGsG,EAAOM,KAAKC,IACX/G,EAAAA,EAAAA,MAAA,QAEEgH,MAAO,CACLC,YAAa,MACbC,QAAS,cACTC,WAAY,SACZC,MAAOL,EAAMK,OAAS,QACtBC,WAAY,QACZnH,SAAA,CAED6G,EAAMO,UACU,UAAhBP,EAAMK,OAAqB,SACX,QAAhBL,EAAMK,QAAoBR,EAAU,aAAe,cACnDF,GAAyC,YAAzBK,EAAMQ,iBACrBpH,EAAAA,EAAAA,KAACqH,EAAAA,IAAc,CACbC,KAAM,GACNT,MAAO,CAAEU,OAAQ,UAAWN,MAAO,MAAOO,WAAY,OACtDpH,QAASA,IAAMoG,EAAkBF,EAAQM,EAAMa,aAhB9Cb,EAAMa,aANS,KA2BvB,EAiCMC,EAAeA,CAACC,EAAWjH,EAAMkH,KAG5C,GAFAzF,QAAQiB,IAAI,qBAAqBwE,IAE5BD,EAAW,MAAO,GAGvB,IAAIE,EAAaF,EAAUhB,KAAK3C,GACjB,kBAATtD,EACK,CACLoH,UAAc,OAAJ9D,QAAI,IAAJA,OAAI,EAAJA,EAAM+D,YAAa,MAC7BC,OAAW,OAAJhE,QAAI,IAAJA,OAAI,EAAJA,EAAMiE,aAAc,GAC3BC,QAAY,OAAJlE,QAAI,IAAJA,OAAI,EAAJA,EAAMkE,SAAU,QAG1B/F,QAAQiB,IAAI,0BAA8B,OAAJY,QAAI,IAAJA,OAAI,EAAJA,EAAMmE,SAAUP,EAAOQ,QAAS,OAE/D,CACLJ,OAAW,OAAJhE,QAAI,IAAJA,OAAI,EAAJA,EAAMqE,QAAS,MACtBC,KAAS,OAAJtE,QAAI,IAAJA,OAAI,EAAJA,EAAMsE,MAAO,IAClBC,QAAY,OAAJvE,QAAI,IAAJA,OAAI,EAAJA,EAAMwE,cAAe,UAC7B,cAAkB,OAAJxE,QAAI,IAAJA,OAAI,EAAJA,EAAMyE,YAAa,MACjC,cAAkB,OAAJzE,QAAI,IAAJA,OAAI,EAAJA,EAAM0E,YAAa,MACjCP,QAAY,OAAJnE,QAAI,IAAJA,OAAI,EAAJA,EAAMmE,SAAUP,EAAOQ,QAAS,MACxC,iBAAqB,OAAJpE,QAAI,IAAJA,OAAI,EAAJA,EAAM2E,eAAgBf,EAAOgB,UAAW,MACzD,kBAAmB5E,EAAK6E,gBAAkB,MAC1C,aAAc,SACd,aAAc,MACd,cAAc,EACdC,KAAM9E,EAAK+E,KAAO,OAAS,MAC3B,aAAc,OAapB,MAPa,kBAATrI,EACFmH,EAAWmB,MAAK,CAACC,EAAGC,IAAMD,EAAEnB,SAASqB,cAAcD,EAAEpB,YAErDD,EAAWmB,MAAK,CAACC,EAAGC,IAAMD,EAAEjB,MAAMmB,cAAcD,EAAElB,SAI7CH,CAAU,EA8DNuB,EAAgB,CAC3B,CAAEC,YAAa,kBAAmBC,OAAQ,oB,0CCnK5C,MA8LA,EA9LwCjK,IAejC,IAfkC,WACvCkK,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZxB,EAAM,MACNyB,EAAK,KACLnJ,EAAI,QACJ+F,EAAO,OACPmB,EAAM,WACNkC,EAAU,SACVC,EAAQ,cACRC,GACD3K,EACC,MAAM,iBAAE4K,EAAgB,iBAAE7F,IAAqBE,EAAAA,EAAAA,KACzC4F,EAAkBC,GACE,aAAjBA,GAAgD,gBAAjBA,GAAmD,cAAjBA,GAEnEC,EAAeC,IAAoB3K,EAAAA,EAAAA,WAAS,GAC7C4K,GAAoB1K,EAAAA,EAAAA,UA6B1BuC,QAAQiB,IAAI,uBAAwBuG,GAmCpC,OACE9J,EAAAA,EAAAA,MAAA6G,EAAAA,SAAA,CAAA3G,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAChC0G,IACAzG,EAAAA,EAAAA,KAAA,UACEF,UAAU,qCACVM,QAASA,KACH8J,EAAeL,GACjBI,EAAiBM,EAAAA,IAIN,kBAAT7J,GAEO0H,EADTiC,GAAiB,GAIjBJ,EADmB,aAAVJ,EACQW,EAAAA,GAEAC,EAAAA,GACnB,EACA1K,SACH,cAIF0G,IACCzG,EAAAA,EAAAA,KAAA,UACEF,UAAU,qCACVM,QAASA,KACO,aAAVyJ,GAAkC,gBAAVA,GAAqC,cAAVA,EACrDI,EAAiBM,EAAAA,IAEjBF,GAAiB,EACnB,EACAtK,SACH,sBAKO,kBAATW,IACCV,EAAAA,EAAAA,KAAA,UACEF,UAAU,qCACVM,QA1GcsK,KAClBR,EAAeL,GACjBI,EAAiBM,EAAAA,IAIfd,IAAoB,kBAAT/I,GAA4B0H,GACzCqB,IAEAQ,EADmB,aAAVJ,EACQc,EAAAA,GAEAC,EAAAA,GACnB,EA8FiC7K,SAC1B,UAIS,IAAZ0G,IACAzG,EAAAA,EAAAA,KAAA,UACEF,UAAU,oCACVM,QAjGayK,KACfX,EAAeL,GACjBI,EAAiBM,EAAAA,IAGfb,GACFA,GACF,EA0F4B3J,SACvB,WAKJ+J,IACC9J,EAAAA,EAAAA,KAAA,UACEF,UAAU,uCACVM,QAAS2J,EAAShK,SACnB,eAQDC,EAAAA,EAAAA,KAAC8K,EAAAA,EAAW,CACVC,KAAMX,EACNY,OAAQA,IAAMX,GAAiB,GAC/BhC,MAAM,kBACN4C,cAAe,CACb,CACEC,MAAO,MACP7J,QAAS,UACTjB,QAASA,KAAO,IAAD+K,EACY,QAAzBA,EAAAb,EAAkB/I,eAAO,IAAA4J,GAAzBA,EAA2BC,WAC3Bf,GAAiB,EAAM,GAG3B,CACEa,MAAO,QACP7J,QAAS,SACTjB,QAASA,IAAMiK,GAAiB,KAElCtK,UAEFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,KAACqL,EAAAA,EAAc,CACb1K,IAAK2J,EACLtG,KAAM2F,EACN2B,QAAS1B,EACTxB,OAAQA,EACRmD,UAjIUvH,IAElB,GADA7B,QAAQiB,IAAIY,GACC,kBAATtD,EACEsD,EAAK+B,OAAS,IAChBwD,EAAWvF,GACXwF,EAAWxF,GACPgG,GAAeA,GAAc,SAGnC,GAAIhG,EAAK+B,OAAS,EAAG,CACnB,MAAMyF,EAAWxH,EAAK2C,KAAK0B,IAAK,CAC9BA,MAAOA,EACPC,IAAK,IACLC,OAAQ,UACR,aAAc,MACd,aAAc,MACdJ,OAAQP,EAAOQ,OACf,gBAAiBR,EAAOgB,SACxB,kBAAmB,MACnB,aAAc,SACd,aAAc,MACd,aAAc,QACdE,KAAM,MACN,aAAc,OAEhBS,EAAWiC,GAEXhC,EAAWxF,GACPgG,GAAeA,GAAc,EACnC,CACF,EAoGQH,MAAOA,UAIZ,E,wEC/LP,MA4HA,EA5H6BxK,IAOtB,IAPuB,sBAC5BoM,EAAqB,aACrBC,EAAY,oBACZC,EAAmB,aACnBC,EAAY,uBACZC,EAAsB,YACtBC,GACDzM,EACC,MAAM,WAAE6E,IAAeC,EAAAA,EAAAA,MACjB,cAAE7B,IAAkBb,EAAAA,EAAAA,KAyC1B,OACEzB,EAAAA,EAAAA,KAAA0G,EAAAA,SAAA,CAAA3G,UACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAC+L,EAAAA,EAAK,CACJlF,MAAO,CAAEmF,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJrM,UAAU,iBAEZE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qBAAoBC,SAAC,mBACrCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,aACdE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,QAC/BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAEhBE,EAAAA,EAAAA,KAACoM,EAAAA,EAAW,CAAC9M,SArDGE,IAmCpB8C,EAAc9C,EAlCK,CACjB6I,MAAO,SACPgE,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAC3B5K,QAAQiB,IAAI,oBAAqB2J,GACjC5K,QAAQiB,IAAI,kCAAmC2J,EAAgB,GAAGvJ,IAEhEuJ,GACAA,EAAgBhH,OAAS,GACzBgH,EAAgB,GAAGvJ,GAEnBU,EAAW,CACT,CACE8I,SAAUD,EAAgB,GAAGvJ,GAC7ByJ,WAAYF,EAAgB,GAAG,sBAInC5K,QAAQQ,KAAK,wCACf,GAGwD,KAmBtD3C,EAAAA,EAAAA,KAAA,OAAKkN,MAAM,OAAMnN,UACfF,EAAAA,EAAAA,MAAA,OAAKqN,MAAM,6BAA4BnN,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OAAKkN,MAAM,yBAAwBnN,UACjCC,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CACLC,QAAQ,eACRjB,QAASA,KACP,MAAM+M,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KACH,wFACFH,EAAKI,SAAW,iCAChBJ,EAAKK,OAAO,EACZzN,SACH,yBAIHC,EAAAA,EAAAA,KAAA,OAAKkN,MAAM,yBAAwBnN,UACjCC,EAAAA,EAAAA,KAACQ,EAAAA,EAAKiN,MAAK,CAACC,UAAU,mBAAkB3N,UACtCC,EAAAA,EAAAA,KAACQ,EAAAA,EAAKC,QAAO,CACXC,KAAK,OACLiN,UAAQ,EACR9M,SAAU4K,EACVlM,SAAUoM,EACVhL,IAAK+K,SAIX1L,EAAAA,EAAAA,KAAA,OAAKkN,MAAM,yBAAwBnN,UACjCC,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CAACC,QAAQ,iBAAiBjB,QAAS0L,EAAY/L,UACpDC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAM0N,EAAAA,WAG3B5N,EAAAA,EAAAA,KAAA,OAAKkN,MAAM,yBAAwBnN,UACjCC,EAAAA,EAAAA,KAAA,OACE6G,MAAO,CACLE,QAAS,eACTQ,OAAQsE,EAAyB,cAAgB,WACjD9L,UAEFC,EAAAA,EAAAA,KAACoB,EAAAA,EACC,CACAC,QACEwK,EAAyB,YAAc,kBAEzCzL,QAASwL,EACTrM,SAAUsM,EAAwB9L,SACnC,yCAQV,E,8FCkmCP,EAtqCwB8N,KACtB,MAAM,6BAAEC,EAA4B,2BAAEC,IACpCC,EAAAA,EAAAA,MACKC,EAAmBC,IAAwBxO,EAAAA,EAAAA,WAAS,IACpDyO,EAAqBC,IAA0B1O,EAAAA,EAAAA,WAAS,IACxD2O,EAAeC,IAAoB5O,EAAAA,EAAAA,WAAS,IAC5C6O,EAAeC,IAAoB9O,EAAAA,EAAAA,UAAS,OAC5C+O,EAAiBC,IAAsBhP,EAAAA,EAAAA,WAAS,IAChDiP,EAAkBC,IAAuBlP,EAAAA,EAAAA,UAAS,KACnD,wBAAEmP,EAAuB,QAAEtK,IAAYJ,EAAAA,EAAAA,MACtC2K,EAAUC,IAAerP,EAAAA,EAAAA,UAAS,IAClCiI,EAAWqH,IAAgBtP,EAAAA,EAAAA,UAAS,KACpCuP,EAAeC,IAAoBxP,EAAAA,EAAAA,UAAS,KAC5CyP,EAAeC,IAAoB1P,EAAAA,EAAAA,UAAS,OAC5C2P,GAAYC,KAAiB5P,EAAAA,EAAAA,UAAS,KACtC6P,GAAoBC,KAAyB9P,EAAAA,EAAAA,UAAS,KACtDiM,GAAqB8D,KAA0B/P,EAAAA,EAAAA,WAAS,IACxDmM,GAAwB6D,KAA6BhQ,EAAAA,EAAAA,WAAS,IAC/D,WAAEwE,KAAeC,EAAAA,EAAAA,MAGhBwL,GAAgBC,KAAqBlQ,EAAAA,EAAAA,WAAS,IAC9CmQ,GAAcC,KAAmBpQ,EAAAA,EAAAA,WAAS,IAC1CqQ,GAAqBC,KAA0BtQ,EAAAA,EAAAA,WAAS,IACxD6G,GAAc0J,KAAmBvQ,EAAAA,EAAAA,WAAS,GAC3CwQ,IAAWC,EAAAA,EAAAA,OACX,iBAAE/L,GAAgB,eAAEC,KAAmBC,EAAAA,EAAAA,MACtC8L,GAAkBC,KAAuB3Q,EAAAA,EAAAA,UAAS,KAClDoK,GAAYE,KAAiBtK,EAAAA,EAAAA,WAAS,GAC7C,IAAI4Q,GAAmBhN,OAAOC,OAAOgN,SAAS,eAC9CpO,QAAQiB,IAAI,wBAAyBkN,IAErC,MAAM5E,IAAe9L,EAAAA,EAAAA,QAAO,MAyNtB4G,IAAoBjE,EAAAA,EAAAA,cACxB,CAAC+D,EAAQkK,KACPhB,IAAuB7H,GACrBA,EAAUhB,KAAK8J,GACbA,EAAKvI,SAAW5B,GAAM5C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEb+M,GAAI,IACPxI,WAAYwI,EAAKxI,WAAWtB,KAAKC,GAC/BA,EAAMa,UAAY+I,GAAO9M,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEhBkD,GAAK,IACRK,MAAuB,QAAhBL,EAAMK,MAAkB,QAAU,QAE3CL,MAGR6J,MAGRzG,IAAc,EAAK,GAErB,CAACwF,KA0KGkB,GAAoB/I,IACxB,MAAMgJ,EAAYhJ,EAAUhB,KAAKiK,IAAG,CAClCC,SAAUD,EAAI9I,SACdgJ,UAAWF,EAAI5I,UAGjB,OADA7F,QAAQiB,IAAI,wBAAyBuN,GAC9BA,CAAS,EAGlBxO,QAAQiB,IAAI,2BAA4BuE,GACxC,MAAMoJ,IAAoBC,EAAAA,EAAAA,KACvBnH,GAAUA,EAAMlE,cAAcoL,qBAInCjP,EAAAA,EAAAA,YAAU,KACJiP,GAAkBhL,OAAS,GAC7BiE,IAAc,EAChB,GACC,CAAC+G,KAGF,MAAMnL,IAAoBoL,EAAAA,EAAAA,KACvBnH,GAAUA,EAAMlE,cAAcC,oBAEjCzD,QAAQiB,IAAI,oBAAqBwC,IAIjC,MAAMqL,IAAgBD,EAAAA,EAAAA,KACnBnH,GAAUA,EAAMlE,cAAcuL,oBAAoBD,gBAErD9O,QAAQiB,IAAI,2BAA4B6N,IAExC,MAAME,IAAcH,EAAAA,EAAAA,KACjBnH,GAAUA,EAAMlE,cAAcuL,oBAAoBE,cAErDjP,QAAQiB,IAAI,0BAA2B+N,IACvC,MAAME,IAAYL,EAAAA,EAAAA,KACfnH,GAAUA,EAAMlE,cAAcuL,oBAAoBI,YAErDnP,QAAQiB,IAAI,yBAA0BiO,IAEtC,MAAM5K,IAAUuK,EAAAA,EAAAA,KACbnH,GAAUA,EAAMlE,cAAcuL,oBAAoBK,YAErDpP,QAAQiB,IAAI,oBAAqBqD,IACjC,MAAM+K,IAAuBR,EAAAA,EAAAA,KAC1BnH,GAAUA,EAAMlE,cAAc6L,uBAEjCrP,QAAQiB,IAAI,yBAA0BoO,IACtC,MAAMC,IAAkBT,EAAAA,EAAAA,KACrBnH,GAAUA,EAAMlE,cAAc+L,gBAAgBD,kBAEjDtP,QAAQiB,IAAI,wBAAyBqO,IAErC,MAAME,IAAYX,EAAAA,EAAAA,KAAanH,GAAUA,EAAMlE,cAAcgM,YAEvDC,IAAYZ,EAAAA,EAAAA,KACfnH,GAAUA,EAAMlE,cAAc+L,gBAAgBE,YAEjDzP,QAAQiB,IAAI,wCAAyCwO,IAMrD,MAAMC,IAAcb,EAAAA,EAAAA,KACjBnH,GAAUA,EAAMlE,cAAc+L,gBAAgBI,eAEjD3P,QAAQiB,IAAI,oCAAqCyO,IAEjD,MAAME,IAAef,EAAAA,EAAAA,KAClBnH,GAAUA,EAAMlE,cAAc+L,gBAAgBM,wBAEjD7P,QAAQiB,IAAI,2BAA4B2O,IAExC,MAAME,IAAajB,EAAAA,EAAAA,KAChBnH,GAAUA,EAAMlE,cAAc+L,gBAAgBO,aAGjD9P,QAAQiB,IAAI,qBAAsB6O,IAElC,MAAMrK,IAASoJ,EAAAA,EAAAA,KACZnH,GAAUA,EAAMlE,cAAc+L,gBAAgB9J,SAEjDzF,QAAQiB,IAAI,qBAAsBwE,IAElC,MAAMsK,IAAkBlB,EAAAA,EAAAA,KACrBnH,GAAUA,EAAMlE,cAAc+L,gBAAgBQ,kBAEjD/P,QAAQiB,IAAI,uCAAwC8O,IACpD,MAAM9J,IAAS4I,EAAAA,EAAAA,KACZnH,GAAUA,EAAMlE,cAAc+L,gBAAgBtJ,SAEjDjG,QAAQiB,IAAI,6BAA8BgF,IAE1C,MAAM+J,IAAUnB,EAAAA,EAAAA,KACbnH,GAAUA,EAAMlE,cAAc+L,gBAAgBS,UAEjDhQ,QAAQiB,IAAI,mCAAoC+O,IAEhD,MAAMC,IAAiB7P,EAAAA,EAAAA,cAAY,KACjC,IAAIqP,EAAYT,GAAYxK,KAAK8J,GAC/BA,EAAKpI,MAAMtF,QAAQ,UAAW,MAGhC,MAAMsP,EACyB,IAA7BtB,GAAkBhL,OAAe4B,EAAYoJ,GAE/C,IAAIuB,EAAsB,IACrB,IAAIC,IACLF,EAAWG,SAAS/B,IAAI,IAAAgC,EAAA,OAAe,QAAVA,EAAAhC,EAAKzI,aAAK,IAAAyK,OAAA,EAAVA,EAAY9L,KAAK+L,GAAMA,EAAEvL,cAAc,EAAE,MAItEwL,EAAoBf,EACrBgB,QAAQhM,IAAW0L,EAAoBjN,SAASuB,KAChDD,KAAKC,IAAK,CAAQyB,MAAOzB,MAK5B,OAHAzE,QAAQiB,IAAI,4BAA6BuP,GAGlCf,EAAUjL,KAAKC,IAAK,CAAQyB,MAAOzB,KAAS,GAClD,CAACuK,GAAaxJ,EAAWoJ,GAAmBtK,KAGzCoM,GAAmBC,IACvB9D,EAAa8D,EAAY,EAU3B,GAPA3Q,QAAQiB,IAAI,kBAAmBuE,IAE/B7F,EAAAA,EAAAA,YAAU,KACJ6F,EAAU5B,QAAU,GACtBgJ,GAAagE,GAAYA,EAAU,GACrC,GACC,CAACpL,IACA/B,GAAkBoN,UAAYpN,GAAkBC,mBAAqB,IAADoN,GAAAC,GAClErJ,GAAQjE,GAAkBoN,SAAS,kBACnCG,GAAUvN,GAAkBoN,SAAkB,QAC9CtS,GAA2C,QAAvCuS,GAAGrN,GAAkBC,0BAAkB,IAAAoN,IAAM,QAANC,GAApCD,GAAsCjP,YAAI,IAAAkP,QAAN,EAApCA,GAA4CpN,MAAM,GAAGmH,WAGlE,MAAOmG,GAA2BC,KAChC3T,EAAAA,EAAAA,UAASqS,IACX5P,QAAQiB,IACN,0CACAgQ,KAEFtR,EAAAA,EAAAA,YAAU,KACRuR,GAA6BtB,IAChB,kBAATrR,GACF8O,GAAsByB,IAEtB/B,EAAiB6C,GACnB,GACC,CAACA,GAAcrR,GAAMuQ,MAExBnP,EAAAA,EAAAA,YAAU,KACK,kBAATpB,IACF4O,GAAc8C,KAChB,GACC,CAACA,GAAgB1R,MAoBpBoB,EAAAA,EAAAA,YAAU,KACK,kBAATpB,IACF4O,GAAcuC,GAChB,GACC,CAACA,GAAanR,KACjB,MAAM+I,GAAS1H,UAAsB,IAADuR,EAAAC,EAClC,IAAIC,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BtR,QAAQiB,IAAI,aAAcuE,GAC1BxF,QAAQiB,IAAI,oCAAqCgQ,IACjD,IAAIM,EAAa,GAEbC,EAAyBP,GAA0BzM,KAAKiN,IAC1D,IAAIC,GAAYnQ,EAAAA,EAAAA,GAAA,GAAQkQ,GAsCxB,OApCAjM,EAAUmM,SAASC,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAMnD,EAAYiD,EAAU/L,MAAMjF,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGImR,EAEL,QAFYF,EAAGpC,GAAUuC,MACvBC,GAAcA,EAAU/L,QAAU0L,EAAU/L,eAC9C,IAAAgM,OAAA,EAFeA,EAEbxQ,GAEH,GAAIqQ,EAAaxL,QAAU0L,EAAU/L,MAAO,EACxB6L,EAAa9K,KAAO,OAAS,SAG7BgL,EAAUjL,OACtB,MAAMuL,KAAKvD,IACb0C,EAAa,OAADc,OAAQxD,IAAkC,SAAnBiD,EAAUjL,KAC7CmL,EAASM,SAAQ,OAAAD,OAAUxD,GAC3BmD,EAASO,UAA+B,SAAnBT,EAAUjL,OAE/B0K,EAAa,GAADc,OAAIxD,EAAS,SAA6B,SAAnBiD,EAAUjL,KAC7CmL,EAASM,SAAQ,GAAAD,OAAMxD,EAAS,QAChCmD,EAASO,UAA+B,SAAnBT,EAAUjL,MAEjC+K,EAAa9K,KAA0B,SAAnBgL,EAAUjL,KAC9BmL,GAAQvQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHuQ,GAAQ,IACXzQ,GAAI0Q,EACJ7L,MAAO0L,EAAU/L,MACjByM,KAAM,WAERf,EAAWgB,KAAKT,GAEpB,KAEKJ,CAAY,IAIrBlM,EAAUmM,SAASC,IAKjB,IAJqBX,GAA0Be,MAC5CQ,GAAiBA,EAAatM,QAAU0L,EAAU/L,QAGlC,CAAC,IAAD4M,EACjB,MAAM9D,EAAYiD,EAAU/L,MAAMjF,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEImR,EAEL,QAFYU,EAAGhD,GAAUuC,MACvBC,GAAcA,EAAU/L,QAAU0L,EAAU/L,eAC9C,IAAA4M,OAAA,EAFeA,EAEbpR,GAEH,GAAI0Q,EAAS,CACX,IAAIW,EAAc,CAAErR,GAAI0Q,EAAS7L,MAAO0L,EAAU/L,OAC9CiM,EAAW,CAAC,EAChBR,EAAsBiB,KAAKR,GAEJ,SAAnBH,EAAUjL,MACR,MAAMuL,KAAKvD,IACb0C,EAAa,OAADc,OAAQxD,KAAe,EACnCmD,EAASM,SAAQ,OAAAD,OAAUxD,KAE3B0C,EAAa,GAADc,OAAIxD,EAAS,UAAU,EACnCmD,EAASM,SAAQ,GAAAD,OAAMxD,EAAS,SAElC+D,EAAY9L,MAAO,EACnBkL,EAASO,WAAY,IAErBK,EAAY9L,MAAO,EACnBkL,EAASO,WAAY,GAGvBb,EAAuBe,KAAKG,GAC5BZ,GAAQvQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHuQ,GAAQ,IACXzQ,GAAI0Q,EACJ7L,MAAO0L,EAAU/L,MACjByM,KAAM,QAERf,EAAWgB,KAAKT,EAClB,CACF,KAGF,IAAIa,EAAe,GACnB1B,GAA0BU,SAASa,IAIjC,IAH0BhN,EAAUxC,MACjC4O,GAAcA,EAAU/L,QAAU2M,EAAatM,QAE5B,CAAC,IAAD0M,EACpB,MAAMb,EAEL,QAFYa,EAAGnD,GAAUuC,MACvBa,GAAcA,EAAU3M,QAAUsM,EAAatM,eACjD,IAAA0M,OAAA,EAFeA,EAEbvR,GACC0Q,GACFY,EAAaJ,KAAKR,EAEtB,KAGFP,EAAyBA,EAAuBf,QAC7CoC,IAAeF,EAAazP,SAAS2P,EAAUxR,MAGlDrB,QAAQiB,IAAI,qCAAsC0R,GAIlD3S,QAAQiB,IAAI,mCAAoCuQ,GAChDxR,QAAQiB,IAAI,4BAA6BqQ,GACzCtR,QAAQiB,IAAI,iBAAkBoQ,GAC9BrR,QAAQiB,MAGR,MAAM6R,QAAeC,EAAAA,EAAAA,IACnB1B,EACAC,EACAE,EACAxB,GACoC,QAD7BmB,EACP1N,GAAkBC,0BAAkB,IAAAyN,GAAM,QAANC,EAApCD,EAAsCtP,YAAI,IAAAuP,OAAN,EAApCA,EAA4CzN,MAAM,GAAGkH,SACrD4E,GACAM,GACAxR,GACAoU,EACApB,EACAjC,IAGF,GAAIwD,EAAOE,QAAS,CAClBrF,IAAgB,GAChB3N,QAAQiB,IAAI,eAAgB6R,GACA,KAAxBA,EAAOG,cAA8C,MAAvBH,EAAOG,aACvChR,GAAiBiR,EAAAA,IAGjBhR,GH/kB8BiR,KACpC,IAAKA,EAAc,MAAO,qBAE1B,MAAMC,EAAcD,EACjBvQ,MAAM,MACN6N,QAAQ4C,GAAuB,KAAfA,EAAIlV,SAOvB,OACET,EAAAA,EAAAA,MAAA,OACEgH,MAAO,CACL4O,WAAY,OACZlO,OAAQ,OACRmO,SAAU,WACVC,aAAc,QACd5V,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aACRC,EAAAA,EAAAA,KAAA,UACEI,QAhBawV,KACjB,MAAMC,EAAaN,EAAY5O,KAAK6O,GAAG,KAAAlB,OAAUkB,KAAOM,KAAK,MAC7DC,UAAUC,UAAUC,UAAUJ,EAAW,EAerChP,MAAO,CACL6O,SAAU,WACVQ,MAAO,OACPC,IAAK,QACLC,WAAY,OACZC,OAAQ,OACR9O,OAAQ,UACR+O,SAAU,OACVrP,MAAO,QACPlH,UAEFC,EAAAA,EAAAA,KAACuW,EAAAA,IAAS,CAACjP,KAAM,QAEnBtH,EAAAA,EAAAA,KAAA,MAAAD,SACGwV,EAAY5O,KAAI,CAAC6O,EAAKgB,KACrBxW,EAAAA,EAAAA,KAAA,MAAAD,SAAiByV,GAARgB,SAGT,EGqiBaC,CAAsBxB,EAAOG,cAAe,CACzDsB,WAAW,IAGf,IAAIC,EAAW,GACf,GAAI1B,EAAO2B,UAAYC,OAAOC,KAAK7B,EAAO2B,UAAU7Q,OAAS,EAAG,CAC9D,IAAIgR,EHtnBL,SACLC,EACA/H,EACA0E,EACA9B,GA0BA,OAxBA1P,QAAQiB,IAAI,uBAAwB6L,GACpC9M,QAAQiB,IAAI,qBAAsByO,GAClCmF,EAASlD,SAASrD,IACE,QAAdA,EAAK/P,MAGPiT,EAAyBA,EAAuBf,QAC7ChM,GAAUA,EAAMyB,QAAUoI,EAAKpI,QAI7BwJ,EAAY1M,MAAMyB,GAAUA,EAAMyB,QAAUoI,EAAKpI,SACpDwJ,EAAY6C,KAAKjE,IAEI,WAAdA,EAAK/P,OAEdiT,EAAyBA,EAAuBhN,KAAKC,GACnDA,EAAMyB,QAAUoI,EAAKpI,OAAK3E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQkD,GAAK,IAAEmC,KAAM,UAAYnC,IAE/D,IAKK,CAAE+M,yBAAwB9B,cACnC,CGulBuBoF,CACbhC,EAAO2B,SACP3H,EACA0E,EACA9B,IAEF1P,QAAQiB,IAAI,eAAgB2T,GACxBA,IACFzH,GAAcyH,EAASlF,aAEvB8E,EAAWI,EAASpD,uBAExB,MACEgD,EAAWhD,EAGTgD,IAEFzH,EAAiByH,GACjBtD,GAA6BsD,IAI7BnH,IAAuB0H,GACrBA,EAAKvQ,KAAK8J,IAAI/M,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT+M,GAAI,IACPxI,WAAYwI,EAAKxI,WAAWtB,KAAKC,IAAKlD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjCkD,GAAK,IACRK,WAAOkQ,WAKjB,MACErH,IAAgB,GAChBzL,GAAe+S,EAAAA,GACjB,GAOFtV,EAAAA,EAAAA,YAAU,KACH6P,IACH9C,GACF,GACC,CAAC8C,GAAW9C,KAGf/M,EAAAA,EAAAA,YAAU,KACR8N,GAAkB4B,GAAqB,GACtC,CAACA,KAGJ,MAAM6F,IAAeC,EAAAA,EAAAA,UAAQ,IAEvB5P,EADY,kBAAThH,GACU6O,GACAN,EADoBvO,GAAMkH,KAE1C,CAAC2H,GAAoBN,EAAevO,GAAMkH,KAEvC2P,IAAkBD,EAAAA,EAAAA,UACtB,IHnxB+BjI,IAC5BA,EACEA,EAAW1I,KAAKC,IAAK,CAC1B,mBAAwB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOyB,QAAS,UAFb,GGkxBhBmP,CAAmBnI,KACzB,CAACA,KAEHlN,QAAQiB,IAAI,wCAAyCmU,IAGrD,MAAMvE,IAAWsE,EAAAA,EAAAA,UACf,IHr2BwB1R,KAC1B,IAAKA,IAAsBA,EAAkBoN,SAC3C,OAAO,KAGT,MAAMvC,EAAO7K,EAAkBoN,SAE/B,IAAIA,EAAW,CACb3K,MAAOoI,EAAKgH,OAAS,MACrB/W,KAAM+P,EAAKgE,MAAQ,MACnB,iBAAkBhE,EAAK,mBAAqB,MAC5CiH,MAAOjH,EAAKkH,OAAS,MACrB,4BAA6BlH,EAAK,8BAAgC,MAClEmH,YAAanH,EAAKmH,aAAe,MACjC,mBAAoBnH,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCoH,SACEpH,EAAKoH,UAAQ,GAAAvD,OA3DKwD,4DA4DA,+DAOtB,MAJkB,aAAdrH,EAAKgE,OACPzB,EAAS+E,IAAMtH,EAAKsH,KAAO,MAC3B/E,EAAS,cAAgBvC,EAAK,eAAiB,OAE1CuC,CAAQ,EG20BPgF,CAAYpS,KAClB,CAACA,KAEHzD,QAAQiB,IAAI4P,KAEZlR,EAAAA,EAAAA,YAAU,KAEK,kBAATpB,IAA4B+F,IAC9BwJ,IAAgB,EAClB,GACC,CAAC+C,GAAUrL,EAAWlB,GAAS/F,MAGlCoB,EAAAA,EAAAA,YAAU,KACJuV,GAAatR,QAAU,IACzB5D,QAAQiB,IAAI,kBAAmBiU,IAC/BrI,EAAaqI,IACbhH,GAAoB4H,KAAKC,MAAMD,KAAKE,UAAUd,MAC9CtI,GAAagE,GAAYA,EAAU,IACrC,GACC,CAACsE,MAEJvV,EAAAA,EAAAA,YAAU,KACRkO,KAAyBgD,GAAS,GACjC,CAACA,KAGJ,MAAM1H,IAAUgM,EAAAA,EAAAA,UACd,IH/yBwBc,EAAChQ,EAAQ1H,EAAM6F,EAAcC,EAAkBC,KACzEtE,QAAQiB,IAAI,iBAAkB1C,GACjB,kBAATA,EACK,CACL,CAAE2I,YAAa,WAAYC,OAAQ,aACnC,CACED,YAAa,QACbC,OAAQ,QACR+O,KAAMC,IAAc,IAAb,IAAE1H,GAAK0H,EACZ,MAAMC,EAAY3H,EAAI4H,SAASxQ,MACzByQ,EAAcC,MAAMC,QAAQJ,GAC9BA,EAAU5R,KAAI+L,GAAKA,EAAEvL,WAAauL,EAAErK,OAAS,KAAIyN,KAAK,MACtD,MAEJ,OACE9V,EAAAA,EAAAA,KAAA,QAAMqI,MAAOoQ,EAAY1Y,UACvBC,EAAAA,EAAAA,KAACoG,EAAa,CACZC,OAAQkS,EACRjS,OAAQsK,EAAI4H,SAAStQ,OACrB3B,aAAcA,EACdC,kBAAmBA,EACnBC,QAASA,KAEN,IAOV,CACL,CAAE4C,YAAa,QAASC,OAAQ,SAChC,CAAED,YAAa,MAAOC,OAAQ,OAC9B,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,gBAAiBC,OAAQ,iBACxC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,kBAAmBC,OAAQ,UAC1C,CACED,YAAa,OACbC,OAAQ,QAGV,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,gBGgwB/B8O,CAAahQ,EAAQ1H,GAAM6F,GAAcC,GAAkBC,KACjE,CAAC2B,GAAQ1H,GAAM6F,GAAcC,GAAkBC,KAG3CmD,IAAe0N,EAAAA,EAAAA,UAAQ,IAAMlO,GAAe,KAuClDtH,EAAAA,EAAAA,YAAU,KACRK,QAAQiB,IAAI,mCAAoC,CAC9CmB,UACAiN,wBACAG,cACA,GACD,CAACpN,EAASiN,GAAsBG,KA4EnC,OAFAxP,QAAQiB,IAAI,eAAgB0G,KAG1BjK,EAAAA,EAAAA,MAAA6G,EAAAA,SAAA,CAAA3G,SAAA,CAIG8P,KAAgB7P,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,KAExBnG,EAAAA,EAAAA,KAAC4Y,EAAAA,EAAiB,CAChB7N,KAAMkD,EACNjD,OAAQA,IAAMkD,GAAqB,GACnC2K,UAAW9W,UACTmM,GAAqB,QAjzBLnM,WAAa,IAAD+W,EAAAC,EAClC,MAAMC,QAAyBC,EAAAA,EAAAA,KACzB5H,GAAS3N,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACbsV,GAGL7W,QAAQiB,IAAI,qCAEZ,MAAM8V,EAAiBnI,GAAkBpK,KAAKiK,GAAQA,EAAI5I,QACpDmR,EAAgBD,EAAevS,KAAK0B,IAAK,CAAQA,YAEjD+Q,EAAmBzR,EAAUiL,QAChChC,IAASsI,EAAe7T,SAASuL,EAAI5I,SAGpCoR,IACFpK,EAAaoK,GACbrK,GAAagE,GAAYA,EAAU,KAGrCzD,IAAe+J,GAAqB,IAC/BA,KACAF,KAGLrL,EAA6B,gCAE7B,MAAMwL,EAA+C,IAA5BF,EAAiBrT,OAGxC,GAFF5D,QAAQiB,IAAI,mBAAoBkW,GAChCnX,QAAQiB,IAAI,iBAAkB6O,IACxBqH,IAAqBrH,GAAY,CAAC,IAADsH,EAAAC,QACPC,EAAAA,EAAAA,GAASpI,EAAW3Q,GAA0C,QAAtC6Y,EAAE3T,GAAkBC,0BAAkB,IAAA0T,GAAM,QAANC,EAApCD,EAAsCvV,YAAI,IAAAwV,OAAN,EAApCA,EAA4C1T,MAAM,GAAGkH,UAC1GkD,IAASwJ,EAAAA,EAAAA,KAAkBhW,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACzB+B,EAAAA,EAAMC,WAAWC,cAAc+L,iBAAe,IACjDO,YAAY,KAEhB,OAGI0H,EAAAA,EAAAA,IACJ/H,GACAuH,EACoC,QADvBL,EACblT,GAAkBC,0BAAkB,IAAAiT,GAAM,QAANC,EAApCD,EAAsC9U,YAAI,IAAA+U,OAAN,EAApCA,EAA4CjT,MAAM,GAAGkH,SACrDtM,GACD,EAqwBWkZ,EAAiB,KAKzBjI,KAAcpN,IAAYoL,KAC1B3P,EAAAA,EAAAA,KAAA,OACE6G,MAAO,CACLoF,OAAQ,OACRlF,QAAS,OACT8S,cAAe,SACfC,eAAgB,gBAChBpE,SAAU,YACV3V,UAEFC,EAAAA,EAAAA,KAAC+Z,EAAoB,CACnBtO,sBAt+BsB3K,KAC7BkZ,EAAAA,EAAAA,IACClZ,EACA8N,EACAF,EACArK,GACAD,GACAoK,EACAY,EACAM,GACAD,IACAwK,SAAQ,KACRnK,IAAgB,EAAM,GACtB,EA09BMpE,aAAcA,GACdC,oBAAqBA,GACrBC,aA9EW7J,UACnB,GAAKwM,EAAL,CAKAuB,IAAgB,GAGhB,UACQoK,EAAAA,EAAAA,IACJ3L,EACAT,EACAC,EAEJ,CAAE,MAAO7L,GACPC,QAAQD,MAAM,yBAA0BA,EAC1C,CAAC,QACC4N,IAAgB,EAClB,CAGAJ,IAA0B,EAlB1B,MAFErL,GAAe,uDAoBc,EAyDvBwH,uBAAwBA,GACxBC,YA3GUA,KAElB0C,EAAiB,MACjBY,EAAiB,MACjBR,EAAoB,IACpBF,GAAmB,GACnBM,EAAa,IACbM,GAAc,IACdE,GAAsB,IACtBN,EAAiB,IACjBmE,GAA6B,IAC7BtE,EAAY,GAEZU,IAAuB,GAGnB/D,GAAanK,UACfmK,GAAanK,QAAQX,MAAQ,IAI/B8O,IAA0B,EAAK,MAqK5BiC,KACC9R,EAAAA,EAAAA,MAAA6G,EAAAA,SAAA,CAAA3G,SAAA,CAEGwE,IAAWvE,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,KACnBnG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qCAAoCC,UACjDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAAC+L,EAAAA,EAAK,CACJG,IAAI,+DACJC,IAAI,YACJrM,UAAU,YACVM,QAlPQ+Z,KACtBtL,IAEAqB,IAASkK,EAAAA,EAAAA,KAAa,IACtBlK,IACEmK,EAAAA,EAAAA,IAAqB,CACnBrH,SAAU,CAAC,EACXsH,cAAe,GACfC,SAAU,GACV1U,mBAAoB,MAGxBqK,IACEwJ,EAAAA,EAAAA,IAAmB,CACjB9H,UAAW,GACXI,sBAAuB,GACvBF,aAAc,GACdI,gBAAiB,GACjB9J,QAAQ,EACR+J,QAAS,CAAC,EACVV,gBAAiB,GACjB7J,OAAQ,CAAC,KAGbsI,IACEsK,EAAAA,EAAAA,IAAuB,CACrBvJ,cAAe,GACfG,YAAa,GACbG,WAAW,EACXD,UAAW,CAAC,KAIhBtC,EAAa,IACbgB,IAAuB,EAAM,MAoNlBgD,KACChT,EAAAA,EAAAA,KAACya,EAAAA,EAAmB,CAClBzW,KAAMgP,GACN0H,WAAW,yBAOlB/K,IACC3P,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,OAGTnG,EAAAA,EAAAA,KAAA0G,EAAAA,SAAA,CAAA3G,UACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAC2a,EAA+B,CAC9BhR,WAAY4N,GACZ3N,aAAcA,GACdxB,OAAQA,GACRmB,WA/2BIxH,UASlB,GARAuM,GAAiB,GACjBnM,QAAQiB,IAAI,gBAAiBY,GAC7B7B,QAAQiB,IAAI,gCAAiCuE,GAC7CxF,QAAQiB,IAAI,0BAA2BY,GACvC7B,QAAQiB,IAAI,mBAAoB6N,IAEhClC,GAAagE,GAAYA,EAAU,IAEtB,kBAATrS,GACFyB,QAAQiB,IAAI,gCAEZoM,IAAuB0H,GACdA,EAAKvQ,KAAKiK,IAKf,KAH+B,IAA7BG,GAAkBhL,QAClBgL,GAAkB5L,MAAMyV,GAAMA,EAAE1S,SAAW0I,EAAI1I,UAE9B,OAAO0I,EAE1B,MAAMiK,EAAW5J,GAAckD,MAAMyG,GAAMA,EAAE1S,SAAW0I,EAAI1I,SACtD4S,GAAsB,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAU5S,aAAc,GACtC8S,EAAiBnK,EAAI3I,YAAc,GAEnC+S,EAAwBD,EAAepU,KAAKsU,GAE9CxU,IACAzC,EAAKqB,SAAS4V,EAAG9T,UAAU7G,SAC3Bwa,EAAY3V,MACT+V,GAAOA,EAAG/T,UAAU7G,SAAW2a,EAAG9T,UAAU7G,UAGzBoD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQuX,GAAE,IAAEhU,MAAO,QAAUgU,IAGjDE,EAAiB,GA+BvB,OA7BAnX,EAAK8P,SAAShD,IACZ,MAAMsK,EAAejK,GAAYgD,MAAMvN,GACdA,EAAMyB,MAC1BtF,QAAQ,YAAa,IACrBzC,SACuBwQ,EAAUxQ,SAGtC,IAAK8a,EAAc,OAEnB,MAAMC,EAAgBP,EAAY3V,MAC/B+V,GAAOA,EAAG/T,UAAU7G,SAAWwQ,EAAUxQ,SAGtBya,EAAe5V,MAClC8V,GAAOA,EAAG9T,UAAU7G,SAAWwQ,EAAUxQ,UAI1C6a,EAAezG,MAAIhR,EAAAA,EAAAA,GAAC,CAClByD,UAAW2J,EACXrJ,QAAS2T,EAAa5X,GACtB4D,eAAgB,WAEZiU,EAAgB,CAAEpU,MAAO,OAAU,CAAEA,MAAO,UAEpD,KAGFvD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKkN,GAAG,IACN3I,WAAY,IAAI+S,KAA0BG,IAAe,UAI1D,CACLrL,IAAgB,GAChB3N,QAAQiB,IAAI,yCAIZ,IAAK,IAADkY,EAAAC,EACF,MAAM,YAAEC,EAAW,aAAEpG,SAAuBqG,EAAAA,EAAAA,IAC1CzX,EACA4N,GACoC,QAD3B0J,EACT1V,GAAkBC,0BAAkB,IAAAyV,GAAM,QAANC,EAApCD,EAAsCtX,YAAI,IAAAuX,OAAN,EAApCA,EAA4CzV,MAAM,GAAGkH,SACrDtM,GACA+Q,GACAS,GACAiB,IAEFhR,QAAQiB,IAAI,kCAAmCoY,GAC/CrZ,QAAQiB,IAAI,mCAAoCgS,GAGhD,MAAMsG,EAAgBF,EAAY7U,KAC/B8J,IAAI,IAAAkL,EAAA,OAAyD,QAAzDA,EAAK/J,GAAUuC,MAAMvN,GAAUA,EAAMpD,KAAOiN,EAAKmL,iBAAQ,IAAAD,OAAA,EAApDA,EAAsDtT,KAAK,IAEvElG,QAAQiB,IAAI,kBAAmBsY,GAG/B,MAAMG,EAAc7X,EAAK4O,QACtBhM,IAAW8U,EAAcrW,SAASuB,EAAMyB,SAErCyT,EAAgB9X,EAAK4O,QAAQhM,GACjC8U,EAAcrW,SAASuB,EAAMyB,SAE/BlG,QAAQiB,IAAI,gBAAiByY,GAC7B1Z,QAAQiB,IAAI,kBAAmB0Y,GAG3BA,EAAc/V,OAAS,IAErBqP,GACFrH,EAA2BqH,EAAc,CAEvC,GAIJjT,QAAQiB,IAAI,mCAAoCgS,IAIlD9F,IAAeyM,GAAmB,IAC7BA,KACAD,EAAcnV,KAAKC,IAAK,CAAQyB,MAAOzB,EAAMyB,aAI9CwT,EAAY9V,OAAS,IACvBiJ,GAAckI,GAAS,IAClB2E,EAAYlV,KAAIqV,IAAA,IAAC,MAAE3T,GAAgB2T,EAANC,GAAIC,EAAAA,EAAAA,GAAAF,EAAAG,GAAA,OAAAzY,EAAAA,EAAAA,GAAA,CAClCsE,MAAOK,GACJ4T,EAAI,OAEN/E,KAELnI,GAAagE,GAAYA,EAAU,IACnCjF,EAA6B,8BAC7B9D,IAAc,GAElB,CAAE,MAAO9H,GACPC,QAAQD,MAAM,6BAA8BA,GAC5C6L,EAA2B,0CAC7B,CAAC,QAEC+B,IAAgB,EAClB,CACF,GA8tBctG,WA3tBMxF,IACpB7B,QAAQiB,IAAI,mCAAoCY,GAChD,MAAMoV,EAAmB7B,GAAgB3E,QACtChC,IACE5M,EAAKmQ,MAAMiI,GAAgBA,IAAgBxL,EAAI,uBAGpD,GADAzO,QAAQiB,IAAI,mCAAoCgW,GAC5CA,EAAkB,CACpB,MAAMiD,EAAkBjD,EAAiBzS,KAAK8J,IAAI,CAChDpI,MAAOoI,EAAK,uBAGdtO,QAAQiB,IAAIiZ,GACZ/M,GAAc+M,EAChB,GA8sBc5S,OA3kCG1H,UAMjB,GALAI,QAAQiB,IAAI,sCAAuCuE,GAEnD+I,GAAiB/I,GACjBmI,IAAgB,GAEH,kBAATpP,GACF,IAAgB,IAAZ+F,GAAkB,CACpBtE,QAAQiB,IAAI,gCACZ,MAAM2T,QAAiBuF,EACrB3U,EACA/B,GACAqL,IAIF,GADA9O,QAAQiB,IAAI,8BAA+B2T,GACvCA,EAAU,CACZ,MAAMwF,EAAmB5U,EAAUhB,KAAKoN,IACtC,MAAMyI,EAAevL,GAAckD,MAChC1D,GAASA,EAAKvI,SAAW6L,EAAU7L,SAGtC,MAAO,CACLA,OAAQ6L,EAAU7L,OAClBuU,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzB3U,UAAWgM,EAAUjM,SACrBG,WAAY8L,EAAU/L,MAAMrB,KAAItH,IAAA,IAAC,UAAE8H,EAAS,QAAEM,GAASpI,EAAA,MAAM,CAC3D8H,YACAM,UACD,IACF,IAGHyI,IAASyM,EAAAA,EAAAA,IAAiBJ,IAE1BzM,IAAgB,EAClB,MACE3N,QAAQQ,KAAK,2BACbmN,IAAgB,EAEpB,KAAO,CACL3N,QAAQiB,IAAI,8BAEZ,MAAM2T,QAAiB6F,EACrBjV,EACA/B,GACAqL,IAIF,GADA9O,QAAQiB,IAAI,8BAA+B2T,GACvCA,EAAU,CAAC,IAAD8F,EAAAC,EACZ,MAAMP,EAAmB5U,EAAUhB,KAAKoN,IACtC,MAAMyI,EAAevL,GAAckD,MAChC1D,GAASA,EAAKvI,SAAW6L,EAAU7L,SAGtC,MAAO,CACLA,OAAQ6L,EAAU7L,OAClBuU,SAAsB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcC,SACxBC,UAAuB,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EAAcE,UACzB3U,UAAWgM,EAAUjM,SACrBG,WAAY8L,EAAU/L,MAAMrB,KAAI2R,IAAA,IAAC,UAAEnR,EAAS,QAAEM,GAAS6Q,EAAA,MAAM,CAC3DnR,YACAM,UACD,IACF,IAGHyI,IAASyM,EAAAA,EAAAA,IAAiBJ,IAG1B,MAAMQ,EAC+D,QADnDF,EAChBpX,EAAAA,EAAMC,WAAWC,cAAcC,kBAAkBC,0BAAkB,IAAAgX,GAC3D,QAD2DC,EAAnED,EACI7Y,YAAI,IAAA8Y,OAD2D,EAAnEA,EACUhX,MACI,OAAZiX,QAAY,IAAZA,GAAAA,EAAchX,cACVC,EAAAA,EAAAA,GAAkB+W,EAAc7Y,IAGxC4L,IAAgB,EAClB,MACE3N,QAAQQ,KAAK,2BACbmN,IAAgB,EAEpB,YAEMrG,GAAO9B,EACf,EAq/Bc+B,SAn/BK3H,UAKnB,GAHAI,QAAQiB,IAAI,iBAAkB1C,IAC9ByB,QAAQiB,IAAI,0BAA2B+K,GAE1B,kBAATzN,GAGF,OAFAyB,QAAQiB,IAAI,4CACZ6M,IAAiBiH,IAAUA,IAO7B,GAF0B,CAAC,eAAgB,gBAErB7R,SAAS3E,MAAUyN,EACvC,OAAK4C,IAAkD,IAA7BA,GAAkBhL,YAI5CmI,GAAqB,QAHnBH,EAA2B,6CAM/B,GAAIgD,GAAkBhL,OAAS,EAAG,CAAC,IAADiX,EAAAC,EAChC9a,QAAQiB,IAAI,uBAAwB2N,IACpC5O,QAAQiB,IAAI,4CAA6CuE,GAEzD,MAAMuR,EAAiBnI,GAAkBpK,KAAKiK,GAAQA,EAAI5I,QAC1D7F,QAAQiB,IAAI,mBAAoB8V,GAChC,MAAMC,EAAgBD,EAAevS,KAAK0B,IAAK,CAC7CA,MAAOA,MAETlG,QAAQiB,IAAI,kBAAmB+V,GAC/B,MAAMC,EAAmBzR,EAAUiL,QAChChC,IAASsI,EAAe7T,SAASuL,EAAI5I,SAExC7F,QAAQiB,IAAI,kBAAmByP,IAC3BA,KACF7D,EAAaoK,GACbpP,IAAc,GACd+E,GAAagE,GAAYA,EAAU,KAKrCzD,IAAe+J,GAAqB,IAC/BA,KACAF,KAGLrL,EAA6B,sCACvB6L,EAAAA,EAAAA,IAAkB/H,GAAWuH,EAAkD,QAArC6D,EAACpX,GAAkBC,0BAAkB,IAAAmX,GAAM,QAANC,EAApCD,EAAsChZ,YAAI,IAAAiZ,OAAN,EAApCA,EAA4CnX,MAAM,GAAGkH,SAAStM,GACjH,GAi8BcmJ,MAAOA,GACPnJ,KAAMA,GACN+F,QAASA,GACTmB,OAAQA,GACRkC,WAAYA,GACZC,SAnLKmT,KACnBlO,EAAaiJ,KAAKC,MAAMD,KAAKE,UAAU/H,MACvCpB,EAAaoB,IACbpG,IAAc,GACdwF,GAAsByB,IACtBhB,IAAgB,GAEH,kBAATvP,IACF8O,IAAuB0H,GACrBA,EAAKvQ,KAAK8J,IAAI/M,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT+M,GAAI,IACPxI,WAAYwI,EAAKxI,WAAWtB,KAAKC,IAAKlD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjCkD,GAAK,IACRK,WAAOkQ,WAIf,EAmKcnN,cAAeA,MAEjBhK,EAAAA,EAAAA,KAACmd,EAAAA,EAAa,CAEZnZ,KAAM2D,EACN2D,QAASA,GAEToP,WAAW,2BAJN5L,YAgBjB9O,EAAAA,EAAAA,KAACod,EAAAA,EAAkB,CACjBrS,KAAM0D,EACNzD,OAAQA,IAAM0D,GAAmB,GACjC2O,OAAQ1O,MAET,EAMM2N,EAAgCva,MAC3C4F,EACA/B,EACAqL,KACI,IAADqM,EAAAC,EAAAC,EACH,MAAMC,GACgC,QAApCH,EAAA1X,EAAkBC,0BAAkB,IAAAyX,GAAM,QAANC,EAApCD,EAAsCtZ,YAAI,IAAAuZ,GAAO,QAAPC,EAA1CD,EAA4CzX,aAAK,IAAA0X,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDxK,EAAWpN,EAAkBoN,UAAY,CAAC,EAE1C0K,EAAU,CACdC,QAAS3K,EAASyE,MAClBmG,KAAMH,EAAWzQ,SACjB6Q,eAAgB7K,EAAS8K,aACzBC,cAAe/K,EAAS,uBACxBgL,QAAS,WACTC,MAAOtW,EAAUhB,KAAK8J,IACpB,MAAMyN,EAAYjN,EAAckD,MAAMgK,GAAOA,EAAGjW,SAAWuI,EAAKvI,SAEhE,MAAO,CACLA,OAAQuI,EAAKvI,OACbuU,UAAmB,OAATyB,QAAS,IAATA,OAAS,EAATA,EAAWzB,WAAY,eACjCC,WAAoB,OAATwB,QAAS,IAATA,OAAS,EAATA,EAAWxB,YAAa,UACnC3U,UAAW0I,EAAK3I,SAChBG,WAAYwI,EAAKzI,MAAM4K,QAAQhM,GAAUA,EAAMK,QAC5CN,KAAKC,IACJ,MAAM,MAAEK,GAAmBL,EAATqV,GAAIC,EAAAA,EAAAA,GAAKtV,EAAKwX,GAChC,OAAA1a,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKuY,GAAI,IACPoC,UAAqB,UAAVpX,EAAoB,MAAQ,OAAK,IAGnD,KAGL9E,QAAQiB,IAAI,4BAA6Bsa,GAIzC,IAEE,aADuBY,EAAAA,EAAAA,IAAU,OAHjC,gFAGkDZ,EAEpD,CAAE,MAAOxb,GAEP,MADAC,QAAQD,MAAM,+BAAgCA,GACxCA,CACR,GAGW0a,EAAmB7a,MAC9B4F,EACA/B,EACAqL,KACI,IAADsN,EAAAC,EAAAC,EACH,MAAMhB,GACgC,QAApCc,EAAA3Y,EAAkBC,0BAAkB,IAAA0Y,GAAM,QAANC,EAApCD,EAAsCva,YAAI,IAAAwa,GAAO,QAAPC,EAA1CD,EAA4C1Y,aAAK,IAAA2Y,OAAb,EAApCA,EAAoD,KAAM,CAAC,EACvDzL,EAAWpN,EAAkBoN,UAAY,CAAC,EAE1C0K,EAAU,CACdC,QAAS3K,EAASyE,MAClBmG,KAAMH,EAAWzQ,SACjB6Q,eAAgB7K,EAAS8K,aACzBC,cAAe/K,EAAS,uBACxBgL,QAAS,WACTC,MAAOtW,EAAUhB,KAAK8J,IAAU,IAADiO,EAC7B,MAAMR,EAAYjN,EAAckD,MAAMgK,GAAOA,EAAGjW,SAAWuI,EAAKvI,SAIxDsU,EAAevL,EAAckD,MAAMwK,GAAOA,EAAGzW,SAAWuI,EAAKvI,SAG/DoR,GACQ,OAAZkD,QAAY,IAAZA,GAAwB,QAAZkC,EAAZlC,EAAcvU,kBAAU,IAAAyW,OAAZ,EAAZA,EAA0B3Y,QAAS,GACnCyW,EAAavU,WAAW2W,OAAOC,GAC7BpO,EAAKzI,MAAM7C,MACRyB,GACCA,EAAMa,UAAYoX,EAAcpX,SAChB,QAAhBb,EAAMK,UAGN6X,EAAuB,OAATZ,QAAS,IAATA,OAAS,EAATA,EAAWY,YACjC,MAAO,CACL5W,OAAQuI,EAAKvI,OACbuU,UAAmB,OAATyB,QAAS,IAATA,OAAS,EAATA,EAAWzB,WAAY,eACjCC,WAAoB,OAATwB,QAAS,IAATA,OAAS,EAATA,EAAWxB,YAAa,UACnC3U,UAAW0I,EAAK3I,SAChBiX,UAAmB,OAATb,QAAS,IAATA,OAAS,EAATA,EAAWa,WAAY,MACjCC,mBAAmBF,IAAexF,GAClCrR,WAAYwI,EAAKzI,MAAMrB,KAAKC,IAAW,IAADqY,EACpC,MAAMzC,EAAevL,EAAckD,MAChCwK,GAAOA,EAAGzW,SAAWuI,EAAKvI,SAEvBgX,EAA4B,OAAZ1C,QAAY,IAAZA,GAAwB,QAAZyC,EAAZzC,EAAcvU,kBAAU,IAAAgX,OAAZ,EAAZA,EAA0B9Z,MAC7CuN,GAAMA,EAAEjL,UAAYb,EAAMa,UAGvB0X,EAA8B,UAAhBvY,EAAMK,MACpBmY,EAAiC,QAAhBxY,EAAMK,MAG7B,OAAIiY,GAAiBE,EACZ,CACLjY,UAAWP,EAAMO,UACjBM,QAASb,EAAMa,QACf4W,UAAW,UAKXa,IAAkBE,EACb,CACLjY,UAAWP,EAAMO,UACjBM,QAASb,EAAMa,QACf4W,UAAW,KAKVa,GAAiBE,EACb,MAIJF,GAAiBC,EACb,CACLhY,UAAWP,EAAMO,UACjBM,QAASb,EAAMa,QACf4W,UAAW,OAIR,IAAI,IACVzL,OAAOyM,SACX,KAILld,QAAQiB,IAAI,sCAAuCsa,GAKnD,IAEE,aADuBY,EAAAA,EAAAA,IAAU,OAHjC,qFAGkDZ,EAEpD,CAAE,MAAOxb,GAEP,MADAC,QAAQD,MAAM,+BAAgCA,GACxCA,CACR,GC12CF,IAAIod,EAAO,KAuFI,SAAS,IAGtB,GAAIhc,OAAOC,OAAQ,CAGjB,IAAIgc,GAAe,EAEnBjc,OAAOC,OAAOmB,SAAS,UAAU,KAC3B6a,EACFpd,QAAQQ,KACN,+EAIJ4c,GAAe,EArGrB,WAAkB,IAAD7c,EAAA8c,EACfC,UAAU,CAAC,+BAAgCC,IACzCpc,OAAOoc,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbjd,EAAAY,OAAOC,cAAM,IAAAb,GAAM,QAAN8c,EAAb9c,EAAekd,YAAI,IAAAJ,OAAN,EAAbA,EAAqBK,cAAc,WACnCzS,SAAS0S,eAAe,QAGrBH,IACHA,EAAcvS,SAASC,cAAc,OACrCsS,EAAYnc,GAAK,OACbF,OAAOC,QAAUD,OAAOC,OAAOqc,KACjCtc,OAAOC,OAAOqc,KAAKG,YAAYJ,GAG/BvS,SAASwS,KAAKG,YAAYJ,IAOzBL,IAEHA,EAAOU,EAAAA,WAAoBL,IAK7BL,EAAKW,QACHpgB,EAAAA,EAAAA,MAACqgB,EAAAA,GAAQ,CAACza,MAAOA,EAAAA,EAAM1F,SAAA,EACrBC,EAAAA,EAAAA,KAACiE,EAAe,KAChBjE,EAAAA,EAAAA,KAAC6N,EAAe,KAChB7N,EAAAA,EAAAA,KAACmgB,EAAAA,GAAc,OAMrB,CAiEMC,GAAO,GAEX,MACEje,QAAQD,MACN,sEAGN,EArEA,WA2BE,GAAIoB,OAAO+c,QAAU/c,OAAO+c,OAAOjT,SAAU,CAC3C,IAAIkT,EAAiBhd,OAAO+c,OAAOjT,SAASC,cAAc,UAC1DiT,EAAeC,YA1BE,y1BA2BjBjd,OAAO+c,OAAOjT,SAASwS,KAAKG,YAAYO,EAE1C,MACEne,QAAQQ,KAAK,qFAEjB,CAGA6d,E","sources":["components/SearchInput/SearchInput.jsx","hooks/useInterComSearch.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant,isMFGCA) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n                isMFGCA={isMFGCA}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n        if (setHasChanges) setHasChanges(true); // ✅ NEW\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n    {hasChanges && (\r\n      <button\r\n        className=\"btn btn-outline-secondary btn-lg m-2\"\r\n        onClick={onCancel}\r\n      >\r\n        Cancel\r\n      </button>\r\n    )}\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/PlantAssignment/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [shouldTriggerRemove, setShouldTriggerRemove] = useState(false);\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled,\r\n      setIsFileInputDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    // setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    \r\n    console.log(\"Type value is:\", type);\r\n    console.log(\"shouldTriggerRemove is:\", shouldTriggerRemove);\r\n    // ✅ CASE 1: For 'Change Action', simply toggle remove mode\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n      return; // ⛔ Exit here, don’t proceed to any further logic\r\n    } \r\n\r\n    // ✅ CASE 2: For Raw_Material or Physical Product (confirmation modal needed)\r\n    const confirmationTypes = [\"Raw_Material\", \"VPMReference\"];\r\n\r\n    if (confirmationTypes.includes(type) && !shouldTriggerRemove) {\r\n      if (!selectedTableRows || selectedTableRows.length === 0) {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n        return;\r\n      }\r\n      setShowConfirmRemove(true);\r\n      return;\r\n    }\r\n    if (selectedTableRows.length > 0) {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setHasChanges(true); // ✅ ADD THIS LINE\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n      //added by ayush\r\n      showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n      await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n    }\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n  \r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n  \r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n  \r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  \r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n  \r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    const allPlantsRemoved = updatedTableData.length === 0;\r\n    console.log(\"allPlantsRemoved\", allPlantsRemoved);\r\n    console.log(\"hasNoClassData\", hasNoClass);\r\n      if (allPlantsRemoved && !hasNoClass) {\r\n        const allPlantsData = await noPlants(CAHeaders, type, droppedObjectData.initialDraggedData?.data?.items[0].objectId);\r\n         dispatch(setPlantObjectData({\r\n          ...store.getState().droppedObject.plantObjectData,\r\n          hasNoClass: true\r\n      }));\r\n      }\r\n\r\n\r\n    await handleRemoveData(\r\n      allPlants,\r\n      removedTitles,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type\r\n    );\r\n  };\r\n  \r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n      setHasChanges(true); // ✅ ADD HERE\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n          setHasChanges(true); // ✅ ADD HERE\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\nuseEffect(() => {\r\n  if (selectedTableRows.length > 0) {\r\n    setHasChanges(true);\r\n  }\r\n}, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const hasNoClass = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.hasNoClass\r\n  );\r\n\r\n  console.log(\"The HasNoClass is:\", hasNoClass);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant,isMFGCA),\r\n    [CAName, type, isRemoveMode, handleRemovePlant,isMFGCA]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  \r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n    />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n\r\n      // ✅ Fix: move this lookup outside loop\r\n        const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n\r\n      // ✅ Fixed logic to check if all originally assigned plants are removed\r\n      const allPlantsRemoved =\r\n        originalItem?.ItemPlants?.length > 0 &&\r\n        originalItem.ItemPlants.every((originalPlant) =>\r\n          item.Plant.some(\r\n            (plant) =>\r\n              plant.PlantID === originalPlant.PlantID &&\r\n              plant.color === \"red\"\r\n          )\r\n        );\r\n        const hasNoPlants = caDetails?.hasNoPlants;\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        AllPlantsRemoved: !hasNoPlants && allPlantsRemoved ? true : false,\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","onSearch","disabled","searchText","setSearchText","useState","inputRef","useRef","_jsxs","className","children","_jsx","FontAwesomeIcon","icon","faMagnifyingGlass","onClick","handleSearchIconClick","trim","InputGroup","Form","Control","type","ref","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","current","focus","useInterComSearch","socket","setSocket","InterCom","setInterCom","useEffect","async","interComInstance","loadInterCom","error","console","loadData","disconnect","performSearch","useCallback","searchOpts","onObjectsSelected","_window$widget","warn","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","log","widgetId","window","widget","id","finalSearchOpts","_objectSpread","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","data","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","length","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","isMFGCA","_Fragment","map","plant","style","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","PlantID","getTableData","tableData","CAData","mappedData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","CAName","title","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","sort","a","b","localeCompare","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","state","hasChanges","onCancel","setHasChanges","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","show","onHide","footerButtons","label","_availablePlantRef$cu","addPlant","AvailablePlant","columns","addedItem","newItems","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","Image","width","height","src","alt","SearchInput","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","class","link","document","createElement","href","download","click","Group","controlId","multiple","faRotateLeft","PlantAssignment","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","shouldTriggerRemove","setShouldTriggerRemove","isAddingPlant","setIsAddingPlant","validatedData","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","initialTableData","setInitialTableData","securityContext1","getValue","plantId","item","extractPlantData","plantData","row","itemName","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAHeaders","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","hasNoClass","productChildren","headers","getUniquePlant","sourceData","assignedTablePlants","Set","flatMap","_item$Plant","p","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in9","_droppedObjectData$in10","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in11","_droppedObjectData$in12","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","forEach","tableItem","_allPlants$find2","finalObj","classid","find","classitem","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","formattedFinalMessage","autoClose","finalobj","ErrorObj","Object","keys","response","errorObj","processErrorObj","prev","undefined","MSG_SAVE_FAILURE","newTableData","useMemo","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","process","EIN","getCardData","JSON","parse","stringify","tableColumns","cell","_ref2","plantList","original","tooltipText","Array","isArray","ConfirmationModal","onConfirm","_droppedObjectData$in5","_droppedObjectData$in6","csrfTokenHeaders","fetchCsrfToken","selectedTitles","removedTitles","updatedTableData","prevUniquePlants","allPlantsRemoved","_droppedObjectData$in3","_droppedObjectData$in4","noPlants","setPlantObjectData","handleRemoveData","confirmedRemove","flexDirection","justifyContent","DragAndDropComponent","handleFileChange","finally","processManufacturingCA","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","matchedPlant","existsInRedux","_droppedObjectData$in7","_droppedObjectData$in8","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","_ref3","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","handleCancel","ReusableTable","ContentErrorsModal","errors","_droppedObjectData$in13","_droppedObjectData$in14","_droppedObjectData$in15","objectData","payload","CATitle","CAId","CAOrganization","organization","CACollabSpace","CAOwner","Items","caDetails","ca","_excluded2","PlantType","fetchData","_droppedObjectData$in16","_droppedObjectData$in17","_droppedObjectData$in18","_originalItem$ItemPla","ci","every","originalPlant","hasNoPlants","ItemMBOM","AllPlantsRemoved","_originalItem$ItemPla2","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget$body","requirejs","PlatformAPI","rootElement","body","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}